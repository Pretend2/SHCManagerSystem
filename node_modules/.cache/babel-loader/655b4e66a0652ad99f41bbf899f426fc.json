{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport colors from './colors';\nconst prefix = '^\\\\s*';\nconst suffix = '\\\\s*$';\nconst percent = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))%\\\\s*'; // 4 offset\n\nconst float = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))\\\\s*'; // 4 offset\n\nconst hex = '([0-9A-Fa-f])';\nconst dhex = '([0-9A-Fa-f]{2})';\nconst hslRegex = new RegExp(`${prefix}hsl\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hsvRegex = new RegExp(`${prefix}hsv\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hslaRegex = new RegExp(`${prefix}hsla\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst hsvaRegex = new RegExp(`${prefix}hsva\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst rgbRegex = new RegExp(`${prefix}rgb\\\\s*\\\\(${float},${float},${float}\\\\)${suffix}`);\nconst rgbaRegex = new RegExp(`${prefix}rgba\\\\s*\\\\(${float},${float},${float},${float}\\\\)${suffix}`);\nconst sHexRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${suffix}`);\nconst hexRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${suffix}`);\nconst sHexaRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${hex}${suffix}`);\nconst hexaRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${dhex}${suffix}`);\n\nfunction parseHex(value) {\n  return parseInt(value, 16);\n}\n/**\n * Convert color string to hsla array\n * @param color format like hsl(180, 100%, 100%), hsla(180, 100%, 100%, 1)\n * @returns\n */\n\n\nexport function hsla(color) {\n  try {\n    let i;\n\n    if (i = hslaRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), roundAlpha(i[13])];\n    } else if (i = hslRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n    }\n\n    throw new Error(`[seemly/hsla]: Invalid color value ${color}.`);\n  } catch (e) {\n    throw e;\n  }\n}\n/**\n * Convert color string to hsva array\n * @param color format like hsv(180, 100%, 100%), hsva(180, 100%, 100%, 1)\n * @returns\n */\n\nexport function hsva(color) {\n  try {\n    let i;\n\n    if (i = hsvaRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), roundAlpha(i[13])];\n    } else if (i = hsvRegex.exec(color)) {\n      return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n    }\n\n    throw new Error(`[seemly/hsva]: Invalid color value ${color}.`);\n  } catch (e) {\n    throw e;\n  }\n}\n/**\n * Convert color string to rgba array.\n * @param color format like #000[0], #000000[00], rgb(0, 0, 0), rgba(0, 0, 0, 0) and basic color keywords https://www.w3.org/TR/css-color-3/#html4 and transparent\n * @returns\n */\n\nexport function rgba(color) {\n  try {\n    let i;\n\n    if (i = hexRegex.exec(color)) {\n      return [parseHex(i[1]), parseHex(i[2]), parseHex(i[3]), 1];\n    } else if (i = rgbRegex.exec(color)) {\n      return [roundChannel(i[1]), roundChannel(i[5]), roundChannel(i[9]), 1];\n    } else if (i = rgbaRegex.exec(color)) {\n      return [roundChannel(i[1]), roundChannel(i[5]), roundChannel(i[9]), roundAlpha(i[13])];\n    } else if (i = sHexRegex.exec(color)) {\n      return [parseHex(i[1] + i[1]), parseHex(i[2] + i[2]), parseHex(i[3] + i[3]), 1];\n    } else if (i = hexaRegex.exec(color)) {\n      return [parseHex(i[1]), parseHex(i[2]), parseHex(i[3]), roundAlpha(parseHex(i[4]) / 255)];\n    } else if (i = sHexaRegex.exec(color)) {\n      return [parseHex(i[1] + i[1]), parseHex(i[2] + i[2]), parseHex(i[3] + i[3]), roundAlpha(parseHex(i[4] + i[4]) / 255)];\n    } else if (color in colors) {\n      return rgba(colors[color]);\n    }\n\n    throw new Error(`[seemly/rgba]: Invalid color value ${color}.`);\n  } catch (e) {\n    throw e;\n  }\n}\n\nfunction normalizeAlpha(alphaValue) {\n  return alphaValue > 1 ? 1 : alphaValue < 0 ? 0 : alphaValue;\n}\n\nfunction stringifyRgb(r, g, b) {\n  return `rgb(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)})`;\n}\n\nfunction stringifyRgba(r, g, b, a) {\n  return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${normalizeAlpha(a)})`;\n}\n\nfunction compositeChannel(v1, a1, v2, a2, a) {\n  return roundChannel((v1 * a1 * (1 - a2) + v2 * a2) / a);\n}\n\nexport function composite(background, overlay) {\n  if (!Array.isArray(background)) background = rgba(background);\n  if (!Array.isArray(overlay)) overlay = rgba(overlay);\n  const a1 = background[3];\n  const a2 = overlay[3];\n  const alpha = roundAlpha(a1 + a2 - a1 * a2);\n  return stringifyRgba(compositeChannel(background[0], a1, overlay[0], a2, alpha), compositeChannel(background[1], a1, overlay[1], a2, alpha), compositeChannel(background[2], a1, overlay[2], a2, alpha), alpha);\n}\nexport function changeColor(base, options) {\n  const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n\n  if (options.alpha) {\n    return stringifyRgba(r, g, b, options.alpha);\n  }\n\n  return stringifyRgba(r, g, b, a);\n}\nexport function scaleColor(base, options) {\n  const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n  const {\n    lightness = 1,\n    alpha = 1\n  } = options;\n  return toRgbaString([r * lightness, g * lightness, b * lightness, a * alpha]);\n}\nexport function getAlpha(base) {\n  var _a;\n\n  const alpha = (_a = (Array.isArray(base) ? base : rgba(base))[3]) !== null && _a !== void 0 ? _a : 1;\n  return alpha;\n}\nexport function getAlphaString(base) {\n  return `${getAlpha(base)}`;\n}\nexport function roundAlpha(value) {\n  const v = Math.round(Number(value) * 100) / 100;\n  if (v > 1) return 1;\n  if (v < 0) return 0;\n  return v;\n}\nexport function roundDeg(value) {\n  const v = Math.round(Number(value));\n  if (v >= 360) return 0;\n  if (v < 0) return 0;\n  return v;\n}\nexport function roundChannel(value) {\n  const v = Math.round(Number(value));\n  if (v > 255) return 255;\n  if (v < 0) return 0;\n  return v;\n}\nexport function roundPercent(value) {\n  const v = Math.round(Number(value));\n  if (v > 100) return 100;\n  if (v < 0) return 0;\n  return v;\n}\nexport function toRgbString(base) {\n  const [r, g, b] = Array.isArray(base) ? base : rgba(base);\n  return stringifyRgb(r, g, b);\n}\nexport function toRgbaString(base) {\n  const [r, g, b] = base;\n\n  if (3 in base) {\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${roundAlpha(base[3])})`;\n  }\n\n  return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, 1)`;\n}\nexport function toHsvString(base) {\n  return `hsv(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHsvaString(base) {\n  const [h, s, v] = base;\n\n  if (3 in base) {\n    return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, ${roundAlpha(base[3])})`;\n  }\n\n  return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, 1)`;\n}\nexport function toHslString(base) {\n  return `hsl(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHslaString(base) {\n  const [h, s, l] = base;\n\n  if (3 in base) {\n    return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, ${roundAlpha(base[3])})`;\n  }\n\n  return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, 1)`;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\n\nexport function toHexaString(base) {\n  if (typeof base === 'string') {\n    let i;\n\n    if (i = hexRegex.exec(base)) {\n      return `${i[0]}FF`;\n    } else if (i = hexaRegex.exec(base)) {\n      return i[0];\n    } else if (i = sHexRegex.exec(base)) {\n      return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}FF`;\n    } else if (i = sHexaRegex.exec(base)) {\n      return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}${i[4]}${i[4]}`;\n    }\n\n    throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n  }\n\n  const hex = `#${base.slice(0, 3).map(unit => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0')).join('')}`;\n  const a = base.length === 3 ? 'FF' : roundChannel(base[3] * 255).toString(16).padStart(2, '0').toUpperCase();\n  return hex + a;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\n\nexport function toHexString(base) {\n  if (typeof base === 'string') {\n    let i;\n\n    if (i = hexRegex.exec(base)) {\n      return i[0];\n    } else if (i = hexaRegex.exec(base)) {\n      return i[0].slice(0, 7);\n    } else if (i = sHexRegex.exec(base) || sHexaRegex.exec(base)) {\n      return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}`;\n    }\n\n    throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n  }\n\n  return `#${base.slice(0, 3).map(unit => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0')).join('')}`;\n}\nexport { hsl2hsv, hsv2hsl, hsv2rgb, rgb2hsv, rgb2hsl, hsl2rgb } from './convert';","map":{"version":3,"names":["colors","prefix","suffix","percent","float","hex","dhex","hslRegex","RegExp","hsvRegex","hslaRegex","hsvaRegex","rgbRegex","rgbaRegex","sHexRegex","hexRegex","sHexaRegex","hexaRegex","parseHex","value","parseInt","hsla","color","i","exec","roundDeg","roundPercent","roundAlpha","Error","e","hsva","rgba","roundChannel","normalizeAlpha","alphaValue","stringifyRgb","r","g","b","stringifyRgba","a","compositeChannel","v1","a1","v2","a2","composite","background","overlay","Array","isArray","alpha","changeColor","base","options","scaleColor","lightness","toRgbaString","getAlpha","_a","getAlphaString","v","Math","round","Number","toRgbString","toHsvString","toHsvaString","h","s","toHslString","toHslaString","l","toHexaString","slice","map","unit","toString","toUpperCase","padStart","join","length","toHexString","hsl2hsv","hsv2hsl","hsv2rgb","rgb2hsv","rgb2hsl","hsl2rgb"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/seemly/es/color/index.js"],"sourcesContent":["import colors from './colors';\nconst prefix = '^\\\\s*';\nconst suffix = '\\\\s*$';\nconst percent = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))%\\\\s*'; // 4 offset\nconst float = '\\\\s*((\\\\.\\\\d+)|(\\\\d+(\\\\.\\\\d*)?))\\\\s*'; // 4 offset\nconst hex = '([0-9A-Fa-f])';\nconst dhex = '([0-9A-Fa-f]{2})';\nconst hslRegex = new RegExp(`${prefix}hsl\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hsvRegex = new RegExp(`${prefix}hsv\\\\s*\\\\(${float},${percent},${percent}\\\\)${suffix}`);\nconst hslaRegex = new RegExp(`${prefix}hsla\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst hsvaRegex = new RegExp(`${prefix}hsva\\\\s*\\\\(${float},${percent},${percent},${float}\\\\)${suffix}`);\nconst rgbRegex = new RegExp(`${prefix}rgb\\\\s*\\\\(${float},${float},${float}\\\\)${suffix}`);\nconst rgbaRegex = new RegExp(`${prefix}rgba\\\\s*\\\\(${float},${float},${float},${float}\\\\)${suffix}`);\nconst sHexRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${suffix}`);\nconst hexRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${suffix}`);\nconst sHexaRegex = new RegExp(`${prefix}#${hex}${hex}${hex}${hex}${suffix}`);\nconst hexaRegex = new RegExp(`${prefix}#${dhex}${dhex}${dhex}${dhex}${suffix}`);\nfunction parseHex(value) {\n    return parseInt(value, 16);\n}\n/**\n * Convert color string to hsla array\n * @param color format like hsl(180, 100%, 100%), hsla(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsla(color) {\n    try {\n        let i;\n        if ((i = hslaRegex.exec(color))) {\n            return [\n                roundDeg(i[1]),\n                roundPercent(i[5]),\n                roundPercent(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = hslRegex.exec(color))) {\n            return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n        }\n        throw new Error(`[seemly/hsla]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\n/**\n * Convert color string to hsva array\n * @param color format like hsv(180, 100%, 100%), hsva(180, 100%, 100%, 1)\n * @returns\n */\nexport function hsva(color) {\n    try {\n        let i;\n        if ((i = hsvaRegex.exec(color))) {\n            return [\n                roundDeg(i[1]),\n                roundPercent(i[5]),\n                roundPercent(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = hsvRegex.exec(color))) {\n            return [roundDeg(i[1]), roundPercent(i[5]), roundPercent(i[9]), 1];\n        }\n        throw new Error(`[seemly/hsva]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\n/**\n * Convert color string to rgba array.\n * @param color format like #000[0], #000000[00], rgb(0, 0, 0), rgba(0, 0, 0, 0) and basic color keywords https://www.w3.org/TR/css-color-3/#html4 and transparent\n * @returns\n */\nexport function rgba(color) {\n    try {\n        let i;\n        if ((i = hexRegex.exec(color))) {\n            return [parseHex(i[1]), parseHex(i[2]), parseHex(i[3]), 1];\n        }\n        else if ((i = rgbRegex.exec(color))) {\n            return [roundChannel(i[1]), roundChannel(i[5]), roundChannel(i[9]), 1];\n        }\n        else if ((i = rgbaRegex.exec(color))) {\n            return [\n                roundChannel(i[1]),\n                roundChannel(i[5]),\n                roundChannel(i[9]),\n                roundAlpha(i[13])\n            ];\n        }\n        else if ((i = sHexRegex.exec(color))) {\n            return [\n                parseHex(i[1] + i[1]),\n                parseHex(i[2] + i[2]),\n                parseHex(i[3] + i[3]),\n                1\n            ];\n        }\n        else if ((i = hexaRegex.exec(color))) {\n            return [\n                parseHex(i[1]),\n                parseHex(i[2]),\n                parseHex(i[3]),\n                roundAlpha(parseHex(i[4]) / 255)\n            ];\n        }\n        else if ((i = sHexaRegex.exec(color))) {\n            return [\n                parseHex(i[1] + i[1]),\n                parseHex(i[2] + i[2]),\n                parseHex(i[3] + i[3]),\n                roundAlpha(parseHex(i[4] + i[4]) / 255)\n            ];\n        }\n        else if (color in colors) {\n            return rgba(colors[color]);\n        }\n        throw new Error(`[seemly/rgba]: Invalid color value ${color}.`);\n    }\n    catch (e) {\n        throw e;\n    }\n}\nfunction normalizeAlpha(alphaValue) {\n    return alphaValue > 1 ? 1 : alphaValue < 0 ? 0 : alphaValue;\n}\nfunction stringifyRgb(r, g, b) {\n    return `rgb(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)})`;\n}\nfunction stringifyRgba(r, g, b, a) {\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${normalizeAlpha(a)})`;\n}\nfunction compositeChannel(v1, a1, v2, a2, a) {\n    return roundChannel((v1 * a1 * (1 - a2) + v2 * a2) / a);\n}\nexport function composite(background, overlay) {\n    if (!Array.isArray(background))\n        background = rgba(background);\n    if (!Array.isArray(overlay))\n        overlay = rgba(overlay);\n    const a1 = background[3];\n    const a2 = overlay[3];\n    const alpha = roundAlpha(a1 + a2 - a1 * a2);\n    return stringifyRgba(compositeChannel(background[0], a1, overlay[0], a2, alpha), compositeChannel(background[1], a1, overlay[1], a2, alpha), compositeChannel(background[2], a1, overlay[2], a2, alpha), alpha);\n}\nexport function changeColor(base, options) {\n    const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n    if (options.alpha) {\n        return stringifyRgba(r, g, b, options.alpha);\n    }\n    return stringifyRgba(r, g, b, a);\n}\nexport function scaleColor(base, options) {\n    const [r, g, b, a = 1] = Array.isArray(base) ? base : rgba(base);\n    const { lightness = 1, alpha = 1 } = options;\n    return toRgbaString([r * lightness, g * lightness, b * lightness, a * alpha]);\n}\nexport function getAlpha(base) {\n    var _a;\n    const alpha = (_a = (Array.isArray(base) ? base : rgba(base))[3]) !== null && _a !== void 0 ? _a : 1;\n    return alpha;\n}\nexport function getAlphaString(base) {\n    return `${getAlpha(base)}`;\n}\nexport function roundAlpha(value) {\n    const v = Math.round(Number(value) * 100) / 100;\n    if (v > 1)\n        return 1;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundDeg(value) {\n    const v = Math.round(Number(value));\n    if (v >= 360)\n        return 0;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundChannel(value) {\n    const v = Math.round(Number(value));\n    if (v > 255)\n        return 255;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function roundPercent(value) {\n    const v = Math.round(Number(value));\n    if (v > 100)\n        return 100;\n    if (v < 0)\n        return 0;\n    return v;\n}\nexport function toRgbString(base) {\n    const [r, g, b] = Array.isArray(base) ? base : rgba(base);\n    return stringifyRgb(r, g, b);\n}\nexport function toRgbaString(base) {\n    const [r, g, b] = base;\n    if (3 in base) {\n        return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, ${roundAlpha(base[3])})`;\n    }\n    return `rgba(${roundChannel(r)}, ${roundChannel(g)}, ${roundChannel(b)}, 1)`;\n}\nexport function toHsvString(base) {\n    return `hsv(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHsvaString(base) {\n    const [h, s, v] = base;\n    if (3 in base) {\n        return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, ${roundAlpha(base[3])})`;\n    }\n    return `hsva(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(v)}%, 1)`;\n}\nexport function toHslString(base) {\n    return `hsl(${roundDeg(base[0])}, ${roundPercent(base[1])}%, ${roundPercent(base[2])}%)`;\n}\nexport function toHslaString(base) {\n    const [h, s, l] = base;\n    if (3 in base) {\n        return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, ${roundAlpha(base[3])})`;\n    }\n    return `hsla(${roundDeg(h)}, ${roundPercent(s)}%, ${roundPercent(l)}%, 1)`;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexaString(base) {\n    if (typeof base === 'string') {\n        let i;\n        if (i = hexRegex.exec(base)) {\n            return `${i[0]}FF`;\n        }\n        else if (i = hexaRegex.exec(base)) {\n            return i[0];\n        }\n        else if (i = sHexRegex.exec(base)) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}FF`;\n        }\n        else if (i = sHexaRegex.exec(base)) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}${i[4]}${i[4]}`;\n        }\n        throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n    }\n    const hex = `#${base\n        .slice(0, 3)\n        .map((unit) => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0'))\n        .join('')}`;\n    const a = base.length === 3\n        ? 'FF'\n        : roundChannel(base[3] * 255)\n            .toString(16)\n            .padStart(2, '0')\n            .toUpperCase();\n    return hex + a;\n}\n/**\n *\n * @param base [255, 255, 255, 255], [255, 255, 255], any hex string\n * @returns\n */\nexport function toHexString(base) {\n    if (typeof base === 'string') {\n        let i;\n        if (i = hexRegex.exec(base)) {\n            return i[0];\n        }\n        else if (i = hexaRegex.exec(base)) {\n            return i[0].slice(0, 7);\n        }\n        else if (i = (sHexRegex.exec(base) || sHexaRegex.exec(base))) {\n            return `#${i[1]}${i[1]}${i[2]}${i[2]}${i[3]}${i[3]}`;\n        }\n        throw new Error(`[seemly/toHexString]: Invalid hex value ${base}.`);\n    }\n    return `#${base\n        .slice(0, 3)\n        .map((unit) => roundChannel(unit).toString(16).toUpperCase().padStart(2, '0'))\n        .join('')}`;\n}\nexport { hsl2hsv, hsv2hsl, hsv2rgb, rgb2hsv, rgb2hsl, hsl2rgb } from './convert';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}