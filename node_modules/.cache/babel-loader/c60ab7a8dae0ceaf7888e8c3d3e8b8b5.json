{"ast":null,"code":"import { inject, ref, toRef, watchEffect } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const radioProps = {\n  name: String,\n  value: {\n    type: [String, Number, Boolean],\n    default: 'on'\n  },\n  checked: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultChecked: Boolean,\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  label: String,\n  size: String,\n  onUpdateChecked: [Function, Array],\n  'onUpdate:checked': [Function, Array],\n  // deprecated\n  checkedValue: {\n    type: Boolean,\n    default: undefined\n  }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\n\nfunction setup(props) {\n  if (process.env.NODE_ENV !== 'production') {\n    watchEffect(() => {\n      if (props.checkedValue !== undefined) {\n        warnOnce('radio', '`checked-value` is deprecated, please use `checked` instead.');\n      }\n    });\n  }\n\n  const formItem = useFormItem(props, {\n    mergedSize(NFormItem) {\n      const {\n        size\n      } = props;\n      if (size !== undefined) return size;\n\n      if (NRadioGroup) {\n        const {\n          mergedSizeRef: {\n            value: mergedSize\n          }\n        } = NRadioGroup;\n\n        if (mergedSize !== undefined) {\n          return mergedSize;\n        }\n      }\n\n      if (NFormItem) {\n        return NFormItem.mergedSize.value;\n      }\n\n      return 'medium';\n    },\n\n    mergedDisabled(NFormItem) {\n      if (props.disabled) return true;\n      if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value) return true;\n      if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value) return true;\n      return false;\n    }\n\n  });\n  const {\n    mergedSizeRef,\n    mergedDisabledRef\n  } = formItem;\n  const inputRef = ref(null);\n  const labelRef = ref(null);\n  const NRadioGroup = inject(radioGroupInjectionKey, null);\n  const uncontrolledCheckedRef = ref(props.defaultChecked);\n  const controlledCheckedRef = toRef(props, 'checked');\n  const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n  const renderSafeCheckedRef = useMemo(() => {\n    if (NRadioGroup) return NRadioGroup.valueRef.value === props.value;\n    return mergedCheckedRef.value;\n  });\n  const mergedNameRef = useMemo(() => {\n    const {\n      name\n    } = props;\n    if (name !== undefined) return name;\n    if (NRadioGroup) return NRadioGroup.nameRef.value;\n  });\n  const focusRef = ref(false);\n\n  function doUpdateChecked() {\n    if (NRadioGroup) {\n      const {\n        doUpdateValue\n      } = NRadioGroup;\n      const {\n        value\n      } = props;\n      call(doUpdateValue, value);\n    } else {\n      const {\n        onUpdateChecked,\n        'onUpdate:checked': _onUpdateChecked\n      } = props;\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      if (onUpdateChecked) call(onUpdateChecked, true);\n      if (_onUpdateChecked) call(_onUpdateChecked, true);\n      nTriggerFormInput();\n      nTriggerFormChange();\n      uncontrolledCheckedRef.value = true;\n    }\n  }\n\n  function toggle() {\n    if (mergedDisabledRef.value) return;\n\n    if (!renderSafeCheckedRef.value) {\n      doUpdateChecked();\n    }\n  }\n\n  function handleRadioInputChange() {\n    toggle();\n  }\n\n  function handleRadioInputBlur() {\n    focusRef.value = false;\n  }\n\n  function handleRadioInputFocus() {\n    focusRef.value = true;\n  }\n\n  return {\n    mergedClsPrefix: NRadioGroup ? NRadioGroup.mergedClsPrefixRef : useConfig(props).mergedClsPrefixRef,\n    inputRef,\n    labelRef,\n    mergedName: mergedNameRef,\n    mergedDisabled: mergedDisabledRef,\n    uncontrolledChecked: uncontrolledCheckedRef,\n    renderSafeChecked: renderSafeCheckedRef,\n    focus: focusRef,\n    mergedSize: mergedSizeRef,\n    handleRadioInputChange,\n    handleRadioInputBlur,\n    handleRadioInputFocus\n  };\n}\n\nexport { setup };","map":{"version":3,"names":["inject","ref","toRef","watchEffect","useMemo","useMergedState","useConfig","useFormItem","call","createInjectionKey","warnOnce","radioProps","name","String","value","type","Number","Boolean","default","checked","undefined","defaultChecked","disabled","label","size","onUpdateChecked","Function","Array","checkedValue","radioGroupInjectionKey","setup","props","process","env","NODE_ENV","formItem","mergedSize","NFormItem","NRadioGroup","mergedSizeRef","mergedDisabled","disabledRef","mergedDisabledRef","inputRef","labelRef","uncontrolledCheckedRef","controlledCheckedRef","mergedCheckedRef","renderSafeCheckedRef","valueRef","mergedNameRef","nameRef","focusRef","doUpdateChecked","doUpdateValue","_onUpdateChecked","nTriggerFormInput","nTriggerFormChange","toggle","handleRadioInputChange","handleRadioInputBlur","handleRadioInputFocus","mergedClsPrefix","mergedClsPrefixRef","mergedName","uncontrolledChecked","renderSafeChecked","focus"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/radio/src/use-radio.js"],"sourcesContent":["import { inject, ref, toRef, watchEffect } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const radioProps = {\n    name: String,\n    value: {\n        type: [String, Number, Boolean],\n        default: 'on'\n    },\n    checked: {\n        type: Boolean,\n        default: undefined\n    },\n    defaultChecked: Boolean,\n    disabled: {\n        type: Boolean,\n        default: undefined\n    },\n    label: String,\n    size: String,\n    onUpdateChecked: [Function, Array],\n    'onUpdate:checked': [Function, Array],\n    // deprecated\n    checkedValue: {\n        type: Boolean,\n        default: undefined\n    }\n};\nexport const radioGroupInjectionKey = createInjectionKey('n-radio-group');\nfunction setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n        watchEffect(() => {\n            if (props.checkedValue !== undefined) {\n                warnOnce('radio', '`checked-value` is deprecated, please use `checked` instead.');\n            }\n        });\n    }\n    const formItem = useFormItem(props, {\n        mergedSize(NFormItem) {\n            const { size } = props;\n            if (size !== undefined)\n                return size;\n            if (NRadioGroup) {\n                const { mergedSizeRef: { value: mergedSize } } = NRadioGroup;\n                if (mergedSize !== undefined) {\n                    return mergedSize;\n                }\n            }\n            if (NFormItem) {\n                return NFormItem.mergedSize.value;\n            }\n            return 'medium';\n        },\n        mergedDisabled(NFormItem) {\n            if (props.disabled)\n                return true;\n            if (NRadioGroup === null || NRadioGroup === void 0 ? void 0 : NRadioGroup.disabledRef.value)\n                return true;\n            if (NFormItem === null || NFormItem === void 0 ? void 0 : NFormItem.disabled.value)\n                return true;\n            return false;\n        }\n    });\n    const { mergedSizeRef, mergedDisabledRef } = formItem;\n    const inputRef = ref(null);\n    const labelRef = ref(null);\n    const NRadioGroup = inject(radioGroupInjectionKey, null);\n    const uncontrolledCheckedRef = ref(props.defaultChecked);\n    const controlledCheckedRef = toRef(props, 'checked');\n    const mergedCheckedRef = useMergedState(controlledCheckedRef, uncontrolledCheckedRef);\n    const renderSafeCheckedRef = useMemo(() => {\n        if (NRadioGroup)\n            return NRadioGroup.valueRef.value === props.value;\n        return mergedCheckedRef.value;\n    });\n    const mergedNameRef = useMemo(() => {\n        const { name } = props;\n        if (name !== undefined)\n            return name;\n        if (NRadioGroup)\n            return NRadioGroup.nameRef.value;\n    });\n    const focusRef = ref(false);\n    function doUpdateChecked() {\n        if (NRadioGroup) {\n            const { doUpdateValue } = NRadioGroup;\n            const { value } = props;\n            call(doUpdateValue, value);\n        }\n        else {\n            const { onUpdateChecked, 'onUpdate:checked': _onUpdateChecked } = props;\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            if (onUpdateChecked)\n                call(onUpdateChecked, true);\n            if (_onUpdateChecked)\n                call(_onUpdateChecked, true);\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledCheckedRef.value = true;\n        }\n    }\n    function toggle() {\n        if (mergedDisabledRef.value)\n            return;\n        if (!renderSafeCheckedRef.value) {\n            doUpdateChecked();\n        }\n    }\n    function handleRadioInputChange() {\n        toggle();\n    }\n    function handleRadioInputBlur() {\n        focusRef.value = false;\n    }\n    function handleRadioInputFocus() {\n        focusRef.value = true;\n    }\n    return {\n        mergedClsPrefix: NRadioGroup\n            ? NRadioGroup.mergedClsPrefixRef\n            : useConfig(props).mergedClsPrefixRef,\n        inputRef,\n        labelRef,\n        mergedName: mergedNameRef,\n        mergedDisabled: mergedDisabledRef,\n        uncontrolledChecked: uncontrolledCheckedRef,\n        renderSafeChecked: renderSafeCheckedRef,\n        focus: focusRef,\n        mergedSize: mergedSizeRef,\n        handleRadioInputChange,\n        handleRadioInputBlur,\n        handleRadioInputFocus\n    };\n}\nexport { setup };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}