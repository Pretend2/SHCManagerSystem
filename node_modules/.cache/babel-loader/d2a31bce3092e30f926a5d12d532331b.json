{"ast":null,"code":"import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { formatLength, call, warn, useReactivated } from '../../_utils';\nimport { NScrollbar } from '../../_internal';\nimport { layoutLight } from '../styles';\nimport style from './styles/layout-sider.cssr';\nimport ToggleButton from './ToggleButton';\nimport ToggleBar from './ToggleBar';\nimport { layoutSiderInjectionKey, positionProp } from './interface';\nimport { layoutInjectionKey } from './Layout';\nexport const layoutSiderProps = {\n  position: positionProp,\n  bordered: Boolean,\n  collapsedWidth: {\n    type: Number,\n    default: 48\n  },\n  width: {\n    type: [Number, String],\n    default: 272\n  },\n  contentStyle: {\n    type: [String, Object],\n    default: ''\n  },\n  collapseMode: {\n    type: String,\n    default: 'transform'\n  },\n  collapsed: {\n    type: Boolean,\n    default: undefined\n  },\n  defaultCollapsed: Boolean,\n  showCollapsedContent: {\n    type: Boolean,\n    default: true\n  },\n  showTrigger: {\n    type: [Boolean, String],\n    default: false\n  },\n  nativeScrollbar: {\n    type: Boolean,\n    default: true\n  },\n  inverted: Boolean,\n  scrollbarProps: Object,\n  triggerStyle: [String, Object],\n  collapsedTriggerStyle: [String, Object],\n  'onUpdate:collapsed': [Function, Array],\n  onUpdateCollapsed: [Function, Array],\n  onAfterEnter: Function,\n  onAfterLeave: Function,\n  // deprecated\n  onExpand: [Function, Array],\n  onCollapse: [Function, Array],\n  onScroll: Function\n};\nexport default defineComponent({\n  name: 'LayoutSider',\n  props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n\n  setup(props) {\n    const layoutProps = inject(layoutInjectionKey);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!layoutProps) {\n        warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n      } else {\n        if (!layoutProps.hasSider) {\n          warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n        }\n      }\n    }\n\n    const scrollableElRef = ref(null);\n    const scrollbarInstRef = ref(null);\n    const styleMaxWidthRef = computed(() => {\n      return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n    });\n    const scrollContainerStyleRef = computed(() => {\n      if (props.collapseMode !== 'transform') return {};\n      return {\n        minWidth: formatLength(props.width)\n      };\n    });\n    const siderPlacementRef = computed(() => {\n      return layoutProps ? layoutProps.siderPlacement : 'left';\n    });\n    const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n    const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n\n    function scrollTo(options, y) {\n      if (props.nativeScrollbar) {\n        const {\n          value: scrollableEl\n        } = scrollableElRef;\n\n        if (scrollableEl) {\n          if (y === undefined) {\n            scrollableEl.scrollTo(options);\n          } else {\n            scrollableEl.scrollTo(options, y);\n          }\n        }\n      } else {\n        const {\n          value: scrollbarInst\n        } = scrollbarInstRef;\n\n        if (scrollbarInst) {\n          scrollbarInst.scrollTo(options, y);\n        }\n      }\n    }\n\n    function handleTriggerClick() {\n      const {\n        'onUpdate:collapsed': _onUpdateCollapsed,\n        onUpdateCollapsed,\n        // deprecated\n        onExpand,\n        onCollapse\n      } = props;\n      const {\n        value: collapsed\n      } = mergedCollapsedRef;\n\n      if (onUpdateCollapsed) {\n        call(onUpdateCollapsed, !collapsed);\n      }\n\n      if (_onUpdateCollapsed) {\n        call(_onUpdateCollapsed, !collapsed);\n      }\n\n      uncontrolledCollapsedRef.value = !collapsed;\n\n      if (collapsed) {\n        if (onExpand) call(onExpand);\n      } else {\n        if (onCollapse) call(onCollapse);\n      }\n    }\n\n    let scrollX = 0;\n    let scrollY = 0;\n\n    const handleNativeElScroll = e => {\n      var _a;\n\n      const target = e.target;\n      scrollX = target.scrollLeft;\n      scrollY = target.scrollTop;\n      (_a = props.onScroll) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    };\n\n    useReactivated(() => {\n      if (props.nativeScrollbar) {\n        const el = scrollableElRef.value;\n\n        if (el) {\n          el.scrollTop = scrollY;\n          el.scrollLeft = scrollX;\n        }\n      }\n    });\n    provide(layoutSiderInjectionKey, {\n      collapsedRef: mergedCollapsedRef,\n      collapseModeRef: toRef(props, 'collapseMode')\n    });\n    const {\n      mergedClsPrefixRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n\n    function handleTransitionend(e) {\n      var _a, _b;\n\n      if (e.propertyName === 'max-width') {\n        if (mergedCollapsedRef.value) {\n          (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n        } else {\n          (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n        }\n      }\n    }\n\n    const exposedMethods = {\n      scrollTo\n    };\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self\n      } = themeRef.value;\n      const {\n        siderToggleButtonColor,\n        siderToggleButtonBorder,\n        siderToggleBarColor,\n        siderToggleBarColorHover\n      } = self;\n      const vars = {\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-toggle-button-color': siderToggleButtonColor,\n        '--n-toggle-button-border': siderToggleButtonBorder,\n        '--n-toggle-bar-color': siderToggleBarColor,\n        '--n-toggle-bar-color-hover': siderToggleBarColorHover\n      };\n\n      if (props.inverted) {\n        vars['--n-color'] = self.siderColorInverted;\n        vars['--n-text-color'] = self.textColorInverted;\n        vars['--n-border-color'] = self.siderBorderColorInverted;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColorInverted;\n        vars.__invertScrollbar = self.__invertScrollbar;\n      } else {\n        vars['--n-color'] = self.siderColor;\n        vars['--n-text-color'] = self.textColor;\n        vars['--n-border-color'] = self.siderBorderColor;\n        vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n      }\n\n      return vars;\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('layout-sider', computed(() => props.inverted ? 'a' : 'b'), cssVarsRef, props) : undefined;\n    return Object.assign({\n      scrollableElRef,\n      scrollbarInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: themeRef,\n      styleMaxWidth: styleMaxWidthRef,\n      mergedCollapsed: mergedCollapsedRef,\n      scrollContainerStyle: scrollContainerStyleRef,\n      siderPlacement: siderPlacementRef,\n      handleNativeElScroll,\n      handleTransitionend,\n      handleTriggerClick,\n      inlineThemeDisabled,\n      cssVars: cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    }, exposedMethods);\n  },\n\n  render() {\n    var _a;\n\n    const {\n      mergedClsPrefix,\n      mergedCollapsed,\n      showTrigger\n    } = this;\n    (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n    return h(\"aside\", {\n      class: [`${mergedClsPrefix}-layout-sider`, this.themeClass, `${mergedClsPrefix}-layout-sider--${this.position}-positioned`, `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`, this.bordered && `${mergedClsPrefix}-layout-sider--bordered`, mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`, (!mergedCollapsed || this.showCollapsedContent) && `${mergedClsPrefix}-layout-sider--show-content`],\n      onTransitionend: this.handleTransitionend,\n      style: [this.inlineThemeDisabled ? undefined : this.cssVars, {\n        maxWidth: this.styleMaxWidth,\n        width: formatLength(this.width)\n      }]\n    }, !this.nativeScrollbar ? h(NScrollbar, Object.assign({}, this.scrollbarProps, {\n      onScroll: this.onScroll,\n      ref: \"scrollbarInstRef\",\n      style: this.scrollContainerStyle,\n      contentStyle: this.contentStyle,\n      theme: this.mergedTheme.peers.Scrollbar,\n      themeOverrides: this.mergedTheme.peerOverrides.Scrollbar,\n      // here is a hack, since in light theme the scrollbar color is dark,\n      // we need to invert it in light color...\n      builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true' ? {\n        colorHover: 'rgba(255, 255, 255, .4)',\n        color: 'rgba(255, 255, 255, .3)'\n      } : undefined\n    }), this.$slots) : h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider-scroll-container`,\n      onScroll: this.handleNativeElScroll,\n      style: [this.scrollContainerStyle, {\n        overflow: 'auto'\n      }, this.contentStyle],\n      ref: \"scrollableElRef\"\n    }, this.$slots), showTrigger ? showTrigger === 'bar' ? h(ToggleBar, {\n      clsPrefix: mergedClsPrefix,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : h(ToggleButton, {\n      clsPrefix: mergedClsPrefix,\n      style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle,\n      onClick: this.handleTriggerClick\n    }) : null, this.bordered ? h(\"div\", {\n      class: `${mergedClsPrefix}-layout-sider__border`\n    }) : null);\n  }\n\n});","map":{"version":3,"names":["h","defineComponent","computed","ref","toRef","inject","provide","useMergedState","useConfig","useTheme","useThemeClass","formatLength","call","warn","useReactivated","NScrollbar","layoutLight","style","ToggleButton","ToggleBar","layoutSiderInjectionKey","positionProp","layoutInjectionKey","layoutSiderProps","position","bordered","Boolean","collapsedWidth","type","Number","default","width","String","contentStyle","Object","collapseMode","collapsed","undefined","defaultCollapsed","showCollapsedContent","showTrigger","nativeScrollbar","inverted","scrollbarProps","triggerStyle","collapsedTriggerStyle","Function","Array","onUpdateCollapsed","onAfterEnter","onAfterLeave","onExpand","onCollapse","onScroll","name","props","assign","setup","layoutProps","process","env","NODE_ENV","hasSider","scrollableElRef","scrollbarInstRef","styleMaxWidthRef","mergedCollapsedRef","value","scrollContainerStyleRef","minWidth","siderPlacementRef","siderPlacement","uncontrolledCollapsedRef","scrollTo","options","y","scrollableEl","scrollbarInst","handleTriggerClick","_onUpdateCollapsed","scrollX","scrollY","handleNativeElScroll","e","_a","target","scrollLeft","scrollTop","el","collapsedRef","collapseModeRef","mergedClsPrefixRef","inlineThemeDisabled","themeRef","handleTransitionend","_b","propertyName","exposedMethods","cssVarsRef","common","cubicBezierEaseInOut","self","siderToggleButtonColor","siderToggleButtonBorder","siderToggleBarColor","siderToggleBarColorHover","vars","siderColorInverted","textColorInverted","siderBorderColorInverted","siderToggleButtonIconColorInverted","__invertScrollbar","siderColor","textColor","siderBorderColor","siderToggleButtonIconColor","themeClassHandle","mergedClsPrefix","mergedTheme","styleMaxWidth","mergedCollapsed","scrollContainerStyle","cssVars","themeClass","onRender","render","class","onTransitionend","maxWidth","theme","peers","Scrollbar","themeOverrides","peerOverrides","builtinThemeOverrides","colorHover","color","$slots","overflow","clsPrefix","onClick"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/layout/src/LayoutSider.js"],"sourcesContent":["import { h, defineComponent, computed, ref, toRef, inject, provide } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useTheme, useThemeClass } from '../../_mixins';\nimport { formatLength, call, warn, useReactivated } from '../../_utils';\nimport { NScrollbar } from '../../_internal';\nimport { layoutLight } from '../styles';\nimport style from './styles/layout-sider.cssr';\nimport ToggleButton from './ToggleButton';\nimport ToggleBar from './ToggleBar';\nimport { layoutSiderInjectionKey, positionProp } from './interface';\nimport { layoutInjectionKey } from './Layout';\nexport const layoutSiderProps = {\n    position: positionProp,\n    bordered: Boolean,\n    collapsedWidth: {\n        type: Number,\n        default: 48\n    },\n    width: {\n        type: [Number, String],\n        default: 272\n    },\n    contentStyle: {\n        type: [String, Object],\n        default: ''\n    },\n    collapseMode: {\n        type: String,\n        default: 'transform'\n    },\n    collapsed: {\n        type: Boolean,\n        default: undefined\n    },\n    defaultCollapsed: Boolean,\n    showCollapsedContent: {\n        type: Boolean,\n        default: true\n    },\n    showTrigger: {\n        type: [Boolean, String],\n        default: false\n    },\n    nativeScrollbar: {\n        type: Boolean,\n        default: true\n    },\n    inverted: Boolean,\n    scrollbarProps: Object,\n    triggerStyle: [String, Object],\n    collapsedTriggerStyle: [String, Object],\n    'onUpdate:collapsed': [Function, Array],\n    onUpdateCollapsed: [Function, Array],\n    onAfterEnter: Function,\n    onAfterLeave: Function,\n    // deprecated\n    onExpand: [Function, Array],\n    onCollapse: [Function, Array],\n    onScroll: Function\n};\nexport default defineComponent({\n    name: 'LayoutSider',\n    props: Object.assign(Object.assign({}, useTheme.props), layoutSiderProps),\n    setup(props) {\n        const layoutProps = inject(layoutInjectionKey);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!layoutProps) {\n                warn('layout-sider', 'Layout sider is not allowed to be put outside layout.');\n            }\n            else {\n                if (!layoutProps.hasSider) {\n                    warn('layout-sider', \"You are putting `n-layout-sider` in a `n-layout` but haven't set `has-sider` on the `n-layout`.\");\n                }\n            }\n        }\n        const scrollableElRef = ref(null);\n        const scrollbarInstRef = ref(null);\n        const styleMaxWidthRef = computed(() => {\n            return formatLength(mergedCollapsedRef.value ? props.collapsedWidth : props.width);\n        });\n        const scrollContainerStyleRef = computed(() => {\n            if (props.collapseMode !== 'transform')\n                return {};\n            return {\n                minWidth: formatLength(props.width)\n            };\n        });\n        const siderPlacementRef = computed(() => {\n            return layoutProps ? layoutProps.siderPlacement : 'left';\n        });\n        const uncontrolledCollapsedRef = ref(props.defaultCollapsed);\n        const mergedCollapsedRef = useMergedState(toRef(props, 'collapsed'), uncontrolledCollapsedRef);\n        function scrollTo(options, y) {\n            if (props.nativeScrollbar) {\n                const { value: scrollableEl } = scrollableElRef;\n                if (scrollableEl) {\n                    if (y === undefined) {\n                        scrollableEl.scrollTo(options);\n                    }\n                    else {\n                        scrollableEl.scrollTo(options, y);\n                    }\n                }\n            }\n            else {\n                const { value: scrollbarInst } = scrollbarInstRef;\n                if (scrollbarInst) {\n                    scrollbarInst.scrollTo(options, y);\n                }\n            }\n        }\n        function handleTriggerClick() {\n            const { 'onUpdate:collapsed': _onUpdateCollapsed, onUpdateCollapsed, \n            // deprecated\n            onExpand, onCollapse } = props;\n            const { value: collapsed } = mergedCollapsedRef;\n            if (onUpdateCollapsed) {\n                call(onUpdateCollapsed, !collapsed);\n            }\n            if (_onUpdateCollapsed) {\n                call(_onUpdateCollapsed, !collapsed);\n            }\n            uncontrolledCollapsedRef.value = !collapsed;\n            if (collapsed) {\n                if (onExpand)\n                    call(onExpand);\n            }\n            else {\n                if (onCollapse)\n                    call(onCollapse);\n            }\n        }\n        let scrollX = 0;\n        let scrollY = 0;\n        const handleNativeElScroll = (e) => {\n            var _a;\n            const target = e.target;\n            scrollX = target.scrollLeft;\n            scrollY = target.scrollTop;\n            (_a = props.onScroll) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        };\n        useReactivated(() => {\n            if (props.nativeScrollbar) {\n                const el = scrollableElRef.value;\n                if (el) {\n                    el.scrollTop = scrollY;\n                    el.scrollLeft = scrollX;\n                }\n            }\n        });\n        provide(layoutSiderInjectionKey, {\n            collapsedRef: mergedCollapsedRef,\n            collapseModeRef: toRef(props, 'collapseMode')\n        });\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Layout', '-layout-sider', style, layoutLight, props, mergedClsPrefixRef);\n        function handleTransitionend(e) {\n            var _a, _b;\n            if (e.propertyName === 'max-width') {\n                if (mergedCollapsedRef.value) {\n                    (_a = props.onAfterLeave) === null || _a === void 0 ? void 0 : _a.call(props);\n                }\n                else {\n                    (_b = props.onAfterEnter) === null || _b === void 0 ? void 0 : _b.call(props);\n                }\n            }\n        }\n        const exposedMethods = {\n            scrollTo\n        };\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self } = themeRef.value;\n            const { siderToggleButtonColor, siderToggleButtonBorder, siderToggleBarColor, siderToggleBarColorHover } = self;\n            const vars = {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-toggle-button-color': siderToggleButtonColor,\n                '--n-toggle-button-border': siderToggleButtonBorder,\n                '--n-toggle-bar-color': siderToggleBarColor,\n                '--n-toggle-bar-color-hover': siderToggleBarColorHover\n            };\n            if (props.inverted) {\n                vars['--n-color'] = self.siderColorInverted;\n                vars['--n-text-color'] = self.textColorInverted;\n                vars['--n-border-color'] = self.siderBorderColorInverted;\n                vars['--n-toggle-button-icon-color'] =\n                    self.siderToggleButtonIconColorInverted;\n                vars.__invertScrollbar = self.__invertScrollbar;\n            }\n            else {\n                vars['--n-color'] = self.siderColor;\n                vars['--n-text-color'] = self.textColor;\n                vars['--n-border-color'] = self.siderBorderColor;\n                vars['--n-toggle-button-icon-color'] = self.siderToggleButtonIconColor;\n            }\n            return vars;\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('layout-sider', computed(() => (props.inverted ? 'a' : 'b')), cssVarsRef, props)\n            : undefined;\n        return Object.assign({ scrollableElRef,\n            scrollbarInstRef, mergedClsPrefix: mergedClsPrefixRef, mergedTheme: themeRef, styleMaxWidth: styleMaxWidthRef, mergedCollapsed: mergedCollapsedRef, scrollContainerStyle: scrollContainerStyleRef, siderPlacement: siderPlacementRef, handleNativeElScroll,\n            handleTransitionend,\n            handleTriggerClick,\n            inlineThemeDisabled, cssVars: cssVarsRef, themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass, onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender }, exposedMethods);\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, mergedCollapsed, showTrigger } = this;\n        (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n        return (h(\"aside\", { class: [\n                `${mergedClsPrefix}-layout-sider`,\n                this.themeClass,\n                `${mergedClsPrefix}-layout-sider--${this.position}-positioned`,\n                `${mergedClsPrefix}-layout-sider--${this.siderPlacement}-placement`,\n                this.bordered && `${mergedClsPrefix}-layout-sider--bordered`,\n                mergedCollapsed && `${mergedClsPrefix}-layout-sider--collapsed`,\n                (!mergedCollapsed || this.showCollapsedContent) &&\n                    `${mergedClsPrefix}-layout-sider--show-content`\n            ], onTransitionend: this.handleTransitionend, style: [\n                this.inlineThemeDisabled ? undefined : this.cssVars,\n                {\n                    maxWidth: this.styleMaxWidth,\n                    width: formatLength(this.width)\n                }\n            ] },\n            !this.nativeScrollbar ? (h(NScrollbar, Object.assign({}, this.scrollbarProps, { onScroll: this.onScroll, ref: \"scrollbarInstRef\", style: this.scrollContainerStyle, contentStyle: this.contentStyle, theme: this.mergedTheme.peers.Scrollbar, themeOverrides: this.mergedTheme.peerOverrides.Scrollbar, \n                // here is a hack, since in light theme the scrollbar color is dark,\n                // we need to invert it in light color...\n                builtinThemeOverrides: this.inverted && this.cssVars.__invertScrollbar === 'true'\n                    ? {\n                        colorHover: 'rgba(255, 255, 255, .4)',\n                        color: 'rgba(255, 255, 255, .3)'\n                    }\n                    : undefined }), this.$slots)) : (h(\"div\", { class: `${mergedClsPrefix}-layout-sider-scroll-container`, onScroll: this.handleNativeElScroll, style: [\n                    this.scrollContainerStyle,\n                    {\n                        overflow: 'auto'\n                    },\n                    this.contentStyle\n                ], ref: \"scrollableElRef\" }, this.$slots)),\n            showTrigger ? (showTrigger === 'bar' ? (h(ToggleBar, { clsPrefix: mergedClsPrefix, style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle, onClick: this.handleTriggerClick })) : (h(ToggleButton, { clsPrefix: mergedClsPrefix, style: mergedCollapsed ? this.collapsedTriggerStyle : this.triggerStyle, onClick: this.handleTriggerClick }))) : null,\n            this.bordered ? (h(\"div\", { class: `${mergedClsPrefix}-layout-sider__border` })) : null));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}