{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport toInteger from 'date-fns/_lib/toInteger/index.js';\nimport getTimezoneOffsetInMilliseconds from 'date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport tzParseTimezone from '../_lib/tzParseTimezone/index.js';\nimport tzPattern from '../_lib/tzPattern/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\n  datePattern: /^([0-9W+-]+)(.*)/,\n  plainTime: /:/,\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [/^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [/^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n  ],\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  // time zone tokens (to identify the presence of a tz)\n  timeZone: tzPattern\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  if (argument === null) {\n    return new Date(NaN);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  } // Clone the date\n\n\n  if (argument instanceof Date || typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\n    return new Date(argument);\n  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n\n      if (isNaN(time)) {\n        return new Date(NaN);\n      }\n    }\n\n    if (dateStrings.timeZone || options.timeZone) {\n      offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time));\n\n      if (isNaN(offset)) {\n        return new Date(NaN);\n      }\n    } else {\n      // get offset accurate to hour in time zones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n    }\n\n    return new Date(timestamp + time + offset);\n  } else {\n    return new Date(NaN);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var parts = patterns.dateTimePattern.exec(dateString);\n  var timeString;\n\n  if (!parts) {\n    parts = patterns.datePattern.exec(dateString);\n\n    if (parts) {\n      dateStrings.date = parts[1];\n      timeString = parts[2];\n    } else {\n      dateStrings.date = null;\n      timeString = dateString;\n    }\n  } else {\n    dateStrings.date = parts[1];\n    timeString = parts[3];\n  }\n\n  if (timeString) {\n    var token = patterns.timeZone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timeZone = token[1].trim();\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = patterns.MM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = patterns.DDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // yyyy-MM-dd or YYYYMMDD\n\n\n  token = patterns.MMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = patterns.Www.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = patterns.WwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = patterns.HH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n\n    if (!validateTime(hours)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = patterns.HHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n\n    if (!validateTime(hours, minutes)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = patterns.HHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false;\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false;\n    }\n\n    var isLeapYear = isLeapYearIndex(year);\n\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false;\n    }\n\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false;\n  }\n\n  var isLeapYear = isLeapYearIndex(year);\n\n  if (isLeapYear && dayOfYear > 366) {\n    return false;\n  }\n\n  if (!isLeapYear && dayOfYear > 365) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false;\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false;\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false;\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"names":["toInteger","getTimezoneOffsetInMilliseconds","tzParseTimezone","tzPattern","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimePattern","datePattern","plainTime","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","timeZone","toDate","argument","dirtyOptions","arguments","length","TypeError","Date","NaN","options","additionalDigits","RangeError","Object","prototype","toString","call","getTime","dateStrings","splitDateString","parseYearResult","parseYear","date","year","restDateString","parseDate","isNaN","timestamp","time","offset","parseTime","dateString","parts","exec","timeString","token","replace","trim","patternYYY","patternYYYYY","yearString","parseInt","slice","centuryString","month","week","setUTCFullYear","validateDate","dayOfYear","validateDayOfYearDate","day","validateWeekDate","dayOfISOWeekYear","dayOfWeek","hours","minutes","parseFloat","validateTime","seconds","isoWeekYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","isLeapYear"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/date-fns-tz/esm/toDate/index.js"],"sourcesContent":["import toInteger from 'date-fns/_lib/toInteger/index.js'\nimport getTimezoneOffsetInMilliseconds from 'date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport tzParseTimezone from '../_lib/tzParseTimezone/index.js'\nimport tzPattern from '../_lib/tzPattern/index.js'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar patterns = {\n  dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\n  datePattern: /^([0-9W+-]+)(.*)/,\n  plainTime: /:/,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [\n    /^([+-]\\d{2})$/, // 0 additional digits\n    /^([+-]\\d{3})$/, // 1 additional digit\n    /^([+-]\\d{4})$/, // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [\n    /^([+-]\\d{4})/, // 0 additional digits\n    /^([+-]\\d{5})/, // 1 additional digit\n    /^([+-]\\d{6})/, // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // time zone tokens (to identify the presence of a tz)\n  timeZone: tzPattern,\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  if (argument === null) {\n    return new Date(NaN)\n  }\n\n  var options = dirtyOptions || {}\n\n  var additionalDigits =\n    options.additionalDigits == null\n      ? DEFAULT_ADDITIONAL_DIGITS\n      : toInteger(options.additionalDigits)\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2')\n  }\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (\n    typeof argument === 'number' ||\n    Object.prototype.toString.call(argument) === '[object Number]'\n  ) {\n    return new Date(argument)\n  } else if (\n    !(\n      typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]'\n    )\n  ) {\n    return new Date(NaN)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n\n      if (isNaN(time)) {\n        return new Date(NaN)\n      }\n    }\n\n    if (dateStrings.timeZone || options.timeZone) {\n      offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time))\n      if (isNaN(offset)) {\n        return new Date(NaN)\n      }\n    } else {\n      // get offset accurate to hour in time zones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time))\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset))\n    }\n\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(NaN)\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {}\n  var parts = patterns.dateTimePattern.exec(dateString)\n  var timeString\n\n  if (!parts) {\n    parts = patterns.datePattern.exec(dateString)\n    if (parts) {\n      dateStrings.date = parts[1]\n      timeString = parts[2]\n    } else {\n      dateStrings.date = null\n      timeString = dateString\n    }\n  } else {\n    dateStrings.date = parts[1]\n    timeString = parts[3]\n  }\n\n  if (timeString) {\n    var token = patterns.timeZone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timeZone = token[1].trim()\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits]\n  var patternYYYYY = patterns.YYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length),\n    }\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length),\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null,\n  }\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // yyyy-MM-dd or YYYYMMDD\n  token = patterns.MMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime(timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = patterns.HH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n\n    if (!validateTime(hours)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n\n    if (!validateTime(hours, minutes)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoWeekYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\n// Validation functions\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false\n    }\n\n    var isLeapYear = isLeapYearIndex(year)\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false\n    }\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false\n  }\n\n  var isLeapYear = isLeapYearIndex(year)\n  if (isLeapYear && dayOfYear > 366) {\n    return false\n  }\n  if (!isLeapYear && dayOfYear > 365) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false\n  }\n\n  return true\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}