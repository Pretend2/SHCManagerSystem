{"ast":null,"code":"import md5 from 'md5';\nimport { toRefs, onMounted, watch, defineComponent } from 'vue';\nexport default defineComponent({\n  name: 'imageCode',\n  props: {\n    change: {\n      // 刷新验证码使用\n      type: Boolean,\n      default: false\n    },\n    contentWidth: {\n      // 验证码图片宽\n      type: Number,\n      default: 112\n    },\n    contentHeight: {\n      // 验证码图片高\n      type: Number,\n      default: 34\n    }\n  },\n  emits: [\"getCode\"],\n\n  // 返回验证码加密正确值的函数\n  setup(props, context) {\n    // 默认值 \n    const defaultData = {\n      identifyCode: '',\n      // 验证码值，未加密的\n      identifyCodes: '1234567890ABCDEFGHIJKMLNOPQRSTUVWSYZ',\n      // 生成验证码的元素，可以加入字母\n      fontSizeMin: 30,\n      // 图片上验证文字的最小值\n      fontSizeMax: 40,\n      // 图片上验证文字的最小值\n      backgroundColorMin: 180,\n      // 图片背景色值最小\n      backgroundColorMax: 240,\n      // 图片背景色值最大\n      colorMin: 50,\n      // 文字色值最小\n      colorMax: 160,\n      // 文字色值最大\n      lineColorMin: 40,\n      // 干扰线色值最小\n      lineColorMax: 120,\n      // 干扰线色值最大\n      dotColorMin: 0,\n      // 干扰点色值最小\n      dotColorMax: 255,\n      // 干扰点色值最大\n      lineSum: 4,\n      // 干扰线数量\n      dotSum: 10 // 干扰点数量\n\n    }; // 父级传递\n\n    const {\n      contentWidth,\n      contentHeight,\n      change\n    } = toRefs(props); // 生成一个随机数\n\n    const randomNum = (min, max) => {\n      return Math.floor(Math.random() * (max - min) + min);\n    }; // 生成一个随机的颜色\n\n\n    const randomColor = (min, max) => {\n      let r = randomNum(min, max);\n      let g = randomNum(min, max);\n      let b = randomNum(min, max);\n      return 'rgb(' + r + ',' + g + ',' + b + ')';\n    }; // 创建图形\n\n\n    const drawPic = () => {\n      let canvas = document.getElementById('s-canvas');\n      let ctx = canvas.getContext('2d');\n      ctx.textBaseline = 'bottom'; // 绘制背景\n\n      ctx.fillStyle = randomColor(defaultData.backgroundColorMin, defaultData.backgroundColorMax);\n      ctx.fillRect(0, 0, contentWidth.value, contentHeight.value); // 绘制文字\n\n      for (let i = 0; i < defaultData.identifyCode.length; i++) {\n        drawText(ctx, defaultData.identifyCode[i], i);\n      }\n\n      drawLine(ctx);\n      drawDot(ctx);\n    }; // 绘制文字\n\n\n    const drawText = (ctx, txt, i) => {\n      ctx.fillStyle = randomColor(defaultData.colorMin, defaultData.colorMax);\n      ctx.font = randomNum(defaultData.fontSizeMin, defaultData.fontSizeMax) + 'px SimHei';\n      let x = (i + 1) * (contentWidth.value / (defaultData.identifyCode.length + 1));\n      let y = randomNum(defaultData.fontSizeMax, contentHeight.value - 5);\n      var deg = randomNum(-15, 15); // 修改坐标原点和旋转角度\n\n      ctx.translate(x, y);\n      ctx.rotate(deg * Math.PI / 180);\n      ctx.fillText(txt, 0, 0); // 恢复坐标原点和旋转角度\n\n      ctx.rotate(-deg * Math.PI / 180);\n      ctx.translate(0, 0);\n    }; // 绘制干扰线\n\n\n    const drawLine = ctx => {\n      for (let i = 0; i < 4; i++) {\n        ctx.strokeStyle = randomColor(defaultData.lineColorMin, defaultData.lineColorMax);\n        ctx.beginPath();\n        ctx.moveTo(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value));\n        ctx.lineTo(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value));\n        ctx.stroke();\n      }\n    }; // 绘制干扰点\n\n\n    const drawDot = ctx => {\n      for (let i = 0; i < 60; i++) {\n        ctx.fillStyle = randomColor(0, 255);\n        ctx.beginPath();\n        ctx.arc(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value), 1, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    }; // 生成图片\n\n\n    const makeCode = () => {\n      defaultData.identifyCode = \"\";\n\n      for (let i = 0; i < 4; i++) {\n        defaultData.identifyCode += defaultData.identifyCodes[randomNum(0, defaultData.identifyCodes.length)];\n      } // 绘制图片\n\n\n      drawPic(); // 返回加密后的图片验证码值\n\n      context.emit('getCode', md5(defaultData.identifyCode));\n    }; // 初识函数，生成图片 \n\n\n    onMounted(() => {\n      makeCode();\n    }); // 监听change变化，重新生成图片\n\n    watch(change, () => {\n      makeCode();\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["md5","toRefs","onMounted","watch","defineComponent","name","props","change","type","Boolean","default","contentWidth","Number","contentHeight","emits","setup","context","defaultData","identifyCode","identifyCodes","fontSizeMin","fontSizeMax","backgroundColorMin","backgroundColorMax","colorMin","colorMax","lineColorMin","lineColorMax","dotColorMin","dotColorMax","lineSum","dotSum","randomNum","min","max","Math","floor","random","randomColor","r","g","b","drawPic","canvas","document","getElementById","ctx","getContext","textBaseline","fillStyle","fillRect","value","i","length","drawText","drawLine","drawDot","txt","font","x","y","deg","translate","rotate","PI","fillText","strokeStyle","beginPath","moveTo","lineTo","stroke","arc","fill","makeCode","emit"],"sourceRoot":"","sources":["E:\\VCode\\SHC社区管理系统\\shc_community_manager_system\\src\\components\\ImageCode.vue"],"sourcesContent":["<template>\r\n    <div class=\"s-canvas\">\r\n        <canvas id=\"s-canvas\" :width=\"contentWidth\" :height=\"contentHeight\"></canvas>\r\n    </div>\r\n</template>\r\n<script>\r\nimport md5 from 'md5'\r\nimport {\r\n    toRefs,\r\n    onMounted,\r\n    watch,\r\n    defineComponent\r\n} from 'vue'\r\n\r\nexport default defineComponent({\r\n    name: 'imageCode',\r\n    props: {\r\n        change: { // 刷新验证码使用\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        contentWidth: { // 验证码图片宽\r\n            type: Number,\r\n            default: 112\r\n        },\r\n        contentHeight: { // 验证码图片高\r\n            type: Number,\r\n            default: 34\r\n        }\r\n    },\r\n    emits: [\"getCode\"], // 返回验证码加密正确值的函数\r\n    setup(props, context) {\r\n        // 默认值 \r\n        const defaultData = {\r\n            identifyCode: '', // 验证码值，未加密的\r\n            identifyCodes: '1234567890ABCDEFGHIJKMLNOPQRSTUVWSYZ', // 生成验证码的元素，可以加入字母\r\n            fontSizeMin: 30, // 图片上验证文字的最小值\r\n            fontSizeMax: 40, // 图片上验证文字的最小值\r\n            backgroundColorMin: 180, // 图片背景色值最小\r\n            backgroundColorMax: 240, // 图片背景色值最大\r\n            colorMin: 50, // 文字色值最小\r\n            colorMax: 160, // 文字色值最大\r\n            lineColorMin: 40, // 干扰线色值最小\r\n            lineColorMax: 120, // 干扰线色值最大\r\n            dotColorMin: 0, // 干扰点色值最小\r\n            dotColorMax: 255, // 干扰点色值最大\r\n            lineSum: 4, // 干扰线数量\r\n            dotSum: 10, // 干扰点数量\r\n        }\r\n        // 父级传递\r\n        const {\r\n            contentWidth,\r\n            contentHeight,\r\n            change\r\n        } = toRefs(props)\r\n\r\n        // 生成一个随机数\r\n        const randomNum = (min, max) => {\r\n            return Math.floor(Math.random() * (max - min) + min)\r\n        }\r\n\r\n        // 生成一个随机的颜色\r\n        const randomColor = (min, max) => {\r\n            let r = randomNum(min, max)\r\n            let g = randomNum(min, max)\r\n            let b = randomNum(min, max)\r\n            return 'rgb(' + r + ',' + g + ',' + b + ')'\r\n        }\r\n\r\n        // 创建图形\r\n        const drawPic = () => {\r\n            let canvas = document.getElementById('s-canvas')\r\n            let ctx = canvas.getContext('2d')\r\n            ctx.textBaseline = 'bottom'\r\n            // 绘制背景\r\n            ctx.fillStyle = randomColor(defaultData.backgroundColorMin, defaultData.backgroundColorMax)\r\n            ctx.fillRect(0, 0, contentWidth.value, contentHeight.value)\r\n            // 绘制文字\r\n            for (let i = 0; i < defaultData.identifyCode.length; i++) {\r\n                drawText(ctx, defaultData.identifyCode[i], i)\r\n            }\r\n            drawLine(ctx)\r\n            drawDot(ctx)\r\n        }\r\n\r\n        // 绘制文字\r\n        const drawText = (ctx, txt, i) => {\r\n            ctx.fillStyle = randomColor(defaultData.colorMin, defaultData.colorMax)\r\n            ctx.font = randomNum(defaultData.fontSizeMin, defaultData.fontSizeMax) + 'px SimHei'\r\n            let x = (i + 1) * (contentWidth.value / (defaultData.identifyCode.length + 1))\r\n            let y = randomNum(defaultData.fontSizeMax, contentHeight.value - 5)\r\n            var deg = randomNum(-15, 15)\r\n            // 修改坐标原点和旋转角度\r\n            ctx.translate(x, y)\r\n            ctx.rotate(deg * Math.PI / 180)\r\n            ctx.fillText(txt, 0, 0)\r\n            // 恢复坐标原点和旋转角度\r\n            ctx.rotate(-deg * Math.PI / 180)\r\n            ctx.translate(0, 0)\r\n        }\r\n\r\n        // 绘制干扰线\r\n        const drawLine = (ctx) => {\r\n            for (let i = 0; i < 4; i++) {\r\n                ctx.strokeStyle = randomColor(defaultData.lineColorMin, defaultData.lineColorMax)\r\n                ctx.beginPath()\r\n                ctx.moveTo(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value))\r\n                ctx.lineTo(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value))\r\n                ctx.stroke()\r\n            }\r\n        }\r\n        // 绘制干扰点\r\n        const drawDot = (ctx) => {\r\n            for (let i = 0; i < 60; i++) {\r\n                ctx.fillStyle = randomColor(0, 255)\r\n                ctx.beginPath()\r\n                ctx.arc(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value), 1, 0, 2 * Math\r\n                    .PI)\r\n                ctx.fill()\r\n            }\r\n        }\r\n\r\n        // 生成图片\r\n        const makeCode = () => {\r\n            defaultData.identifyCode = \"\";\r\n            for (let i = 0; i < 4; i++) {\r\n                defaultData.identifyCode += defaultData.identifyCodes[randomNum(0, defaultData.identifyCodes.length)];\r\n            }\r\n\r\n            // 绘制图片\r\n            drawPic()\r\n            // 返回加密后的图片验证码值\r\n            context.emit('getCode', md5(defaultData.identifyCode))\r\n        }\r\n\r\n        // 初识函数，生成图片 \r\n        onMounted(() => {\r\n            makeCode()\r\n        })\r\n\r\n        // 监听change变化，重新生成图片\r\n        watch(change, () => {\r\n            makeCode()\r\n        })\r\n\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.s-canvas {\r\n    height: 34px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}