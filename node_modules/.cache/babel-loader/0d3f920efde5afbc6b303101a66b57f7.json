{"ast":null,"code":"import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { NCheckbox, NCheckboxGroup } from '../../../checkbox';\nimport { NRadio, NRadioGroup } from '../../../radio';\nimport { NButton } from '../../../button';\nimport { NScrollbar } from '../../../_internal';\nimport { shouldUseArrayInSingleMode } from '../utils';\nimport { dataTableInjectionKey } from '../interface';\nexport default defineComponent({\n  name: 'DataTableFilterMenu',\n  props: {\n    column: {\n      type: Object,\n      required: true\n    },\n    radioGroupName: {\n      type: String,\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      type: [Array, String, Number],\n      default: null\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    onConfirm: {\n      type: Function,\n      required: true\n    },\n    onClear: {\n      type: Function,\n      required: true\n    },\n    onChange: {\n      type: Function,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const {\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      localeRef // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(dataTableInjectionKey); // to be compared with changed value\n    // const initialValueRef = ref(props.value)\n\n    const temporalValueRef = ref(props.value);\n    const checkboxGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n      if (!Array.isArray(temporalValue)) return null;\n      return temporalValue;\n    });\n    const radioGroupValueRef = computed(() => {\n      const {\n        value: temporalValue\n      } = temporalValueRef;\n\n      if (shouldUseArrayInSingleMode(props.column)) {\n        return Array.isArray(temporalValue) && temporalValue.length && temporalValue[0] || null;\n      }\n\n      if (!Array.isArray(temporalValue)) return temporalValue;\n      return null;\n    });\n\n    function doChange(value) {\n      // May need to check if equal\n      ;\n      props.onChange(value);\n    }\n\n    function handleChange(value) {\n      if (props.multiple && Array.isArray(value)) {\n        temporalValueRef.value = value;\n      } else if (shouldUseArrayInSingleMode(props.column) && !Array.isArray(value)) {\n        /** this branch is for compatibility */\n        temporalValueRef.value = [value];\n      } else {\n        temporalValueRef.value = value;\n      }\n    }\n\n    function handleConfirmClick() {\n      doChange(temporalValueRef.value);\n      props.onConfirm();\n    }\n\n    function handleClearClick() {\n      if (props.multiple || shouldUseArrayInSingleMode(props.column)) {\n        doChange([]);\n      } else {\n        doChange(null);\n      }\n\n      props.onClear();\n    }\n\n    return {\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      locale: localeRef,\n      checkboxGroupValue: checkboxGroupValueRef,\n      radioGroupValue: radioGroupValueRef,\n      handleChange,\n      handleConfirmClick,\n      handleClearClick\n    };\n  },\n\n  render() {\n    const {\n      mergedTheme,\n      locale,\n      mergedClsPrefix\n    } = this;\n    return h(\"div\", {\n      class: `${mergedClsPrefix}-data-table-filter-menu`\n    }, h(NScrollbar, null, {\n      default: () => {\n        const {\n          checkboxGroupValue,\n          handleChange\n        } = this;\n        return this.multiple ? h(NCheckboxGroup, {\n          value: checkboxGroupValue,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          onUpdateValue: handleChange\n        }, {\n          default: () => this.options.map(option => {\n            return h(NCheckbox, {\n              key: option.value,\n              theme: mergedTheme.peers.Checkbox,\n              themeOverrides: mergedTheme.peerOverrides.Checkbox,\n              value: option.value\n            }, {\n              default: () => option.label\n            });\n          })\n        }) : h(NRadioGroup, {\n          name: this.radioGroupName,\n          class: `${mergedClsPrefix}-data-table-filter-menu__group`,\n          value: this.radioGroupValue,\n          onUpdateValue: this.handleChange\n        }, {\n          default: () => this.options.map(option => h(NRadio, {\n            key: option.value,\n            value: option.value,\n            theme: mergedTheme.peers.Radio,\n            themeOverrides: mergedTheme.peerOverrides.Radio\n          }, {\n            default: () => option.label\n          }))\n        });\n      }\n    }), h(\"div\", {\n      class: `${mergedClsPrefix}-data-table-filter-menu__action`\n    }, h(NButton, {\n      size: \"tiny\",\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      onClick: this.handleClearClick\n    }, {\n      default: () => locale.clear\n    }), h(NButton, {\n      theme: mergedTheme.peers.Button,\n      themeOverrides: mergedTheme.peerOverrides.Button,\n      type: \"primary\",\n      size: \"tiny\",\n      onClick: this.handleConfirmClick\n    }, {\n      default: () => locale.confirm\n    })));\n  }\n\n});","map":{"version":3,"names":["h","defineComponent","ref","computed","inject","NCheckbox","NCheckboxGroup","NRadio","NRadioGroup","NButton","NScrollbar","shouldUseArrayInSingleMode","dataTableInjectionKey","name","props","column","type","Object","required","radioGroupName","String","multiple","Boolean","value","Array","Number","default","options","onConfirm","Function","onClear","onChange","setup","mergedClsPrefixRef","mergedThemeRef","localeRef","temporalValueRef","checkboxGroupValueRef","temporalValue","isArray","radioGroupValueRef","length","doChange","handleChange","handleConfirmClick","handleClearClick","mergedClsPrefix","mergedTheme","locale","checkboxGroupValue","radioGroupValue","render","class","onUpdateValue","map","option","key","theme","peers","Checkbox","themeOverrides","peerOverrides","label","Radio","size","Button","onClick","clear","confirm"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/data-table/src/HeaderButton/FilterMenu.js"],"sourcesContent":["import { h, defineComponent, ref, computed, inject } from 'vue';\nimport { NCheckbox, NCheckboxGroup } from '../../../checkbox';\nimport { NRadio, NRadioGroup } from '../../../radio';\nimport { NButton } from '../../../button';\nimport { NScrollbar } from '../../../_internal';\nimport { shouldUseArrayInSingleMode } from '../utils';\nimport { dataTableInjectionKey } from '../interface';\nexport default defineComponent({\n    name: 'DataTableFilterMenu',\n    props: {\n        column: {\n            type: Object,\n            required: true\n        },\n        radioGroupName: {\n            type: String,\n            required: true\n        },\n        multiple: {\n            type: Boolean,\n            required: true\n        },\n        value: {\n            type: [Array, String, Number],\n            default: null\n        },\n        options: {\n            type: Array,\n            required: true\n        },\n        onConfirm: {\n            type: Function,\n            required: true\n        },\n        onClear: {\n            type: Function,\n            required: true\n        },\n        onChange: {\n            type: Function,\n            required: true\n        }\n    },\n    setup(props) {\n        const { mergedClsPrefixRef, mergedThemeRef, localeRef\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dataTableInjectionKey);\n        // to be compared with changed value\n        // const initialValueRef = ref(props.value)\n        const temporalValueRef = ref(props.value);\n        const checkboxGroupValueRef = computed(() => {\n            const { value: temporalValue } = temporalValueRef;\n            if (!Array.isArray(temporalValue))\n                return null;\n            return temporalValue;\n        });\n        const radioGroupValueRef = computed(() => {\n            const { value: temporalValue } = temporalValueRef;\n            if (shouldUseArrayInSingleMode(props.column)) {\n                return ((Array.isArray(temporalValue) &&\n                    temporalValue.length &&\n                    temporalValue[0]) ||\n                    null);\n            }\n            if (!Array.isArray(temporalValue))\n                return temporalValue;\n            return null;\n        });\n        function doChange(value) {\n            // May need to check if equal\n            ;\n            props.onChange(value);\n        }\n        function handleChange(value) {\n            if (props.multiple && Array.isArray(value)) {\n                temporalValueRef.value = value;\n            }\n            else if (shouldUseArrayInSingleMode(props.column) &&\n                !Array.isArray(value)) {\n                /** this branch is for compatibility */\n                temporalValueRef.value = [value];\n            }\n            else {\n                temporalValueRef.value = value;\n            }\n        }\n        function handleConfirmClick() {\n            doChange(temporalValueRef.value);\n            props.onConfirm();\n        }\n        function handleClearClick() {\n            if (props.multiple || shouldUseArrayInSingleMode(props.column)) {\n                doChange([]);\n            }\n            else {\n                doChange(null);\n            }\n            props.onClear();\n        }\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedTheme: mergedThemeRef,\n            locale: localeRef,\n            checkboxGroupValue: checkboxGroupValueRef,\n            radioGroupValue: radioGroupValueRef,\n            handleChange,\n            handleConfirmClick,\n            handleClearClick\n        };\n    },\n    render() {\n        const { mergedTheme, locale, mergedClsPrefix } = this;\n        return (h(\"div\", { class: `${mergedClsPrefix}-data-table-filter-menu` },\n            h(NScrollbar, null, {\n                default: () => {\n                    const { checkboxGroupValue, handleChange } = this;\n                    return this.multiple ? (h(NCheckboxGroup, { value: checkboxGroupValue, class: `${mergedClsPrefix}-data-table-filter-menu__group`, onUpdateValue: handleChange }, {\n                        default: () => this.options.map((option) => {\n                            return (h(NCheckbox, { key: option.value, theme: mergedTheme.peers.Checkbox, themeOverrides: mergedTheme.peerOverrides.Checkbox, value: option.value }, { default: () => option.label }));\n                        })\n                    })) : (h(NRadioGroup, { name: this.radioGroupName, class: `${mergedClsPrefix}-data-table-filter-menu__group`, value: this.radioGroupValue, onUpdateValue: this.handleChange }, {\n                        default: () => this.options.map((option) => (h(NRadio, { key: option.value, value: option.value, theme: mergedTheme.peers.Radio, themeOverrides: mergedTheme.peerOverrides.Radio }, { default: () => option.label })))\n                    }));\n                }\n            }),\n            h(\"div\", { class: `${mergedClsPrefix}-data-table-filter-menu__action` },\n                h(NButton, { size: \"tiny\", theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, onClick: this.handleClearClick }, { default: () => locale.clear }),\n                h(NButton, { theme: mergedTheme.peers.Button, themeOverrides: mergedTheme.peerOverrides.Button, type: \"primary\", size: \"tiny\", onClick: this.handleConfirmClick }, { default: () => locale.confirm }))));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}