{"ast":null,"code":"import { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nimport { isNodeDisabled } from './utils';\nconst TreeNode = defineComponent({\n  name: 'TreeNode',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNode: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NTree = inject(treeInjectionKey);\n    const {\n      droppingNodeParentRef,\n      droppingMouseNodeRef,\n      draggingNodeRef,\n      droppingPositionRef,\n      droppingOffsetLevelRef,\n      nodePropsRef,\n      indentRef,\n      blockLineRef,\n      checkboxPlacementRef,\n      checkOnClickRef,\n      disabledFieldRef\n    } = NTree;\n    const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n    const nodeIsDisabledRef = useMemo(() => {\n      return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n    });\n    const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n    const resolvedNodePropsRef = computed(() => {\n      const {\n        value: nodeProps\n      } = nodePropsRef;\n      if (!nodeProps) return undefined;\n      return nodeProps({\n        option: props.tmNode.rawNode\n      });\n    }); // used for drag and drop\n\n    const contentInstRef = ref(null); // must be non-reactive\n\n    const contentElRef = {\n      value: null\n    };\n    onMounted(() => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      contentElRef.value = contentInstRef.value.$el;\n    });\n\n    function handleSwitcherClick() {\n      const {\n        tmNode\n      } = props;\n\n      if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n        if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n          NTree.loadingKeysRef.value.add(tmNode.key);\n        } else {\n          return;\n        }\n\n        const {\n          onLoadRef: {\n            value: onLoad\n          }\n        } = NTree;\n\n        if (onLoad) {\n          void onLoad(tmNode.rawNode).then(() => {\n            NTree.handleSwitcherClick(tmNode);\n          }).finally(() => {\n            NTree.loadingKeysRef.value.delete(tmNode.key);\n          });\n        }\n      } else {\n        NTree.handleSwitcherClick(tmNode);\n      }\n    }\n\n    const selectableRef = useMemo(() => !nodeIsDisabledRef.value && NTree.selectableRef.value && (NTree.internalTreeSelect ? NTree.mergedCheckStrategyRef.value !== 'child' || NTree.multipleRef.value && NTree.cascadeRef.value || props.tmNode.isLeaf : true));\n    const checkableRef = useMemo(() => NTree.checkableRef.value && (NTree.cascadeRef.value || NTree.mergedCheckStrategyRef.value !== 'child' || props.tmNode.isLeaf));\n    const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n    const mergedCheckOnClickRef = useMemo(() => {\n      const {\n        value: checkable\n      } = checkableRef;\n      if (!checkable) return false;\n      const {\n        value: checkOnClick\n      } = checkOnClickRef;\n\n      if (typeof checkOnClick === 'boolean') {\n        return checkOnClick;\n      }\n\n      return checkOnClick(props.tmNode.rawNode);\n    });\n\n    function _handleClick(e) {\n      const {\n        value: expandOnClick\n      } = NTree.expandOnClickRef;\n      const {\n        value: selectable\n      } = selectableRef;\n      const {\n        value: mergedCheckOnClick\n      } = mergedCheckOnClickRef;\n      if (!selectable && !expandOnClick && !mergedCheckOnClick) return;\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      const {\n        tmNode\n      } = props;\n\n      if (selectable) {\n        NTree.handleSelect(tmNode);\n      }\n\n      if (expandOnClick && !tmNode.isLeaf) {\n        handleSwitcherClick();\n      }\n\n      if (mergedCheckOnClick) {\n        handleCheck(!checkedRef.value);\n      }\n    }\n\n    function handleContentClick(e) {\n      var _a, _b;\n\n      if (blockLineRef.value) return;\n      if (!disabledRef.value) _handleClick(e);\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n\n    function handleLineClick(e) {\n      var _a, _b;\n\n      if (!blockLineRef.value) return;\n\n      if (!disabledRef.value) {\n        _handleClick(e);\n      }\n\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n\n    function handleCheck(checked) {\n      NTree.handleCheck(props.tmNode, checked);\n    } // Dnd\n\n\n    function handleDragStart(e) {\n      NTree.handleDragStart({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragEnter(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n\n      NTree.handleDragEnter({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragOver(e) {\n      e.preventDefault(); // if not prevent, drop event won't be fired...\n\n      NTree.handleDragOver({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragEnd(e) {\n      NTree.handleDragEnd({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDragLeave(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n\n      NTree.handleDragLeave({\n        event: e,\n        node: props.tmNode\n      });\n    }\n\n    function handleDrop(e) {\n      e.preventDefault();\n\n      if (droppingPositionRef.value !== null) {\n        NTree.handleDrop({\n          event: e,\n          node: props.tmNode,\n          dropPosition: droppingPositionRef.value\n        });\n      }\n    }\n\n    return {\n      showDropMark: useMemo(() => {\n        const {\n          value: draggingNode\n        } = draggingNodeRef;\n        if (!draggingNode) return;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (!droppingPosition) return;\n        const {\n          value: droppingMouseNode\n        } = droppingMouseNodeRef;\n\n        if (!droppingMouseNode) {\n          return;\n        }\n\n        const {\n          tmNode\n        } = props;\n        if (tmNode.key === droppingMouseNode.key) return true;\n        return false;\n      }),\n      showDropMarkAsParent: useMemo(() => {\n        const {\n          value: droppingNodeParent\n        } = droppingNodeParentRef;\n        if (!droppingNodeParent) return false;\n        const {\n          tmNode\n        } = props;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n\n        if (droppingPosition === 'before' || droppingPosition === 'after') {\n          return droppingNodeParent.key === tmNode.key;\n        }\n\n        return false;\n      }),\n      pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n      loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n      highlight: useMemo(() => {\n        var _a;\n\n        return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n      }),\n      checked: checkedRef,\n      indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n      selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n      expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n      disabled: disabledRef,\n      checkable: checkableRef,\n      mergedCheckOnClick: mergedCheckOnClickRef,\n      checkboxDisabled: checkboxDisabledRef,\n      selectable: selectableRef,\n      expandOnClick: NTree.expandOnClickRef,\n      internalScrollable: NTree.internalScrollableRef,\n      draggable: NTree.draggableRef,\n      blockLine: blockLineRef,\n      nodeProps: resolvedNodePropsRef,\n      checkboxFocusable: NTree.internalCheckboxFocusableRef,\n      droppingPosition: droppingPositionRef,\n      droppingOffsetLevel: droppingOffsetLevelRef,\n      indent: indentRef,\n      checkboxPlacement: checkboxPlacementRef,\n      contentInstRef,\n      contentElRef,\n      handleCheck,\n      handleDrop,\n      handleDragStart,\n      handleDragEnter,\n      handleDragOver,\n      handleDragEnd,\n      handleDragLeave,\n      handleLineClick,\n      handleContentClick,\n      handleSwitcherClick\n    };\n  },\n\n  render() {\n    const {\n      tmNode,\n      clsPrefix,\n      checkable,\n      expandOnClick,\n      selectable,\n      selected,\n      checked,\n      highlight,\n      draggable,\n      blockLine,\n      indent,\n      disabled,\n      pending,\n      internalScrollable,\n      nodeProps,\n      checkboxPlacement\n    } = this; // drag start not inside\n    // it need to be append to node itself, not wrapper\n\n    const dragEventHandlers = draggable && !disabled ? {\n      onDragenter: this.handleDragEnter,\n      onDragleave: this.handleDragLeave,\n      onDragend: this.handleDragEnd,\n      onDrop: this.handleDrop,\n      onDragover: this.handleDragOver\n    } : undefined; // In non virtual mode, there's no evidence that which element should be\n    // scrolled to, so we need data-key to query the target element.\n\n    const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n    const checkboxOnRight = checkboxPlacement === 'right';\n    const checkboxNode = checkable ? h(NTreeNodeCheckbox, {\n      right: checkboxOnRight,\n      focusable: this.checkboxFocusable,\n      disabled: disabled || this.checkboxDisabled,\n      clsPrefix: clsPrefix,\n      checked: this.checked,\n      indeterminate: this.indeterminate,\n      onCheck: this.handleCheck\n    }) : null;\n    return h(\"div\", Object.assign({\n      class: `${clsPrefix}-tree-node-wrapper`\n    }, dragEventHandlers), h(\"div\", Object.assign({}, blockLine ? nodeProps : undefined, {\n      class: [`${clsPrefix}-tree-node`, {\n        [`${clsPrefix}-tree-node--selected`]: selected,\n        [`${clsPrefix}-tree-node--checkable`]: checkable,\n        [`${clsPrefix}-tree-node--highlight`]: highlight,\n        [`${clsPrefix}-tree-node--pending`]: pending,\n        [`${clsPrefix}-tree-node--disabled`]: disabled,\n        [`${clsPrefix}-tree-node--selectable`]: selectable,\n        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n      }, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      \"data-key\": dataKey,\n      draggable: draggable && blockLine,\n      onClick: this.handleLineClick,\n      onDragstart: draggable && blockLine && !disabled ? this.handleDragStart : undefined\n    }), repeat(tmNode.level, h(\"div\", {\n      class: `${clsPrefix}-tree-node-indent`\n    }, h(\"div\", {\n      style: {\n        width: `${indent}px`\n      }\n    }))), h(NTreeNodeSwitcher, {\n      clsPrefix: clsPrefix,\n      expanded: this.expanded,\n      loading: this.loading,\n      hide: tmNode.isLeaf,\n      onClick: this.handleSwitcherClick\n    }), !checkboxOnRight ? checkboxNode : null, h(NTreeNodeContent, {\n      ref: \"contentInstRef\",\n      clsPrefix: clsPrefix,\n      checked: checked,\n      selected: selected,\n      onClick: this.handleContentClick,\n      nodeProps: blockLine ? undefined : nodeProps,\n      onDragstart: draggable && !blockLine && !disabled ? this.handleDragStart : undefined,\n      tmNode: tmNode\n    }), draggable ? this.showDropMark ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      position: this.droppingPosition,\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : this.showDropMarkAsParent ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      position: 'inside',\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : null : null, checkboxOnRight ? checkboxNode : null));\n  }\n\n});\nexport default TreeNode;","map":{"version":3,"names":["h","inject","computed","defineComponent","ref","onMounted","useMemo","happensIn","repeat","createDataKey","NTreeNodeSwitcher","NTreeNodeCheckbox","NTreeNodeContent","treeInjectionKey","renderDropMark","isNodeDisabled","TreeNode","name","props","clsPrefix","type","String","required","tmNode","Object","setup","NTree","droppingNodeParentRef","droppingMouseNodeRef","draggingNodeRef","droppingPositionRef","droppingOffsetLevelRef","nodePropsRef","indentRef","blockLineRef","checkboxPlacementRef","checkOnClickRef","disabledFieldRef","checkboxDisabledRef","rawNode","checkboxDisabled","nodeIsDisabledRef","value","disabledRef","resolvedNodePropsRef","nodeProps","undefined","option","contentInstRef","contentElRef","$el","handleSwitcherClick","isLeaf","shallowLoaded","loadingKeysRef","has","key","add","onLoadRef","onLoad","then","finally","delete","selectableRef","internalTreeSelect","mergedCheckStrategyRef","multipleRef","cascadeRef","checkableRef","checkedRef","displayedCheckedKeysRef","includes","mergedCheckOnClickRef","checkable","checkOnClick","_handleClick","e","expandOnClick","expandOnClickRef","selectable","mergedCheckOnClick","handleSelect","handleCheck","handleContentClick","_a","_b","onClick","call","handleLineClick","checked","handleDragStart","event","node","handleDragEnter","currentTarget","target","handleDragOver","preventDefault","handleDragEnd","handleDragLeave","handleDrop","dropPosition","showDropMark","draggingNode","droppingPosition","droppingMouseNode","showDropMarkAsParent","droppingNodeParent","pending","pendingNodeKeyRef","loading","highlight","highlightKeySetRef","indeterminate","displayedIndeterminateKeysRef","selected","mergedSelectedKeysRef","expanded","mergedExpandedKeysRef","disabled","internalScrollable","internalScrollableRef","draggable","draggableRef","blockLine","checkboxFocusable","internalCheckboxFocusableRef","droppingOffsetLevel","indent","checkboxPlacement","render","dragEventHandlers","onDragenter","onDragleave","onDragend","onDrop","onDragover","dataKey","checkboxOnRight","checkboxNode","right","focusable","onCheck","assign","class","onDragstart","level","style","width","hide","el","position","offsetLevel"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/tree/src/TreeNode.js"],"sourcesContent":["import { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nimport { isNodeDisabled } from './utils';\nconst TreeNode = defineComponent({\n    name: 'TreeNode',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NTree = inject(treeInjectionKey);\n        const { droppingNodeParentRef, droppingMouseNodeRef, draggingNodeRef, droppingPositionRef, droppingOffsetLevelRef, nodePropsRef, indentRef, blockLineRef, checkboxPlacementRef, checkOnClickRef, disabledFieldRef } = NTree;\n        const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n        const nodeIsDisabledRef = useMemo(() => {\n            return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n        });\n        const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n        const resolvedNodePropsRef = computed(() => {\n            const { value: nodeProps } = nodePropsRef;\n            if (!nodeProps)\n                return undefined;\n            return nodeProps({ option: props.tmNode.rawNode });\n        });\n        // used for drag and drop\n        const contentInstRef = ref(null);\n        // must be non-reactive\n        const contentElRef = { value: null };\n        onMounted(() => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            contentElRef.value = contentInstRef.value.$el;\n        });\n        function handleSwitcherClick() {\n            const { tmNode } = props;\n            if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n                if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n                    NTree.loadingKeysRef.value.add(tmNode.key);\n                }\n                else {\n                    return;\n                }\n                const { onLoadRef: { value: onLoad } } = NTree;\n                if (onLoad) {\n                    void onLoad(tmNode.rawNode)\n                        .then(() => {\n                        NTree.handleSwitcherClick(tmNode);\n                    })\n                        .finally(() => {\n                        NTree.loadingKeysRef.value.delete(tmNode.key);\n                    });\n                }\n            }\n            else {\n                NTree.handleSwitcherClick(tmNode);\n            }\n        }\n        const selectableRef = useMemo(() => !nodeIsDisabledRef.value &&\n            NTree.selectableRef.value &&\n            (NTree.internalTreeSelect\n                ? NTree.mergedCheckStrategyRef.value !== 'child' ||\n                    (NTree.multipleRef.value && NTree.cascadeRef.value) ||\n                    props.tmNode.isLeaf\n                : true));\n        const checkableRef = useMemo(() => NTree.checkableRef.value &&\n            (NTree.cascadeRef.value ||\n                NTree.mergedCheckStrategyRef.value !== 'child' ||\n                props.tmNode.isLeaf));\n        const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n        const mergedCheckOnClickRef = useMemo(() => {\n            const { value: checkable } = checkableRef;\n            if (!checkable)\n                return false;\n            const { value: checkOnClick } = checkOnClickRef;\n            if (typeof checkOnClick === 'boolean') {\n                return checkOnClick;\n            }\n            return checkOnClick(props.tmNode.rawNode);\n        });\n        function _handleClick(e) {\n            const { value: expandOnClick } = NTree.expandOnClickRef;\n            const { value: selectable } = selectableRef;\n            const { value: mergedCheckOnClick } = mergedCheckOnClickRef;\n            if (!selectable && !expandOnClick && !mergedCheckOnClick)\n                return;\n            if (happensIn(e, 'checkbox') || happensIn(e, 'switcher'))\n                return;\n            const { tmNode } = props;\n            if (selectable) {\n                NTree.handleSelect(tmNode);\n            }\n            if (expandOnClick && !tmNode.isLeaf) {\n                handleSwitcherClick();\n            }\n            if (mergedCheckOnClick) {\n                handleCheck(!checkedRef.value);\n            }\n        }\n        function handleContentClick(e) {\n            var _a, _b;\n            if (blockLineRef.value)\n                return;\n            if (!disabledRef.value)\n                _handleClick(e);\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleLineClick(e) {\n            var _a, _b;\n            if (!blockLineRef.value)\n                return;\n            if (!disabledRef.value) {\n                _handleClick(e);\n            }\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleCheck(checked) {\n            NTree.handleCheck(props.tmNode, checked);\n        }\n        // Dnd\n        function handleDragStart(e) {\n            NTree.handleDragStart({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnter(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragEnter({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragOver(e) {\n            e.preventDefault(); // if not prevent, drop event won't be fired...\n            NTree.handleDragOver({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnd(e) {\n            NTree.handleDragEnd({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragLeave(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragLeave({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDrop(e) {\n            e.preventDefault();\n            if (droppingPositionRef.value !== null) {\n                NTree.handleDrop({\n                    event: e,\n                    node: props.tmNode,\n                    dropPosition: droppingPositionRef.value\n                });\n            }\n        }\n        return {\n            showDropMark: useMemo(() => {\n                const { value: draggingNode } = draggingNodeRef;\n                if (!draggingNode)\n                    return;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (!droppingPosition)\n                    return;\n                const { value: droppingMouseNode } = droppingMouseNodeRef;\n                if (!droppingMouseNode) {\n                    return;\n                }\n                const { tmNode } = props;\n                if (tmNode.key === droppingMouseNode.key)\n                    return true;\n                return false;\n            }),\n            showDropMarkAsParent: useMemo(() => {\n                const { value: droppingNodeParent } = droppingNodeParentRef;\n                if (!droppingNodeParent)\n                    return false;\n                const { tmNode } = props;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (droppingPosition === 'before' || droppingPosition === 'after') {\n                    return droppingNodeParent.key === tmNode.key;\n                }\n                return false;\n            }),\n            pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n            loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n            highlight: useMemo(() => {\n                var _a;\n                return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n            }),\n            checked: checkedRef,\n            indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n            selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n            expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n            disabled: disabledRef,\n            checkable: checkableRef,\n            mergedCheckOnClick: mergedCheckOnClickRef,\n            checkboxDisabled: checkboxDisabledRef,\n            selectable: selectableRef,\n            expandOnClick: NTree.expandOnClickRef,\n            internalScrollable: NTree.internalScrollableRef,\n            draggable: NTree.draggableRef,\n            blockLine: blockLineRef,\n            nodeProps: resolvedNodePropsRef,\n            checkboxFocusable: NTree.internalCheckboxFocusableRef,\n            droppingPosition: droppingPositionRef,\n            droppingOffsetLevel: droppingOffsetLevelRef,\n            indent: indentRef,\n            checkboxPlacement: checkboxPlacementRef,\n            contentInstRef,\n            contentElRef,\n            handleCheck,\n            handleDrop,\n            handleDragStart,\n            handleDragEnter,\n            handleDragOver,\n            handleDragEnd,\n            handleDragLeave,\n            handleLineClick,\n            handleContentClick,\n            handleSwitcherClick\n        };\n    },\n    render() {\n        const { tmNode, clsPrefix, checkable, expandOnClick, selectable, selected, checked, highlight, draggable, blockLine, indent, disabled, pending, internalScrollable, nodeProps, checkboxPlacement } = this;\n        // drag start not inside\n        // it need to be append to node itself, not wrapper\n        const dragEventHandlers = draggable && !disabled\n            ? {\n                onDragenter: this.handleDragEnter,\n                onDragleave: this.handleDragLeave,\n                onDragend: this.handleDragEnd,\n                onDrop: this.handleDrop,\n                onDragover: this.handleDragOver\n            }\n            : undefined;\n        // In non virtual mode, there's no evidence that which element should be\n        // scrolled to, so we need data-key to query the target element.\n        const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n        const checkboxOnRight = checkboxPlacement === 'right';\n        const checkboxNode = checkable ? (h(NTreeNodeCheckbox, { right: checkboxOnRight, focusable: this.checkboxFocusable, disabled: disabled || this.checkboxDisabled, clsPrefix: clsPrefix, checked: this.checked, indeterminate: this.indeterminate, onCheck: this.handleCheck })) : null;\n        return (h(\"div\", Object.assign({ class: `${clsPrefix}-tree-node-wrapper` }, dragEventHandlers),\n            h(\"div\", Object.assign({}, (blockLine ? nodeProps : undefined), { class: [\n                    `${clsPrefix}-tree-node`,\n                    {\n                        [`${clsPrefix}-tree-node--selected`]: selected,\n                        [`${clsPrefix}-tree-node--checkable`]: checkable,\n                        [`${clsPrefix}-tree-node--highlight`]: highlight,\n                        [`${clsPrefix}-tree-node--pending`]: pending,\n                        [`${clsPrefix}-tree-node--disabled`]: disabled,\n                        [`${clsPrefix}-tree-node--selectable`]: selectable,\n                        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n                    },\n                    nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class\n                ], \"data-key\": dataKey, draggable: draggable && blockLine, onClick: this.handleLineClick, onDragstart: draggable && blockLine && !disabled\n                    ? this.handleDragStart\n                    : undefined }),\n                repeat(tmNode.level, h(\"div\", { class: `${clsPrefix}-tree-node-indent` },\n                    h(\"div\", { style: { width: `${indent}px` } }))),\n                h(NTreeNodeSwitcher, { clsPrefix: clsPrefix, expanded: this.expanded, loading: this.loading, hide: tmNode.isLeaf, onClick: this.handleSwitcherClick }),\n                !checkboxOnRight ? checkboxNode : null,\n                h(NTreeNodeContent, { ref: \"contentInstRef\", clsPrefix: clsPrefix, checked: checked, selected: selected, onClick: this.handleContentClick, nodeProps: blockLine ? undefined : nodeProps, onDragstart: draggable && !blockLine && !disabled\n                        ? this.handleDragStart\n                        : undefined, tmNode: tmNode }),\n                draggable\n                    ? this.showDropMark\n                        ? renderDropMark({\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            el: this.contentElRef.value,\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            position: this.droppingPosition,\n                            offsetLevel: this.droppingOffsetLevel,\n                            indent\n                        })\n                        : this.showDropMarkAsParent\n                            ? renderDropMark({\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                el: this.contentElRef.value,\n                                position: 'inside',\n                                offsetLevel: this.droppingOffsetLevel,\n                                indent\n                            })\n                            : null\n                    : null,\n                checkboxOnRight ? checkboxNode : null)));\n    }\n});\nexport default TreeNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}