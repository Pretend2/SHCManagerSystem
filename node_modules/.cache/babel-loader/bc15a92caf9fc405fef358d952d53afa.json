{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, defineComponent, ref, toRef, Transition, withDirectives, computed, provide, watchEffect } from 'vue';\nimport { VBinder, VFollower, VTarget } from 'vueuc';\nimport { useIsMounted, useMergedState } from 'vooks';\nimport { clickoutside } from 'vdirs';\nimport { createTreeMate } from 'treemate';\nimport { getPreciseEventTarget, happensIn } from 'seemly';\nimport { createTreeMateOptions, treeSharedProps } from '../../tree/src/Tree';\nimport { NInternalSelection, NBaseFocusDetector } from '../../_internal';\nimport { NTree } from '../../tree';\nimport { NEmpty } from '../../empty';\nimport { useConfig, useFormItem, useLocale, useTheme, useThemeClass } from '../../_mixins';\nimport { call, markEventEffectPerformed, resolveSlot, resolveWrappedSlot, useAdjustedTo, useOnResize, warnOnce } from '../../_utils';\nimport { treeSelectLight } from '../styles';\nimport { treeSelectInjectionKey } from './interface';\nimport { treeOption2SelectOption, treeOption2SelectOptionWithPath } from './utils';\nimport style from './styles/index.cssr';\nexport const treeSelectProps = Object.assign(Object.assign(Object.assign(Object.assign({}, useTheme.props), {\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  cascade: Boolean,\n  checkable: Boolean,\n  clearable: Boolean,\n  clearFilterAfterSelect: {\n    type: Boolean,\n    default: true\n  },\n  consistentMenuWidth: {\n    type: Boolean,\n    default: true\n  },\n  defaultShow: Boolean,\n  defaultValue: {\n    type: [String, Number, Array],\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  filterable: Boolean,\n  checkStrategy: {\n    type: String,\n    default: 'all'\n  },\n  loading: Boolean,\n  maxTagCount: [String, Number],\n  multiple: Boolean,\n  showPath: Boolean,\n  separator: {\n    type: String,\n    default: ' / '\n  },\n  options: {\n    type: Array,\n    default: () => []\n  },\n  placeholder: String,\n  placement: {\n    type: String,\n    default: 'bottom-start'\n  },\n  show: {\n    type: Boolean,\n    default: undefined\n  },\n  size: String,\n  value: [String, Number, Array],\n  to: useAdjustedTo.propTo,\n  menuProps: Object,\n  virtualScroll: {\n    type: Boolean,\n    default: true\n  },\n  status: String,\n  renderTag: Function\n}), treeSharedProps), {\n  renderLabel: Function,\n  renderPrefix: Function,\n  renderSuffix: Function,\n  nodeProps: Function,\n  onBlur: Function,\n  onFocus: Function,\n  onLoad: Function,\n  onUpdateShow: [Function, Array],\n  onUpdateValue: [Function, Array],\n  'onUpdate:value': [Function, Array],\n  'onUpdate:show': [Function, Array],\n\n  /**\n   * @deprecated\n   */\n  leafOnly: Boolean\n});\nexport default defineComponent({\n  name: 'TreeSelect',\n  props: treeSelectProps,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.leafOnly) {\n          warnOnce('tree-select', '`leaf-only` is deprecated, please use `check-strategy=\"child\"` instead.');\n        }\n      });\n    }\n\n    const followerInstRef = ref(null);\n    const triggerInstRef = ref(null);\n    const treeInstRef = ref(null);\n    const menuElRef = ref(null);\n    const {\n      mergedClsPrefixRef,\n      namespaceRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const {\n      localeRef\n    } = useLocale('Select');\n    const {\n      mergedSizeRef,\n      mergedDisabledRef,\n      mergedStatusRef,\n      nTriggerFormBlur,\n      nTriggerFormChange,\n      nTriggerFormFocus,\n      nTriggerFormInput\n    } = useFormItem(props);\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = toRef(props, 'value');\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const uncontrolledShowRef = ref(props.defaultShow);\n    const controlledShowRef = toRef(props, 'show');\n    const mergedShowRef = useMergedState(controlledShowRef, uncontrolledShowRef);\n    const patternRef = ref('');\n    const mergedFilterRef = computed(() => {\n      const {\n        filter\n      } = props;\n      if (filter) return filter;\n      const {\n        labelField\n      } = props;\n      return (pattern, node) => {\n        if (!pattern.length) return true;\n        return node[labelField].toLowerCase().includes(pattern.toLowerCase());\n      };\n    }); // used to resolve selected options\n\n    const dataTreeMateRef = computed(() => createTreeMate(props.options, createTreeMateOptions(props.keyField, props.childrenField, props.disabledField)));\n    const {\n      value: initMergedValue\n    } = mergedValueRef;\n    const pendingNodeKeyRef = ref(props.checkable ? null : Array.isArray(initMergedValue) && initMergedValue.length ? initMergedValue[initMergedValue.length - 1] : null);\n    const mergedCascadeRef = computed(() => {\n      return props.multiple && props.cascade && props.checkable;\n    }); // The same logic as tree, now it's not that complex so I don't extract a\n    // function to reuse it.\n\n    const uncontrolledExpandedKeysRef = ref(props.defaultExpandAll ? undefined // leave it, n-tree will handle it\n    : props.defaultExpandedKeys || props.expandedKeys);\n    const controlledExpandedKeysRef = toRef(props, 'expandedKeys');\n    const mergedExpandedKeysRef = useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);\n    const focusedRef = ref(false);\n    const mergedPlaceholderRef = computed(() => {\n      const {\n        placeholder\n      } = props;\n      if (placeholder !== undefined) return placeholder;\n      return localeRef.value.placeholder;\n    });\n    const treeSelectedKeysRef = computed(() => {\n      if (props.checkable) return [];\n      return treeCheckedKeysRef.value;\n    });\n    const treeCheckedKeysRef = computed(() => {\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (props.multiple) {\n        if (Array.isArray(mergedValue)) return mergedValue;else return [];\n      } else {\n        if (mergedValue === null || Array.isArray(mergedValue)) return [];else return [mergedValue];\n      }\n    });\n    const selectedOptionRef = computed(() => {\n      const {\n        multiple,\n        showPath,\n        separator,\n        labelField\n      } = props;\n      if (multiple) return null;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (!Array.isArray(mergedValue) && mergedValue !== null) {\n        const {\n          value: treeMate\n        } = dataTreeMateRef;\n        const tmNode = treeMate.getNode(mergedValue);\n\n        if (tmNode !== null) {\n          return showPath ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(mergedValue).treeNodePath, separator, labelField) : treeOption2SelectOption(tmNode, labelField);\n        }\n      }\n\n      return null;\n    });\n    const selectedOptionsRef = computed(() => {\n      const {\n        multiple,\n        showPath,\n        separator\n      } = props;\n      if (!multiple) return null;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (Array.isArray(mergedValue)) {\n        const res = [];\n        const {\n          value: treeMate\n        } = dataTreeMateRef;\n        const {\n          checkedKeys\n        } = treeMate.getCheckedKeys(mergedValue, {\n          checkStrategy: props.checkStrategy,\n          cascade: mergedCascadeRef.value,\n          allowNotLoaded: props.allowCheckingNotLoaded\n        });\n        const {\n          labelField\n        } = props;\n        checkedKeys.forEach(value => {\n          const tmNode = treeMate.getNode(value);\n\n          if (tmNode !== null) {\n            res.push(showPath ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(value).treeNodePath, separator, labelField) : treeOption2SelectOption(tmNode, labelField));\n          }\n        });\n        return res;\n      }\n\n      return [];\n    });\n    const menuPaddingRef = computed(() => {\n      const {\n        self: {\n          menuPadding\n        }\n      } = themeRef.value;\n      return menuPadding;\n    });\n\n    function focusSelection() {\n      var _a;\n\n      (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n\n    function focusSelectionInput() {\n      var _a;\n\n      (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput();\n    }\n\n    function doUpdateShow(value) {\n      const {\n        onUpdateShow,\n        'onUpdate:show': _onUpdateShow\n      } = props;\n      if (onUpdateShow) call(onUpdateShow, value);\n      if (_onUpdateShow) call(_onUpdateShow, value);\n      uncontrolledShowRef.value = value;\n    }\n\n    function doUpdateValue(value, option) {\n      const {\n        onUpdateValue,\n        'onUpdate:value': _onUpdateValue\n      } = props;\n      if (onUpdateValue) call(onUpdateValue, value, option);\n\n      if (_onUpdateValue) {\n        call(_onUpdateValue, value, option);\n      }\n\n      uncontrolledValueRef.value = value;\n      nTriggerFormInput();\n      nTriggerFormChange();\n    }\n\n    function doUpdateIndeterminateKeys(value, option) {\n      const {\n        onUpdateIndeterminateKeys,\n        'onUpdate:indeterminateKeys': _onUpdateIndeterminateKeys\n      } = props;\n\n      if (onUpdateIndeterminateKeys) {\n        call(onUpdateIndeterminateKeys, value, option);\n      }\n\n      if (_onUpdateIndeterminateKeys) {\n        call(_onUpdateIndeterminateKeys, value, option);\n      }\n    }\n\n    function doUpdateExpandedKeys(keys, option) {\n      const {\n        onUpdateExpandedKeys,\n        'onUpdate:expandedKeys': _onUpdateExpandedKeys\n      } = props;\n\n      if (onUpdateExpandedKeys) {\n        call(onUpdateExpandedKeys, keys, option);\n      }\n\n      if (_onUpdateExpandedKeys) {\n        call(_onUpdateExpandedKeys, keys, option);\n      }\n\n      uncontrolledExpandedKeysRef.value = keys;\n    }\n\n    function doFocus(e) {\n      const {\n        onFocus\n      } = props;\n      if (onFocus) onFocus(e);\n      nTriggerFormFocus();\n    }\n\n    function doBlur(e) {\n      closeMenu();\n      const {\n        onBlur\n      } = props;\n      if (onBlur) onBlur(e);\n      nTriggerFormBlur();\n    }\n\n    function closeMenu() {\n      doUpdateShow(false);\n    }\n\n    function openMenu() {\n      if (!mergedDisabledRef.value) {\n        patternRef.value = '';\n        doUpdateShow(true);\n\n        if (props.filterable) {\n          focusSelectionInput();\n        }\n      }\n    }\n\n    function handleMenuLeave() {\n      patternRef.value = '';\n    }\n\n    function handleMenuClickoutside(e) {\n      var _a;\n\n      if (mergedShowRef.value) {\n        if (!((_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.$el.contains(getPreciseEventTarget(e)))) {\n          // outside select, don't need to return focus\n          closeMenu();\n        }\n      }\n    }\n\n    function handleTriggerClick() {\n      if (mergedDisabledRef.value) return;\n\n      if (!mergedShowRef.value) {\n        openMenu();\n      } else {\n        if (!props.filterable) {\n          // already focused, don't need to return focus\n          closeMenu();\n        }\n      }\n    }\n\n    function getOptionsByKeys(keys) {\n      const {\n        value: {\n          getNode\n        }\n      } = dataTreeMateRef;\n      return keys.map(key => {\n        var _a;\n\n        return ((_a = getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode) || null;\n      });\n    }\n\n    function handleUpdateCheckedKeys(keys) {\n      const options = getOptionsByKeys(keys);\n\n      if (props.multiple) {\n        doUpdateValue(keys, options);\n      } else {\n        keys.length ? doUpdateValue(keys[0], options[0] || null) : doUpdateValue(null, null);\n        closeMenu();\n\n        if (!props.filterable) {\n          // Currently it is not necessary. However if there is an action slot,\n          // it will be useful. So just leave it here.\n          focusSelection();\n        }\n      }\n\n      if (props.filterable) {\n        focusSelectionInput();\n        if (props.clearFilterAfterSelect) patternRef.value = '';\n      }\n    }\n\n    function handleUpdateIndeterminateKeys(keys) {\n      if (props.checkable) {\n        doUpdateIndeterminateKeys(keys, getOptionsByKeys(keys));\n      }\n    }\n\n    function handleTriggerFocus(e) {\n      var _a;\n\n      if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;\n      focusedRef.value = true;\n      doFocus(e);\n    }\n\n    function handleTriggerBlur(e) {\n      var _a;\n\n      if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;\n      focusedRef.value = false;\n      doBlur(e);\n    }\n\n    function handleMenuFocusin(e) {\n      var _a, _b, _c;\n\n      if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) || ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n        return;\n      }\n\n      focusedRef.value = true;\n      doFocus(e);\n    }\n\n    function handleMenuFocusout(e) {\n      var _a, _b, _c;\n\n      if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) || ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n        return;\n      }\n\n      focusedRef.value = false;\n      doBlur(e);\n    }\n\n    function handleClear(e) {\n      e.stopPropagation();\n      const {\n        multiple\n      } = props;\n\n      if (!multiple && props.filterable) {\n        closeMenu();\n      }\n\n      if (multiple) {\n        doUpdateValue([], []);\n      } else {\n        doUpdateValue(null, null);\n      }\n    }\n\n    function handleDeleteOption(option) {\n      // only work for multiple mode\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n\n      if (Array.isArray(mergedValue)) {\n        const {\n          value: treeMate\n        } = dataTreeMateRef; // all visible checked keys\n\n        const {\n          checkedKeys: checkedKeysValue\n        } = treeMate.getCheckedKeys(mergedValue, {\n          cascade: mergedCascadeRef.value,\n          allowNotLoaded: props.allowCheckingNotLoaded\n        });\n        const index = checkedKeysValue.findIndex(key => key === option.value);\n\n        if (~index) {\n          if (props.checkable) {\n            const {\n              checkedKeys\n            } = treeMate.uncheck(option.value, checkedKeysValue, {\n              checkStrategy: props.checkStrategy,\n              cascade: mergedCascadeRef.value,\n              allowNotLoaded: props.allowCheckingNotLoaded\n            });\n            doUpdateValue(checkedKeys, getOptionsByKeys(checkedKeys));\n          } else {\n            const nextValue = Array.from(checkedKeysValue);\n            nextValue.splice(index, 1);\n            doUpdateValue(nextValue, getOptionsByKeys(nextValue));\n          }\n        }\n      }\n    }\n\n    function handlePatternInput(e) {\n      const {\n        value\n      } = e.target;\n      patternRef.value = value;\n    }\n\n    function treeHandleKeydown(e) {\n      const {\n        value: treeInst\n      } = treeInstRef;\n\n      if (treeInst) {\n        treeInst.handleKeydown(e);\n      }\n    }\n\n    function handleKeydown(e) {\n      if (e.key === 'Enter') {\n        if (mergedShowRef.value) {\n          treeHandleKeydown(e);\n\n          if (!props.multiple) {\n            closeMenu();\n            focusSelection();\n          }\n        } else {\n          openMenu();\n        }\n\n        e.preventDefault();\n      } else if (e.key === 'Escape') {\n        if (mergedShowRef.value) {\n          markEventEffectPerformed(e);\n          closeMenu();\n          focusSelection();\n        }\n      } else {\n        if (mergedShowRef.value) {\n          treeHandleKeydown(e);\n        } else if (e.key === 'ArrowDown') {\n          openMenu();\n        }\n      }\n    }\n\n    function handleTabOut() {\n      closeMenu();\n      focusSelection();\n    }\n\n    function handleMenuMousedown(e) {\n      // If there's an action slot later, we need to check if mousedown happens\n      // in action panel\n      if (!happensIn(e, 'action')) e.preventDefault();\n    }\n\n    const selectionRenderTagRef = computed(() => {\n      const {\n        renderTag\n      } = props;\n      if (!renderTag) return undefined;\n      return function selectionRenderTag({\n        option,\n        handleClose\n      }) {\n        const {\n          value\n        } = option;\n\n        if (value !== undefined) {\n          const treeOption = dataTreeMateRef.value.getNode(value);\n\n          if (treeOption) {\n            return renderTag({\n              option: treeOption.rawNode,\n              handleClose\n            });\n          }\n        }\n\n        return value;\n      };\n    });\n    provide(treeSelectInjectionKey, {\n      pendingNodeKeyRef,\n      dataTreeMate: dataTreeMateRef\n    });\n\n    function handleTriggerOrMenuResize() {\n      var _a;\n\n      if (!mergedShowRef.value) return;\n      (_a = followerInstRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();\n    }\n\n    useOnResize(menuElRef, handleTriggerOrMenuResize);\n    const themeRef = useTheme('TreeSelect', '-tree-select', style, treeSelectLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          menuBoxShadow,\n          menuBorderRadius,\n          menuColor,\n          menuHeight,\n          actionPadding,\n          actionDividerColor,\n          actionTextColor\n        }\n      } = themeRef.value;\n      return {\n        '--n-menu-box-shadow': menuBoxShadow,\n        '--n-menu-border-radius': menuBorderRadius,\n        '--n-menu-color': menuColor,\n        '--n-menu-height': menuHeight,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-action-padding': actionPadding,\n        '--n-action-text-color': actionTextColor,\n        '--n-action-divider-color': actionDividerColor\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('tree-select', undefined, cssVarsRef, props) : undefined;\n    return {\n      menuElRef,\n      mergedStatus: mergedStatusRef,\n      triggerInstRef,\n      followerInstRef,\n      treeInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedValue: mergedValueRef,\n      mergedShow: mergedShowRef,\n      namespace: namespaceRef,\n      adjustedTo: useAdjustedTo(props),\n      isMounted: useIsMounted(),\n      focused: focusedRef,\n      menuPadding: menuPaddingRef,\n      mergedPlaceholder: mergedPlaceholderRef,\n      mergedExpandedKeys: mergedExpandedKeysRef,\n      treeSelectedKeys: treeSelectedKeysRef,\n      treeCheckedKeys: treeCheckedKeysRef,\n      mergedSize: mergedSizeRef,\n      mergedDisabled: mergedDisabledRef,\n      selectedOption: selectedOptionRef,\n      selectedOptions: selectedOptionsRef,\n      pattern: patternRef,\n      pendingNodeKey: pendingNodeKeyRef,\n      mergedCascade: mergedCascadeRef,\n      mergedFilter: mergedFilterRef,\n      selectionRenderTag: selectionRenderTagRef,\n      handleTriggerOrMenuResize,\n      doUpdateExpandedKeys,\n      handleMenuLeave,\n      handleTriggerClick,\n      handleMenuClickoutside,\n      handleUpdateCheckedKeys,\n      handleUpdateIndeterminateKeys,\n      handleTriggerFocus,\n      handleTriggerBlur,\n      handleMenuFocusin,\n      handleMenuFocusout,\n      handleClear,\n      handleDeleteOption,\n      handlePatternInput,\n      handleKeydown,\n      handleTabOut,\n      handleMenuMousedown,\n      mergedTheme: themeRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    const {\n      mergedTheme,\n      mergedClsPrefix,\n      $slots\n    } = this;\n    return h(\"div\", {\n      class: `${mergedClsPrefix}-tree-select`\n    }, h(VBinder, null, {\n      default: () => [h(VTarget, null, {\n        default: () => h(NInternalSelection, {\n          ref: \"triggerInstRef\",\n          onResize: this.handleTriggerOrMenuResize,\n          status: this.mergedStatus,\n          focused: this.focused,\n          clsPrefix: mergedClsPrefix,\n          theme: mergedTheme.peers.InternalSelection,\n          themeOverrides: mergedTheme.peerOverrides.InternalSelection,\n          renderTag: this.selectionRenderTag,\n          selectedOption: this.selectedOption,\n          selectedOptions: this.selectedOptions,\n          size: this.mergedSize,\n          bordered: this.bordered,\n          placeholder: this.mergedPlaceholder,\n          disabled: this.mergedDisabled,\n          active: this.mergedShow,\n          loading: this.loading,\n          multiple: this.multiple,\n          maxTagCount: this.maxTagCount,\n          showArrow: true,\n          filterable: this.filterable,\n          clearable: this.clearable,\n          pattern: this.pattern,\n          onPatternInput: this.handlePatternInput,\n          onClear: this.handleClear,\n          onClick: this.handleTriggerClick,\n          onFocus: this.handleTriggerFocus,\n          onBlur: this.handleTriggerBlur,\n          onDeleteOption: this.handleDeleteOption,\n          onKeydown: this.handleKeydown\n        }, {\n          arrow: () => {\n            var _a, _b;\n\n            return [(_b = (_a = this.$slots).arrow) === null || _b === void 0 ? void 0 : _b.call(_a)];\n          }\n        })\n      }), h(VFollower, {\n        ref: \"followerInstRef\",\n        show: this.mergedShow,\n        placement: this.placement,\n        to: this.adjustedTo,\n        teleportDisabled: this.adjustedTo === useAdjustedTo.tdkey,\n        containerClass: this.namespace,\n        width: this.consistentMenuWidth ? 'target' : undefined,\n        minWidth: \"target\"\n      }, {\n        default: () => h(Transition, {\n          name: \"fade-in-scale-up-transition\",\n          appear: this.isMounted,\n          onLeave: this.handleMenuLeave\n        }, {\n          default: () => {\n            var _a;\n\n            if (!this.mergedShow) return null;\n            const {\n              mergedClsPrefix,\n              checkable,\n              multiple,\n              menuProps,\n              options\n            } = this;\n            (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n            return withDirectives(h(\"div\", Object.assign({}, menuProps, {\n              class: [`${mergedClsPrefix}-tree-select-menu`, menuProps === null || menuProps === void 0 ? void 0 : menuProps.class, this.themeClass],\n              ref: \"menuElRef\",\n              style: [(menuProps === null || menuProps === void 0 ? void 0 : menuProps.style) || '', this.cssVars],\n              tabindex: 0,\n              onMousedown: this.handleMenuMousedown,\n              onKeydown: this.handleKeydown,\n              onFocusin: this.handleMenuFocusin,\n              onFocusout: this.handleMenuFocusout\n            }), h(NTree, {\n              ref: \"treeInstRef\",\n              blockLine: true,\n              allowCheckingNotLoaded: this.allowCheckingNotLoaded,\n              showIrrelevantNodes: false,\n              animated: false,\n              pattern: this.pattern,\n              filter: this.mergedFilter,\n              data: options,\n              cancelable: multiple,\n              labelField: this.labelField,\n              keyField: this.keyField,\n              disabledField: this.disabledField,\n              childrenField: this.childrenField,\n              theme: mergedTheme.peers.Tree,\n              themeOverrides: mergedTheme.peerOverrides.Tree,\n              defaultExpandAll: this.defaultExpandAll,\n              defaultExpandedKeys: this.defaultExpandedKeys,\n              expandedKeys: this.mergedExpandedKeys,\n              checkedKeys: this.treeCheckedKeys,\n              selectedKeys: this.treeSelectedKeys,\n              checkable: checkable,\n              checkStrategy: this.checkStrategy,\n              cascade: this.mergedCascade,\n              leafOnly: this.leafOnly,\n              multiple: this.multiple,\n              renderLabel: this.renderLabel,\n              renderPrefix: this.renderPrefix,\n              renderSuffix: this.renderSuffix,\n              renderSwitcherIcon: this.renderSwitcherIcon,\n              nodeProps: this.nodeProps,\n              virtualScroll: this.consistentMenuWidth && this.virtualScroll,\n              internalTreeSelect: true,\n              internalUnifySelectCheck: true,\n              internalScrollable: true,\n              internalScrollablePadding: this.menuPadding,\n              internalFocusable: false,\n              internalCheckboxFocusable: false,\n              internalRenderEmpty: () => h(\"div\", {\n                class: `${mergedClsPrefix}-tree-select-menu__empty`\n              }, resolveSlot($slots.empty, () => [h(NEmpty, {\n                theme: mergedTheme.peers.Empty,\n                themeOverrides: mergedTheme.peerOverrides.Empty\n              })])),\n              onLoad: this.onLoad,\n              onUpdateCheckedKeys: this.handleUpdateCheckedKeys,\n              onUpdateIndeterminateKeys: this.handleUpdateIndeterminateKeys,\n              onUpdateExpandedKeys: this.doUpdateExpandedKeys\n            }), resolveWrappedSlot($slots.action, children => {\n              return children ? h(\"div\", {\n                class: `${mergedClsPrefix}-tree-select-menu__action`,\n                \"data-action\": true\n              }, children) : null;\n            }), h(NBaseFocusDetector, {\n              onFocus: this.handleTabOut\n            })), [[clickoutside, this.handleMenuClickoutside, undefined, {\n              capture: true\n            }]]);\n          }\n        })\n      })]\n    }));\n  }\n\n});","map":{"version":3,"names":["h","defineComponent","ref","toRef","Transition","withDirectives","computed","provide","watchEffect","VBinder","VFollower","VTarget","useIsMounted","useMergedState","clickoutside","createTreeMate","getPreciseEventTarget","happensIn","createTreeMateOptions","treeSharedProps","NInternalSelection","NBaseFocusDetector","NTree","NEmpty","useConfig","useFormItem","useLocale","useTheme","useThemeClass","call","markEventEffectPerformed","resolveSlot","resolveWrappedSlot","useAdjustedTo","useOnResize","warnOnce","treeSelectLight","treeSelectInjectionKey","treeOption2SelectOption","treeOption2SelectOptionWithPath","style","treeSelectProps","Object","assign","props","bordered","type","Boolean","default","cascade","checkable","clearable","clearFilterAfterSelect","consistentMenuWidth","defaultShow","defaultValue","String","Number","Array","disabled","undefined","filterable","checkStrategy","loading","maxTagCount","multiple","showPath","separator","options","placeholder","placement","show","size","value","to","propTo","menuProps","virtualScroll","status","renderTag","Function","renderLabel","renderPrefix","renderSuffix","nodeProps","onBlur","onFocus","onLoad","onUpdateShow","onUpdateValue","leafOnly","name","setup","process","env","NODE_ENV","followerInstRef","triggerInstRef","treeInstRef","menuElRef","mergedClsPrefixRef","namespaceRef","inlineThemeDisabled","localeRef","mergedSizeRef","mergedDisabledRef","mergedStatusRef","nTriggerFormBlur","nTriggerFormChange","nTriggerFormFocus","nTriggerFormInput","uncontrolledValueRef","controlledValueRef","mergedValueRef","uncontrolledShowRef","controlledShowRef","mergedShowRef","patternRef","mergedFilterRef","filter","labelField","pattern","node","length","toLowerCase","includes","dataTreeMateRef","keyField","childrenField","disabledField","initMergedValue","pendingNodeKeyRef","isArray","mergedCascadeRef","uncontrolledExpandedKeysRef","defaultExpandAll","defaultExpandedKeys","expandedKeys","controlledExpandedKeysRef","mergedExpandedKeysRef","focusedRef","mergedPlaceholderRef","treeSelectedKeysRef","treeCheckedKeysRef","mergedValue","selectedOptionRef","treeMate","tmNode","getNode","getPath","treeNodePath","selectedOptionsRef","res","checkedKeys","getCheckedKeys","allowNotLoaded","allowCheckingNotLoaded","forEach","push","menuPaddingRef","self","menuPadding","themeRef","focusSelection","_a","focus","focusSelectionInput","focusInput","doUpdateShow","_onUpdateShow","doUpdateValue","option","_onUpdateValue","doUpdateIndeterminateKeys","onUpdateIndeterminateKeys","_onUpdateIndeterminateKeys","doUpdateExpandedKeys","keys","onUpdateExpandedKeys","_onUpdateExpandedKeys","doFocus","e","doBlur","closeMenu","openMenu","handleMenuLeave","handleMenuClickoutside","$el","contains","handleTriggerClick","getOptionsByKeys","map","key","rawNode","handleUpdateCheckedKeys","handleUpdateIndeterminateKeys","handleTriggerFocus","relatedTarget","handleTriggerBlur","handleMenuFocusin","_b","_c","handleMenuFocusout","handleClear","stopPropagation","handleDeleteOption","checkedKeysValue","index","findIndex","uncheck","nextValue","from","splice","handlePatternInput","target","treeHandleKeydown","treeInst","handleKeydown","preventDefault","handleTabOut","handleMenuMousedown","selectionRenderTagRef","selectionRenderTag","handleClose","treeOption","dataTreeMate","handleTriggerOrMenuResize","syncPosition","cssVarsRef","common","cubicBezierEaseInOut","menuBoxShadow","menuBorderRadius","menuColor","menuHeight","actionPadding","actionDividerColor","actionTextColor","themeClassHandle","mergedStatus","mergedClsPrefix","mergedShow","namespace","adjustedTo","isMounted","focused","mergedPlaceholder","mergedExpandedKeys","treeSelectedKeys","treeCheckedKeys","mergedSize","mergedDisabled","selectedOption","selectedOptions","pendingNodeKey","mergedCascade","mergedFilter","mergedTheme","cssVars","themeClass","onRender","render","$slots","class","onResize","clsPrefix","theme","peers","InternalSelection","themeOverrides","peerOverrides","active","showArrow","onPatternInput","onClear","onClick","onDeleteOption","onKeydown","arrow","teleportDisabled","tdkey","containerClass","width","minWidth","appear","onLeave","tabindex","onMousedown","onFocusin","onFocusout","blockLine","showIrrelevantNodes","animated","data","cancelable","Tree","selectedKeys","renderSwitcherIcon","internalTreeSelect","internalUnifySelectCheck","internalScrollable","internalScrollablePadding","internalFocusable","internalCheckboxFocusable","internalRenderEmpty","empty","Empty","onUpdateCheckedKeys","action","children","capture"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/tree-select/src/TreeSelect.js"],"sourcesContent":["import { h, defineComponent, ref, toRef, Transition, withDirectives, computed, provide, watchEffect } from 'vue';\nimport { VBinder, VFollower, VTarget } from 'vueuc';\nimport { useIsMounted, useMergedState } from 'vooks';\nimport { clickoutside } from 'vdirs';\nimport { createTreeMate } from 'treemate';\nimport { getPreciseEventTarget, happensIn } from 'seemly';\nimport { createTreeMateOptions, treeSharedProps } from '../../tree/src/Tree';\nimport { NInternalSelection, NBaseFocusDetector } from '../../_internal';\nimport { NTree } from '../../tree';\nimport { NEmpty } from '../../empty';\nimport { useConfig, useFormItem, useLocale, useTheme, useThemeClass } from '../../_mixins';\nimport { call, markEventEffectPerformed, resolveSlot, resolveWrappedSlot, useAdjustedTo, useOnResize, warnOnce } from '../../_utils';\nimport { treeSelectLight } from '../styles';\nimport { treeSelectInjectionKey } from './interface';\nimport { treeOption2SelectOption, treeOption2SelectOptionWithPath } from './utils';\nimport style from './styles/index.cssr';\nexport const treeSelectProps = Object.assign(Object.assign(Object.assign(Object.assign({}, useTheme.props), { bordered: {\n        type: Boolean,\n        default: true\n    }, cascade: Boolean, checkable: Boolean, clearable: Boolean, clearFilterAfterSelect: {\n        type: Boolean,\n        default: true\n    }, consistentMenuWidth: {\n        type: Boolean,\n        default: true\n    }, defaultShow: Boolean, defaultValue: {\n        type: [String, Number, Array],\n        default: null\n    }, disabled: {\n        type: Boolean,\n        default: undefined\n    }, filterable: Boolean, checkStrategy: {\n        type: String,\n        default: 'all'\n    }, loading: Boolean, maxTagCount: [String, Number], multiple: Boolean, showPath: Boolean, separator: {\n        type: String,\n        default: ' / '\n    }, options: {\n        type: Array,\n        default: () => []\n    }, placeholder: String, placement: {\n        type: String,\n        default: 'bottom-start'\n    }, show: {\n        type: Boolean,\n        default: undefined\n    }, size: String, value: [String, Number, Array], to: useAdjustedTo.propTo, menuProps: Object, virtualScroll: {\n        type: Boolean,\n        default: true\n    }, status: String, renderTag: Function }), treeSharedProps), { renderLabel: Function, renderPrefix: Function, renderSuffix: Function, nodeProps: Function, onBlur: Function, onFocus: Function, onLoad: Function, onUpdateShow: [Function, Array], onUpdateValue: [Function, Array], 'onUpdate:value': [Function, Array], 'onUpdate:show': [Function, Array], \n    /**\n     * @deprecated\n     */\n    leafOnly: Boolean });\nexport default defineComponent({\n    name: 'TreeSelect',\n    props: treeSelectProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.leafOnly) {\n                    warnOnce('tree-select', '`leaf-only` is deprecated, please use `check-strategy=\"child\"` instead.');\n                }\n            });\n        }\n        const followerInstRef = ref(null);\n        const triggerInstRef = ref(null);\n        const treeInstRef = ref(null);\n        const menuElRef = ref(null);\n        const { mergedClsPrefixRef, namespaceRef, inlineThemeDisabled } = useConfig(props);\n        const { localeRef } = useLocale('Select');\n        const { mergedSizeRef, mergedDisabledRef, mergedStatusRef, nTriggerFormBlur, nTriggerFormChange, nTriggerFormFocus, nTriggerFormInput } = useFormItem(props);\n        const uncontrolledValueRef = ref(props.defaultValue);\n        const controlledValueRef = toRef(props, 'value');\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const uncontrolledShowRef = ref(props.defaultShow);\n        const controlledShowRef = toRef(props, 'show');\n        const mergedShowRef = useMergedState(controlledShowRef, uncontrolledShowRef);\n        const patternRef = ref('');\n        const mergedFilterRef = computed(() => {\n            const { filter } = props;\n            if (filter)\n                return filter;\n            const { labelField } = props;\n            return (pattern, node) => {\n                if (!pattern.length)\n                    return true;\n                return node[labelField]\n                    .toLowerCase()\n                    .includes(pattern.toLowerCase());\n            };\n        });\n        // used to resolve selected options\n        const dataTreeMateRef = computed(() => createTreeMate(props.options, createTreeMateOptions(props.keyField, props.childrenField, props.disabledField)));\n        const { value: initMergedValue } = mergedValueRef;\n        const pendingNodeKeyRef = ref(props.checkable\n            ? null\n            : Array.isArray(initMergedValue) && initMergedValue.length\n                ? initMergedValue[initMergedValue.length - 1]\n                : null);\n        const mergedCascadeRef = computed(() => {\n            return props.multiple && props.cascade && props.checkable;\n        });\n        // The same logic as tree, now it's not that complex so I don't extract a\n        // function to reuse it.\n        const uncontrolledExpandedKeysRef = ref(props.defaultExpandAll\n            ? undefined // leave it, n-tree will handle it\n            : props.defaultExpandedKeys || props.expandedKeys);\n        const controlledExpandedKeysRef = toRef(props, 'expandedKeys');\n        const mergedExpandedKeysRef = useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);\n        const focusedRef = ref(false);\n        const mergedPlaceholderRef = computed(() => {\n            const { placeholder } = props;\n            if (placeholder !== undefined)\n                return placeholder;\n            return localeRef.value.placeholder;\n        });\n        const treeSelectedKeysRef = computed(() => {\n            if (props.checkable)\n                return [];\n            return treeCheckedKeysRef.value;\n        });\n        const treeCheckedKeysRef = computed(() => {\n            const { value: mergedValue } = mergedValueRef;\n            if (props.multiple) {\n                if (Array.isArray(mergedValue))\n                    return mergedValue;\n                else\n                    return [];\n            }\n            else {\n                if (mergedValue === null || Array.isArray(mergedValue))\n                    return [];\n                else\n                    return [mergedValue];\n            }\n        });\n        const selectedOptionRef = computed(() => {\n            const { multiple, showPath, separator, labelField } = props;\n            if (multiple)\n                return null;\n            const { value: mergedValue } = mergedValueRef;\n            if (!Array.isArray(mergedValue) && mergedValue !== null) {\n                const { value: treeMate } = dataTreeMateRef;\n                const tmNode = treeMate.getNode(mergedValue);\n                if (tmNode !== null) {\n                    return showPath\n                        ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(mergedValue).treeNodePath, separator, labelField)\n                        : treeOption2SelectOption(tmNode, labelField);\n                }\n            }\n            return null;\n        });\n        const selectedOptionsRef = computed(() => {\n            const { multiple, showPath, separator } = props;\n            if (!multiple)\n                return null;\n            const { value: mergedValue } = mergedValueRef;\n            if (Array.isArray(mergedValue)) {\n                const res = [];\n                const { value: treeMate } = dataTreeMateRef;\n                const { checkedKeys } = treeMate.getCheckedKeys(mergedValue, {\n                    checkStrategy: props.checkStrategy,\n                    cascade: mergedCascadeRef.value,\n                    allowNotLoaded: props.allowCheckingNotLoaded\n                });\n                const { labelField } = props;\n                checkedKeys.forEach((value) => {\n                    const tmNode = treeMate.getNode(value);\n                    if (tmNode !== null) {\n                        res.push(showPath\n                            ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(value).treeNodePath, separator, labelField)\n                            : treeOption2SelectOption(tmNode, labelField));\n                    }\n                });\n                return res;\n            }\n            return [];\n        });\n        const menuPaddingRef = computed(() => {\n            const { self: { menuPadding } } = themeRef.value;\n            return menuPadding;\n        });\n        function focusSelection() {\n            var _a;\n            (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        function focusSelectionInput() {\n            var _a;\n            (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput();\n        }\n        function doUpdateShow(value) {\n            const { onUpdateShow, 'onUpdate:show': _onUpdateShow } = props;\n            if (onUpdateShow)\n                call(onUpdateShow, value);\n            if (_onUpdateShow)\n                call(_onUpdateShow, value);\n            uncontrolledShowRef.value = value;\n        }\n        function doUpdateValue(value, option) {\n            const { onUpdateValue, 'onUpdate:value': _onUpdateValue } = props;\n            if (onUpdateValue)\n                call(onUpdateValue, value, option);\n            if (_onUpdateValue) {\n                call(_onUpdateValue, value, option);\n            }\n            uncontrolledValueRef.value = value;\n            nTriggerFormInput();\n            nTriggerFormChange();\n        }\n        function doUpdateIndeterminateKeys(value, option) {\n            const { onUpdateIndeterminateKeys, 'onUpdate:indeterminateKeys': _onUpdateIndeterminateKeys } = props;\n            if (onUpdateIndeterminateKeys) {\n                call(onUpdateIndeterminateKeys, value, option);\n            }\n            if (_onUpdateIndeterminateKeys) {\n                call(_onUpdateIndeterminateKeys, value, option);\n            }\n        }\n        function doUpdateExpandedKeys(keys, option) {\n            const { onUpdateExpandedKeys, 'onUpdate:expandedKeys': _onUpdateExpandedKeys } = props;\n            if (onUpdateExpandedKeys) {\n                call(onUpdateExpandedKeys, keys, option);\n            }\n            if (_onUpdateExpandedKeys) {\n                call(_onUpdateExpandedKeys, keys, option);\n            }\n            uncontrolledExpandedKeysRef.value = keys;\n        }\n        function doFocus(e) {\n            const { onFocus } = props;\n            if (onFocus)\n                onFocus(e);\n            nTriggerFormFocus();\n        }\n        function doBlur(e) {\n            closeMenu();\n            const { onBlur } = props;\n            if (onBlur)\n                onBlur(e);\n            nTriggerFormBlur();\n        }\n        function closeMenu() {\n            doUpdateShow(false);\n        }\n        function openMenu() {\n            if (!mergedDisabledRef.value) {\n                patternRef.value = '';\n                doUpdateShow(true);\n                if (props.filterable) {\n                    focusSelectionInput();\n                }\n            }\n        }\n        function handleMenuLeave() {\n            patternRef.value = '';\n        }\n        function handleMenuClickoutside(e) {\n            var _a;\n            if (mergedShowRef.value) {\n                if (!((_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.$el.contains(getPreciseEventTarget(e)))) {\n                    // outside select, don't need to return focus\n                    closeMenu();\n                }\n            }\n        }\n        function handleTriggerClick() {\n            if (mergedDisabledRef.value)\n                return;\n            if (!mergedShowRef.value) {\n                openMenu();\n            }\n            else {\n                if (!props.filterable) {\n                    // already focused, don't need to return focus\n                    closeMenu();\n                }\n            }\n        }\n        function getOptionsByKeys(keys) {\n            const { value: { getNode } } = dataTreeMateRef;\n            return keys.map((key) => { var _a; return ((_a = getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode) || null; });\n        }\n        function handleUpdateCheckedKeys(keys) {\n            const options = getOptionsByKeys(keys);\n            if (props.multiple) {\n                doUpdateValue(keys, options);\n            }\n            else {\n                keys.length\n                    ? doUpdateValue(keys[0], options[0] || null)\n                    : doUpdateValue(null, null);\n                closeMenu();\n                if (!props.filterable) {\n                    // Currently it is not necessary. However if there is an action slot,\n                    // it will be useful. So just leave it here.\n                    focusSelection();\n                }\n            }\n            if (props.filterable) {\n                focusSelectionInput();\n                if (props.clearFilterAfterSelect)\n                    patternRef.value = '';\n            }\n        }\n        function handleUpdateIndeterminateKeys(keys) {\n            if (props.checkable) {\n                doUpdateIndeterminateKeys(keys, getOptionsByKeys(keys));\n            }\n        }\n        function handleTriggerFocus(e) {\n            var _a;\n            if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))\n                return;\n            focusedRef.value = true;\n            doFocus(e);\n        }\n        function handleTriggerBlur(e) {\n            var _a;\n            if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))\n                return;\n            focusedRef.value = false;\n            doBlur(e);\n        }\n        function handleMenuFocusin(e) {\n            var _a, _b, _c;\n            if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) ||\n                ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n                return;\n            }\n            focusedRef.value = true;\n            doFocus(e);\n        }\n        function handleMenuFocusout(e) {\n            var _a, _b, _c;\n            if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) ||\n                ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n                return;\n            }\n            focusedRef.value = false;\n            doBlur(e);\n        }\n        function handleClear(e) {\n            e.stopPropagation();\n            const { multiple } = props;\n            if (!multiple && props.filterable) {\n                closeMenu();\n            }\n            if (multiple) {\n                doUpdateValue([], []);\n            }\n            else {\n                doUpdateValue(null, null);\n            }\n        }\n        function handleDeleteOption(option) {\n            // only work for multiple mode\n            const { value: mergedValue } = mergedValueRef;\n            if (Array.isArray(mergedValue)) {\n                const { value: treeMate } = dataTreeMateRef;\n                // all visible checked keys\n                const { checkedKeys: checkedKeysValue } = treeMate.getCheckedKeys(mergedValue, {\n                    cascade: mergedCascadeRef.value,\n                    allowNotLoaded: props.allowCheckingNotLoaded\n                });\n                const index = checkedKeysValue.findIndex((key) => key === option.value);\n                if (~index) {\n                    if (props.checkable) {\n                        const { checkedKeys } = treeMate.uncheck(option.value, checkedKeysValue, {\n                            checkStrategy: props.checkStrategy,\n                            cascade: mergedCascadeRef.value,\n                            allowNotLoaded: props.allowCheckingNotLoaded\n                        });\n                        doUpdateValue(checkedKeys, getOptionsByKeys(checkedKeys));\n                    }\n                    else {\n                        const nextValue = Array.from(checkedKeysValue);\n                        nextValue.splice(index, 1);\n                        doUpdateValue(nextValue, getOptionsByKeys(nextValue));\n                    }\n                }\n            }\n        }\n        function handlePatternInput(e) {\n            const { value } = e.target;\n            patternRef.value = value;\n        }\n        function treeHandleKeydown(e) {\n            const { value: treeInst } = treeInstRef;\n            if (treeInst) {\n                treeInst.handleKeydown(e);\n            }\n        }\n        function handleKeydown(e) {\n            if (e.key === 'Enter') {\n                if (mergedShowRef.value) {\n                    treeHandleKeydown(e);\n                    if (!props.multiple) {\n                        closeMenu();\n                        focusSelection();\n                    }\n                }\n                else {\n                    openMenu();\n                }\n                e.preventDefault();\n            }\n            else if (e.key === 'Escape') {\n                if (mergedShowRef.value) {\n                    markEventEffectPerformed(e);\n                    closeMenu();\n                    focusSelection();\n                }\n            }\n            else {\n                if (mergedShowRef.value) {\n                    treeHandleKeydown(e);\n                }\n                else if (e.key === 'ArrowDown') {\n                    openMenu();\n                }\n            }\n        }\n        function handleTabOut() {\n            closeMenu();\n            focusSelection();\n        }\n        function handleMenuMousedown(e) {\n            // If there's an action slot later, we need to check if mousedown happens\n            // in action panel\n            if (!happensIn(e, 'action'))\n                e.preventDefault();\n        }\n        const selectionRenderTagRef = computed(() => {\n            const { renderTag } = props;\n            if (!renderTag)\n                return undefined;\n            return function selectionRenderTag({ option, handleClose }) {\n                const { value } = option;\n                if (value !== undefined) {\n                    const treeOption = dataTreeMateRef.value.getNode(value);\n                    if (treeOption) {\n                        return renderTag({ option: treeOption.rawNode, handleClose });\n                    }\n                }\n                return value;\n            };\n        });\n        provide(treeSelectInjectionKey, {\n            pendingNodeKeyRef,\n            dataTreeMate: dataTreeMateRef\n        });\n        function handleTriggerOrMenuResize() {\n            var _a;\n            if (!mergedShowRef.value)\n                return;\n            (_a = followerInstRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();\n        }\n        useOnResize(menuElRef, handleTriggerOrMenuResize);\n        const themeRef = useTheme('TreeSelect', '-tree-select', style, treeSelectLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { menuBoxShadow, menuBorderRadius, menuColor, menuHeight, actionPadding, actionDividerColor, actionTextColor } } = themeRef.value;\n            return {\n                '--n-menu-box-shadow': menuBoxShadow,\n                '--n-menu-border-radius': menuBorderRadius,\n                '--n-menu-color': menuColor,\n                '--n-menu-height': menuHeight,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-action-padding': actionPadding,\n                '--n-action-text-color': actionTextColor,\n                '--n-action-divider-color': actionDividerColor\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('tree-select', undefined, cssVarsRef, props)\n            : undefined;\n        return {\n            menuElRef,\n            mergedStatus: mergedStatusRef,\n            triggerInstRef,\n            followerInstRef,\n            treeInstRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedValue: mergedValueRef,\n            mergedShow: mergedShowRef,\n            namespace: namespaceRef,\n            adjustedTo: useAdjustedTo(props),\n            isMounted: useIsMounted(),\n            focused: focusedRef,\n            menuPadding: menuPaddingRef,\n            mergedPlaceholder: mergedPlaceholderRef,\n            mergedExpandedKeys: mergedExpandedKeysRef,\n            treeSelectedKeys: treeSelectedKeysRef,\n            treeCheckedKeys: treeCheckedKeysRef,\n            mergedSize: mergedSizeRef,\n            mergedDisabled: mergedDisabledRef,\n            selectedOption: selectedOptionRef,\n            selectedOptions: selectedOptionsRef,\n            pattern: patternRef,\n            pendingNodeKey: pendingNodeKeyRef,\n            mergedCascade: mergedCascadeRef,\n            mergedFilter: mergedFilterRef,\n            selectionRenderTag: selectionRenderTagRef,\n            handleTriggerOrMenuResize,\n            doUpdateExpandedKeys,\n            handleMenuLeave,\n            handleTriggerClick,\n            handleMenuClickoutside,\n            handleUpdateCheckedKeys,\n            handleUpdateIndeterminateKeys,\n            handleTriggerFocus,\n            handleTriggerBlur,\n            handleMenuFocusin,\n            handleMenuFocusout,\n            handleClear,\n            handleDeleteOption,\n            handlePatternInput,\n            handleKeydown,\n            handleTabOut,\n            handleMenuMousedown,\n            mergedTheme: themeRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        const { mergedTheme, mergedClsPrefix, $slots } = this;\n        return (h(\"div\", { class: `${mergedClsPrefix}-tree-select` },\n            h(VBinder, null, {\n                default: () => [\n                    h(VTarget, null, {\n                        default: () => (h(NInternalSelection, { ref: \"triggerInstRef\", onResize: this.handleTriggerOrMenuResize, status: this.mergedStatus, focused: this.focused, clsPrefix: mergedClsPrefix, theme: mergedTheme.peers.InternalSelection, themeOverrides: mergedTheme.peerOverrides.InternalSelection, renderTag: this.selectionRenderTag, selectedOption: this.selectedOption, selectedOptions: this.selectedOptions, size: this.mergedSize, bordered: this.bordered, placeholder: this.mergedPlaceholder, disabled: this.mergedDisabled, active: this.mergedShow, loading: this.loading, multiple: this.multiple, maxTagCount: this.maxTagCount, showArrow: true, filterable: this.filterable, clearable: this.clearable, pattern: this.pattern, onPatternInput: this.handlePatternInput, onClear: this.handleClear, onClick: this.handleTriggerClick, onFocus: this.handleTriggerFocus, onBlur: this.handleTriggerBlur, onDeleteOption: this.handleDeleteOption, onKeydown: this.handleKeydown }, {\n                            arrow: () => { var _a, _b; return [(_b = (_a = this.$slots).arrow) === null || _b === void 0 ? void 0 : _b.call(_a)]; }\n                        }))\n                    }),\n                    h(VFollower, { ref: \"followerInstRef\", show: this.mergedShow, placement: this.placement, to: this.adjustedTo, teleportDisabled: this.adjustedTo === useAdjustedTo.tdkey, containerClass: this.namespace, width: this.consistentMenuWidth ? 'target' : undefined, minWidth: \"target\" }, {\n                        default: () => (h(Transition, { name: \"fade-in-scale-up-transition\", appear: this.isMounted, onLeave: this.handleMenuLeave }, {\n                            default: () => {\n                                var _a;\n                                if (!this.mergedShow)\n                                    return null;\n                                const { mergedClsPrefix, checkable, multiple, menuProps, options } = this;\n                                (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n                                return withDirectives(h(\"div\", Object.assign({}, menuProps, { class: [\n                                        `${mergedClsPrefix}-tree-select-menu`,\n                                        menuProps === null || menuProps === void 0 ? void 0 : menuProps.class,\n                                        this.themeClass\n                                    ], ref: \"menuElRef\", style: [\n                                        (menuProps === null || menuProps === void 0 ? void 0 : menuProps.style) || '',\n                                        this.cssVars\n                                    ], tabindex: 0, onMousedown: this.handleMenuMousedown, onKeydown: this.handleKeydown, onFocusin: this.handleMenuFocusin, onFocusout: this.handleMenuFocusout }),\n                                    h(NTree, { ref: \"treeInstRef\", blockLine: true, allowCheckingNotLoaded: this.allowCheckingNotLoaded, showIrrelevantNodes: false, animated: false, pattern: this.pattern, filter: this.mergedFilter, data: options, cancelable: multiple, labelField: this.labelField, keyField: this.keyField, disabledField: this.disabledField, childrenField: this.childrenField, theme: mergedTheme.peers.Tree, themeOverrides: mergedTheme.peerOverrides.Tree, defaultExpandAll: this.defaultExpandAll, defaultExpandedKeys: this.defaultExpandedKeys, expandedKeys: this.mergedExpandedKeys, checkedKeys: this.treeCheckedKeys, selectedKeys: this.treeSelectedKeys, checkable: checkable, checkStrategy: this.checkStrategy, cascade: this.mergedCascade, leafOnly: this.leafOnly, multiple: this.multiple, renderLabel: this.renderLabel, renderPrefix: this.renderPrefix, renderSuffix: this.renderSuffix, renderSwitcherIcon: this.renderSwitcherIcon, nodeProps: this.nodeProps, virtualScroll: this.consistentMenuWidth && this.virtualScroll, internalTreeSelect: true, internalUnifySelectCheck: true, internalScrollable: true, internalScrollablePadding: this.menuPadding, internalFocusable: false, internalCheckboxFocusable: false, internalRenderEmpty: () => (h(\"div\", { class: `${mergedClsPrefix}-tree-select-menu__empty` }, resolveSlot($slots.empty, () => [\n                                            h(NEmpty, { theme: mergedTheme.peers.Empty, themeOverrides: mergedTheme.peerOverrides.Empty })\n                                        ]))), onLoad: this.onLoad, onUpdateCheckedKeys: this.handleUpdateCheckedKeys, onUpdateIndeterminateKeys: this.handleUpdateIndeterminateKeys, onUpdateExpandedKeys: this.doUpdateExpandedKeys }),\n                                    resolveWrappedSlot($slots.action, (children) => {\n                                        return children ? (h(\"div\", { class: `${mergedClsPrefix}-tree-select-menu__action`, \"data-action\": true }, children)) : null;\n                                    }),\n                                    h(NBaseFocusDetector, { onFocus: this.handleTabOut })), [\n                                    [\n                                        clickoutside,\n                                        this.handleMenuClickoutside,\n                                        undefined,\n                                        { capture: true }\n                                    ]\n                                ]);\n                            }\n                        }))\n                    })\n                ]\n            })));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}