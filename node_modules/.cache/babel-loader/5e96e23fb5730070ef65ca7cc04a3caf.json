{"ast":null,"code":"import { hsl2hsv, hsl2rgb, hsla, hsv2hsl, hsv2rgb, hsva, rgb2hsl, rgb2hsv, rgba, toHexaString, toHslaString, toHsvaString, toRgbaString } from 'seemly';\nimport { warn } from '../../_utils';\nexport function deriveDefaultValue(modes, showAlpha) {\n  const mode = modes[0];\n\n  switch (mode) {\n    case 'hex':\n      return showAlpha ? '#000000FF' : '#000000';\n\n    case 'rgb':\n      return showAlpha ? 'rgba(0, 0, 0, 1)' : 'rgb(0, 0, 0)';\n\n    case 'hsl':\n      return showAlpha ? 'hsla(0, 0%, 0%, 1)' : 'hsl(0, 0%, 0%)';\n\n    case 'hsv':\n      return showAlpha ? 'hsva(0, 0%, 0%, 1)' : 'hsv(0, 0%, 0%)';\n  }\n\n  if (process.env.NODE_ENV !== 'production') warn('color-picker', 'props.modes is invalid.'); // in case of invalid modes\n\n  return '#000000';\n}\nexport function getModeFromValue(color) {\n  if (color === null) return null;\n  if (/^ *#/.test(color)) return 'hex';\n  if (color.includes('rgb')) return 'rgb';\n  if (color.includes('hsl')) return 'hsl';\n  if (color.includes('hsv')) return 'hsv';\n  return null;\n}\nexport function floor(color) {\n  return color.map(channel => Math.floor(channel));\n}\nexport function normalizeHue(hue) {\n  hue = Math.round(hue);\n  return hue >= 360 ? 359 : hue < 0 ? 0 : hue;\n}\nexport function normalizeAlpha(alpha) {\n  alpha = Math.round(alpha * 100) / 100;\n  return alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n}\nconst convert = {\n  rgb: {\n    hex(value) {\n      return toHexaString(rgba(value));\n    },\n\n    hsl(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHslaString([...rgb2hsl(r, g, b), a]);\n    },\n\n    hsv(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHsvaString([...rgb2hsv(r, g, b), a]);\n    }\n\n  },\n  hex: {\n    rgb(value) {\n      return toRgbaString(rgba(value));\n    },\n\n    hsl(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHslaString([...rgb2hsl(r, g, b), a]);\n    },\n\n    hsv(value) {\n      const [r, g, b, a] = rgba(value);\n      return toHsvaString([...rgb2hsv(r, g, b), a]);\n    }\n\n  },\n  hsl: {\n    hex(value) {\n      const [h, s, l, a] = hsla(value);\n      return toHexaString([...hsl2rgb(h, s, l), a]);\n    },\n\n    rgb(value) {\n      const [h, s, l, a] = hsla(value);\n      return toRgbaString([...hsl2rgb(h, s, l), a]);\n    },\n\n    hsv(value) {\n      const [h, s, l, a] = hsla(value);\n      return toHsvaString([...hsl2hsv(h, s, l), a]);\n    }\n\n  },\n  hsv: {\n    hex(value) {\n      const [h, s, v, a] = hsva(value);\n      return toHexaString([...hsv2rgb(h, s, v), a]);\n    },\n\n    rgb(value) {\n      const [h, s, v, a] = hsva(value);\n      return toRgbaString([...hsv2rgb(h, s, v), a]);\n    },\n\n    hsl(value) {\n      const [h, s, v, a] = hsva(value);\n      return toHslaString([...hsv2hsl(h, s, v), a]);\n    }\n\n  }\n}; // implementation\n\nexport function convertColor(value, mode, originalMode) {\n  originalMode = originalMode || getModeFromValue(value);\n  if (!originalMode) return null;\n  if (originalMode === mode) return value;\n  const conversions = convert[originalMode];\n  return conversions[mode](value);\n}","map":{"version":3,"names":["hsl2hsv","hsl2rgb","hsla","hsv2hsl","hsv2rgb","hsva","rgb2hsl","rgb2hsv","rgba","toHexaString","toHslaString","toHsvaString","toRgbaString","warn","deriveDefaultValue","modes","showAlpha","mode","process","env","NODE_ENV","getModeFromValue","color","test","includes","floor","map","channel","Math","normalizeHue","hue","round","normalizeAlpha","alpha","convert","rgb","hex","value","hsl","r","g","b","a","hsv","h","s","l","v","convertColor","originalMode","conversions"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/color-picker/src/utils.js"],"sourcesContent":["import { hsl2hsv, hsl2rgb, hsla, hsv2hsl, hsv2rgb, hsva, rgb2hsl, rgb2hsv, rgba, toHexaString, toHslaString, toHsvaString, toRgbaString } from 'seemly';\nimport { warn } from '../../_utils';\nexport function deriveDefaultValue(modes, showAlpha) {\n    const mode = modes[0];\n    switch (mode) {\n        case 'hex':\n            return showAlpha ? '#000000FF' : '#000000';\n        case 'rgb':\n            return showAlpha ? 'rgba(0, 0, 0, 1)' : 'rgb(0, 0, 0)';\n        case 'hsl':\n            return showAlpha ? 'hsla(0, 0%, 0%, 1)' : 'hsl(0, 0%, 0%)';\n        case 'hsv':\n            return showAlpha ? 'hsva(0, 0%, 0%, 1)' : 'hsv(0, 0%, 0%)';\n    }\n    if (process.env.NODE_ENV !== 'production')\n        warn('color-picker', 'props.modes is invalid.');\n    // in case of invalid modes\n    return '#000000';\n}\nexport function getModeFromValue(color) {\n    if (color === null)\n        return null;\n    if (/^ *#/.test(color))\n        return 'hex';\n    if (color.includes('rgb'))\n        return 'rgb';\n    if (color.includes('hsl'))\n        return 'hsl';\n    if (color.includes('hsv'))\n        return 'hsv';\n    return null;\n}\nexport function floor(color) {\n    return color.map((channel) => Math.floor(channel));\n}\nexport function normalizeHue(hue) {\n    hue = Math.round(hue);\n    return hue >= 360 ? 359 : hue < 0 ? 0 : hue;\n}\nexport function normalizeAlpha(alpha) {\n    alpha = Math.round(alpha * 100) / 100;\n    return alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n}\nconst convert = {\n    rgb: {\n        hex(value) {\n            return toHexaString(rgba(value));\n        },\n        hsl(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHslaString([...rgb2hsl(r, g, b), a]);\n        },\n        hsv(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHsvaString([...rgb2hsv(r, g, b), a]);\n        }\n    },\n    hex: {\n        rgb(value) {\n            return toRgbaString(rgba(value));\n        },\n        hsl(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHslaString([...rgb2hsl(r, g, b), a]);\n        },\n        hsv(value) {\n            const [r, g, b, a] = rgba(value);\n            return toHsvaString([...rgb2hsv(r, g, b), a]);\n        }\n    },\n    hsl: {\n        hex(value) {\n            const [h, s, l, a] = hsla(value);\n            return toHexaString([...hsl2rgb(h, s, l), a]);\n        },\n        rgb(value) {\n            const [h, s, l, a] = hsla(value);\n            return toRgbaString([...hsl2rgb(h, s, l), a]);\n        },\n        hsv(value) {\n            const [h, s, l, a] = hsla(value);\n            return toHsvaString([...hsl2hsv(h, s, l), a]);\n        }\n    },\n    hsv: {\n        hex(value) {\n            const [h, s, v, a] = hsva(value);\n            return toHexaString([...hsv2rgb(h, s, v), a]);\n        },\n        rgb(value) {\n            const [h, s, v, a] = hsva(value);\n            return toRgbaString([...hsv2rgb(h, s, v), a]);\n        },\n        hsl(value) {\n            const [h, s, v, a] = hsva(value);\n            return toHslaString([...hsv2hsl(h, s, v), a]);\n        }\n    }\n};\n// implementation\nexport function convertColor(value, mode, originalMode) {\n    originalMode = originalMode || getModeFromValue(value);\n    if (!originalMode)\n        return null;\n    if (originalMode === mode)\n        return value;\n    const conversions = convert[originalMode];\n    return conversions[mode](value);\n}\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,OAAjC,EAA0CC,OAA1C,EAAmDC,IAAnD,EAAyDC,OAAzD,EAAkEC,OAAlE,EAA2EC,IAA3E,EAAiFC,YAAjF,EAA+FC,YAA/F,EAA6GC,YAA7G,EAA2HC,YAA3H,QAA+I,QAA/I;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,SAAnC,EAA8C;EACjD,MAAMC,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAlB;;EACA,QAAQE,IAAR;IACI,KAAK,KAAL;MACI,OAAOD,SAAS,GAAG,WAAH,GAAiB,SAAjC;;IACJ,KAAK,KAAL;MACI,OAAOA,SAAS,GAAG,kBAAH,GAAwB,cAAxC;;IACJ,KAAK,KAAL;MACI,OAAOA,SAAS,GAAG,oBAAH,GAA0B,gBAA1C;;IACJ,KAAK,KAAL;MACI,OAAOA,SAAS,GAAG,oBAAH,GAA0B,gBAA1C;EARR;;EAUA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EACIP,IAAI,CAAC,cAAD,EAAiB,yBAAjB,CAAJ,CAb6C,CAcjD;;EACA,OAAO,SAAP;AACH;AACD,OAAO,SAASQ,gBAAT,CAA0BC,KAA1B,EAAiC;EACpC,IAAIA,KAAK,KAAK,IAAd,EACI,OAAO,IAAP;EACJ,IAAI,OAAOC,IAAP,CAAYD,KAAZ,CAAJ,EACI,OAAO,KAAP;EACJ,IAAIA,KAAK,CAACE,QAAN,CAAe,KAAf,CAAJ,EACI,OAAO,KAAP;EACJ,IAAIF,KAAK,CAACE,QAAN,CAAe,KAAf,CAAJ,EACI,OAAO,KAAP;EACJ,IAAIF,KAAK,CAACE,QAAN,CAAe,KAAf,CAAJ,EACI,OAAO,KAAP;EACJ,OAAO,IAAP;AACH;AACD,OAAO,SAASC,KAAT,CAAeH,KAAf,EAAsB;EACzB,OAAOA,KAAK,CAACI,GAAN,CAAWC,OAAD,IAAaC,IAAI,CAACH,KAAL,CAAWE,OAAX,CAAvB,CAAP;AACH;AACD,OAAO,SAASE,YAAT,CAAsBC,GAAtB,EAA2B;EAC9BA,GAAG,GAAGF,IAAI,CAACG,KAAL,CAAWD,GAAX,CAAN;EACA,OAAOA,GAAG,IAAI,GAAP,GAAa,GAAb,GAAmBA,GAAG,GAAG,CAAN,GAAU,CAAV,GAAcA,GAAxC;AACH;AACD,OAAO,SAASE,cAAT,CAAwBC,KAAxB,EAA+B;EAClCA,KAAK,GAAGL,IAAI,CAACG,KAAL,CAAWE,KAAK,GAAG,GAAnB,IAA0B,GAAlC;EACA,OAAOA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAAvC;AACH;AACD,MAAMC,OAAO,GAAG;EACZC,GAAG,EAAE;IACDC,GAAG,CAACC,KAAD,EAAQ;MACP,OAAO5B,YAAY,CAACD,IAAI,CAAC6B,KAAD,CAAL,CAAnB;IACH,CAHA;;IAIDC,GAAG,CAACD,KAAD,EAAQ;MACP,MAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAelC,IAAI,CAAC6B,KAAD,CAAzB;MACA,OAAO3B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACiC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX,EAAsBC,CAAtB,CAAD,CAAnB;IACH,CAPA;;IAQDC,GAAG,CAACN,KAAD,EAAQ;MACP,MAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAelC,IAAI,CAAC6B,KAAD,CAAzB;MACA,OAAO1B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACgC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX,EAAsBC,CAAtB,CAAD,CAAnB;IACH;;EAXA,CADO;EAcZN,GAAG,EAAE;IACDD,GAAG,CAACE,KAAD,EAAQ;MACP,OAAOzB,YAAY,CAACJ,IAAI,CAAC6B,KAAD,CAAL,CAAnB;IACH,CAHA;;IAIDC,GAAG,CAACD,KAAD,EAAQ;MACP,MAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAelC,IAAI,CAAC6B,KAAD,CAAzB;MACA,OAAO3B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACiC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX,EAAsBC,CAAtB,CAAD,CAAnB;IACH,CAPA;;IAQDC,GAAG,CAACN,KAAD,EAAQ;MACP,MAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAelC,IAAI,CAAC6B,KAAD,CAAzB;MACA,OAAO1B,YAAY,CAAC,CAAC,GAAGJ,OAAO,CAACgC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX,EAAsBC,CAAtB,CAAD,CAAnB;IACH;;EAXA,CAdO;EA2BZJ,GAAG,EAAE;IACDF,GAAG,CAACC,KAAD,EAAQ;MACP,MAAM,CAACO,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUJ,CAAV,IAAexC,IAAI,CAACmC,KAAD,CAAzB;MACA,OAAO5B,YAAY,CAAC,CAAC,GAAGR,OAAO,CAAC2C,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX,EAAsBJ,CAAtB,CAAD,CAAnB;IACH,CAJA;;IAKDP,GAAG,CAACE,KAAD,EAAQ;MACP,MAAM,CAACO,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUJ,CAAV,IAAexC,IAAI,CAACmC,KAAD,CAAzB;MACA,OAAOzB,YAAY,CAAC,CAAC,GAAGX,OAAO,CAAC2C,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX,EAAsBJ,CAAtB,CAAD,CAAnB;IACH,CARA;;IASDC,GAAG,CAACN,KAAD,EAAQ;MACP,MAAM,CAACO,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUJ,CAAV,IAAexC,IAAI,CAACmC,KAAD,CAAzB;MACA,OAAO1B,YAAY,CAAC,CAAC,GAAGX,OAAO,CAAC4C,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAX,EAAsBJ,CAAtB,CAAD,CAAnB;IACH;;EAZA,CA3BO;EAyCZC,GAAG,EAAE;IACDP,GAAG,CAACC,KAAD,EAAQ;MACP,MAAM,CAACO,CAAD,EAAIC,CAAJ,EAAOE,CAAP,EAAUL,CAAV,IAAerC,IAAI,CAACgC,KAAD,CAAzB;MACA,OAAO5B,YAAY,CAAC,CAAC,GAAGL,OAAO,CAACwC,CAAD,EAAIC,CAAJ,EAAOE,CAAP,CAAX,EAAsBL,CAAtB,CAAD,CAAnB;IACH,CAJA;;IAKDP,GAAG,CAACE,KAAD,EAAQ;MACP,MAAM,CAACO,CAAD,EAAIC,CAAJ,EAAOE,CAAP,EAAUL,CAAV,IAAerC,IAAI,CAACgC,KAAD,CAAzB;MACA,OAAOzB,YAAY,CAAC,CAAC,GAAGR,OAAO,CAACwC,CAAD,EAAIC,CAAJ,EAAOE,CAAP,CAAX,EAAsBL,CAAtB,CAAD,CAAnB;IACH,CARA;;IASDJ,GAAG,CAACD,KAAD,EAAQ;MACP,MAAM,CAACO,CAAD,EAAIC,CAAJ,EAAOE,CAAP,EAAUL,CAAV,IAAerC,IAAI,CAACgC,KAAD,CAAzB;MACA,OAAO3B,YAAY,CAAC,CAAC,GAAGP,OAAO,CAACyC,CAAD,EAAIC,CAAJ,EAAOE,CAAP,CAAX,EAAsBL,CAAtB,CAAD,CAAnB;IACH;;EAZA;AAzCO,CAAhB,C,CAwDA;;AACA,OAAO,SAASM,YAAT,CAAsBX,KAAtB,EAA6BpB,IAA7B,EAAmCgC,YAAnC,EAAiD;EACpDA,YAAY,GAAGA,YAAY,IAAI5B,gBAAgB,CAACgB,KAAD,CAA/C;EACA,IAAI,CAACY,YAAL,EACI,OAAO,IAAP;EACJ,IAAIA,YAAY,KAAKhC,IAArB,EACI,OAAOoB,KAAP;EACJ,MAAMa,WAAW,GAAGhB,OAAO,CAACe,YAAD,CAA3B;EACA,OAAOC,WAAW,CAACjC,IAAD,CAAX,CAAkBoB,KAAlB,CAAP;AACH"},"metadata":{},"sourceType":"module"}