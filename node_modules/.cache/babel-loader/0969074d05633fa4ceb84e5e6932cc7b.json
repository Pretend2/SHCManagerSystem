{"ast":null,"code":"import { h, ref, computed, inject, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { changeColor } from 'seemly';\nimport { createHoverColor, createPressedColor } from '../../_utils/color/index';\nimport { buttonGroupInjectionKey } from '../../button-group/src/context';\nimport { useRtl } from '../../_mixins/use-rtl';\nimport { isSafari } from '../../_utils/env/browser';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from '../../_internal';\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from '../../_utils';\nimport { buttonLight } from '../styles';\nimport style from './styles/index.cssr';\nexport const buttonProps = Object.assign(Object.assign({}, useTheme.props), {\n  color: String,\n  textColor: String,\n  text: Boolean,\n  block: Boolean,\n  loading: Boolean,\n  disabled: Boolean,\n  circle: Boolean,\n  size: String,\n  ghost: Boolean,\n  round: Boolean,\n  secondary: Boolean,\n  tertiary: Boolean,\n  quaternary: Boolean,\n  strong: Boolean,\n  focusable: {\n    type: Boolean,\n    default: true\n  },\n  keyboard: {\n    type: Boolean,\n    default: true\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  type: {\n    type: String,\n    default: 'default'\n  },\n  dashed: Boolean,\n  iconPlacement: {\n    type: String,\n    default: 'left'\n  },\n  attrType: {\n    type: String,\n    default: 'button'\n  },\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  onClick: [Function, Array],\n  nativeFocusBehavior: {\n    type: Boolean,\n    default: !isSafari\n  }\n});\nconst Button = defineComponent({\n  name: 'Button',\n  props: buttonProps,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        const {\n          dashed,\n          ghost,\n          text,\n          secondary,\n          tertiary,\n          quaternary\n        } = props;\n\n        if ((dashed || ghost || text) && (secondary || tertiary || quaternary)) {\n          warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaterary` props.\");\n        }\n      });\n    }\n\n    const selfElRef = ref(null);\n    const waveElRef = ref(null);\n    const enterPressedRef = ref(false);\n    const showBorderRef = useMemo(() => {\n      return !props.quaternary && !props.tertiary && !props.secondary && !props.text && (!props.color || props.ghost || props.dashed) && props.bordered;\n    });\n    const NButtonGroup = inject(buttonGroupInjectionKey, {});\n    const {\n      mergedSizeRef\n    } = useFormItem({}, {\n      defaultSize: 'medium',\n      mergedSize: NFormItem => {\n        const {\n          size\n        } = props;\n        if (size) return size;\n        const {\n          size: buttonGroupSize\n        } = NButtonGroup;\n        if (buttonGroupSize) return buttonGroupSize;\n        const {\n          mergedSize: formItemSize\n        } = NFormItem || {};\n\n        if (formItemSize) {\n          return formItemSize.value;\n        }\n\n        return 'medium';\n      }\n    });\n    const mergedFocusableRef = computed(() => {\n      return props.focusable && !props.disabled;\n    });\n\n    const handleMousedown = e => {\n      var _a;\n\n      if (!mergedFocusableRef.value) {\n        e.preventDefault();\n      }\n\n      if (props.nativeFocusBehavior) {\n        return;\n      }\n\n      e.preventDefault(); // normally this won't be called if disabled (when tag is button)\n      // if not, we try to make it behave like a button\n\n      if (props.disabled) {\n        return;\n      }\n\n      if (mergedFocusableRef.value) {\n        (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({\n          preventScroll: true\n        });\n      }\n    };\n\n    const handleClick = e => {\n      var _a;\n\n      if (!props.disabled && !props.loading) {\n        const {\n          onClick\n        } = props;\n        if (onClick) call(onClick, e);\n\n        if (!props.text) {\n          (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n        }\n      }\n    };\n\n    const handleKeyup = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard) {\n            return;\n          }\n\n          enterPressedRef.value = false;\n      }\n    };\n\n    const handleKeydown = e => {\n      switch (e.key) {\n        case 'Enter':\n          if (!props.keyboard || props.loading) {\n            e.preventDefault();\n            return;\n          }\n\n          enterPressedRef.value = true;\n      }\n    };\n\n    const handleBlur = () => {\n      enterPressedRef.value = false;\n    };\n\n    const {\n      inlineThemeDisabled,\n      mergedClsPrefixRef,\n      mergedRtlRef\n    } = useConfig(props);\n    const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n    const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const theme = themeRef.value;\n      const {\n        common: {\n          cubicBezierEaseInOut,\n          cubicBezierEaseOut\n        },\n        self\n      } = theme;\n      const {\n        rippleDuration,\n        opacityDisabled,\n        fontWeight,\n        fontWeightStrong\n      } = self;\n      const size = mergedSizeRef.value;\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props; // font\n\n      const fontProps = {\n        'font-weight': strong ? fontWeightStrong : fontWeight\n      }; // color\n\n      let colorProps = {\n        '--n-color': 'initial',\n        '--n-color-hover': 'initial',\n        '--n-color-pressed': 'initial',\n        '--n-color-focus': 'initial',\n        '--n-color-disabled': 'initial',\n        '--n-ripple-color': 'initial',\n        '--n-text-color': 'initial',\n        '--n-text-color-hover': 'initial',\n        '--n-text-color-pressed': 'initial',\n        '--n-text-color-focus': 'initial',\n        '--n-text-color-disabled': 'initial'\n      };\n      const typeIsTertiary = type === 'tertiary';\n      const typeIsDefault = type === 'default';\n      const mergedType = typeIsTertiary ? 'default' : type;\n\n      if (text) {\n        const propTextColor = textColor || color;\n        const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-pressed': propTextColor ? createPressedColor(propTextColor) : self[createKey('textColorTextPressed', mergedType)],\n          '--n-text-color-focus': propTextColor ? createHoverColor(propTextColor) : self[createKey('textColorTextHover', mergedType)],\n          '--n-text-color-disabled': propTextColor || self[createKey('textColorTextDisabled', mergedType)]\n        };\n      } else if (ghost || dashed) {\n        const mergedTextColor = textColor || color;\n        colorProps = {\n          '--n-color': '#0000',\n          '--n-color-hover': '#0000',\n          '--n-color-pressed': '#0000',\n          '--n-color-focus': '#0000',\n          '--n-color-disabled': '#0000',\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n          '--n-text-color-hover': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-pressed': mergedTextColor ? createPressedColor(mergedTextColor) : self[createKey('textColorGhostPressed', mergedType)],\n          '--n-text-color-focus': mergedTextColor ? createHoverColor(mergedTextColor) : self[createKey('textColorGhostHover', mergedType)],\n          '--n-text-color-disabled': mergedTextColor || self[createKey('textColorGhostDisabled', mergedType)]\n        };\n      } else if (secondary) {\n        const typeTextColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedTextColor = color || typeTextColor;\n        const isColoredType = type !== 'default' && type !== 'tertiary';\n        colorProps = {\n          '--n-color': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondary)\n          }) : self.colorSecondary,\n          '--n-color-hover': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-pressed': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryPressed)\n          }) : self.colorSecondaryPressed,\n          '--n-color-focus': isColoredType ? changeColor(mergedTextColor, {\n            alpha: Number(self.colorOpacitySecondaryHover)\n          }) : self.colorSecondaryHover,\n          '--n-color-disabled': self.colorSecondary,\n          '--n-ripple-color': '#0000',\n          '--n-text-color': mergedTextColor,\n          '--n-text-color-hover': mergedTextColor,\n          '--n-text-color-pressed': mergedTextColor,\n          '--n-text-color-focus': mergedTextColor,\n          '--n-text-color-disabled': mergedTextColor\n        };\n      } else if (tertiary || quaternary) {\n        const typeColor = typeIsDefault ? self.textColor : typeIsTertiary ? self.textColorTertiary : self[createKey('color', mergedType)];\n        const mergedColor = color || typeColor;\n\n        if (tertiary) {\n          colorProps['--n-color'] = self.colorTertiary;\n          colorProps['--n-color-hover'] = self.colorTertiaryHover;\n          colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n          colorProps['--n-color-focus'] = self.colorSecondaryHover;\n          colorProps['--n-color-disabled'] = self.colorTertiary;\n        } else {\n          colorProps['--n-color'] = self.colorQuaternary;\n          colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n          colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n          colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n          colorProps['--n-color-disabled'] = self.colorQuaternary;\n        }\n\n        colorProps['--n-ripple-color'] = '#0000';\n        colorProps['--n-text-color'] = mergedColor;\n        colorProps['--n-text-color-hover'] = mergedColor;\n        colorProps['--n-text-color-pressed'] = mergedColor;\n        colorProps['--n-text-color-focus'] = mergedColor;\n        colorProps['--n-text-color-disabled'] = mergedColor;\n      } else {\n        colorProps = {\n          '--n-color': color || self[createKey('color', mergedType)],\n          '--n-color-hover': color ? createHoverColor(color) : self[createKey('colorHover', mergedType)],\n          '--n-color-pressed': color ? createPressedColor(color) : self[createKey('colorPressed', mergedType)],\n          '--n-color-focus': color ? createHoverColor(color) : self[createKey('colorFocus', mergedType)],\n          '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n          '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n          '--n-text-color': textColor || (color ? self.textColorPrimary : typeIsTertiary ? self.textColorTertiary : self[createKey('textColor', mergedType)]),\n          '--n-text-color-hover': textColor || (color ? self.textColorHoverPrimary : self[createKey('textColorHover', mergedType)]),\n          '--n-text-color-pressed': textColor || (color ? self.textColorPressedPrimary : self[createKey('textColorPressed', mergedType)]),\n          '--n-text-color-focus': textColor || (color ? self.textColorFocusPrimary : self[createKey('textColorFocus', mergedType)]),\n          '--n-text-color-disabled': textColor || (color ? self.textColorDisabledPrimary : self[createKey('textColorDisabled', mergedType)])\n        };\n      } // border\n\n\n      let borderProps = {\n        '--n-border': 'initial',\n        '--n-border-hover': 'initial',\n        '--n-border-pressed': 'initial',\n        '--n-border-focus': 'initial',\n        '--n-border-disabled': 'initial'\n      };\n\n      if (text) {\n        borderProps = {\n          '--n-border': 'none',\n          '--n-border-hover': 'none',\n          '--n-border-pressed': 'none',\n          '--n-border-focus': 'none',\n          '--n-border-disabled': 'none'\n        };\n      } else {\n        borderProps = {\n          '--n-border': self[createKey('border', mergedType)],\n          '--n-border-hover': self[createKey('borderHover', mergedType)],\n          '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n          '--n-border-focus': self[createKey('borderFocus', mergedType)],\n          '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n        };\n      } // size\n\n\n      const {\n        [createKey('height', size)]: height,\n        [createKey('fontSize', size)]: fontSize,\n        [createKey('padding', size)]: padding,\n        [createKey('paddingRound', size)]: paddingRound,\n        [createKey('iconSize', size)]: iconSize,\n        [createKey('borderRadius', size)]: borderRadius,\n        [createKey('iconMargin', size)]: iconMargin,\n        waveOpacity\n      } = self;\n      const sizeProps = {\n        '--n-width': circle && !text ? height : 'initial',\n        '--n-height': text ? 'initial' : height,\n        '--n-font-size': fontSize,\n        '--n-padding': circle ? 'initial' : text ? 'initial' : round ? paddingRound : padding,\n        '--n-icon-size': iconSize,\n        '--n-icon-margin': iconMargin,\n        '--n-border-radius': text ? 'initial' : circle || round ? height : borderRadius\n      };\n      return Object.assign(Object.assign(Object.assign(Object.assign({\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-bezier-ease-out': cubicBezierEaseOut,\n        '--n-ripple-duration': rippleDuration,\n        '--n-opacity-disabled': opacityDisabled,\n        '--n-wave-opacity': waveOpacity\n      }, fontProps), colorProps), borderProps), sizeProps);\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('button', computed(() => {\n      let hash = '';\n      const {\n        dashed,\n        type,\n        ghost,\n        text,\n        color,\n        round,\n        circle,\n        textColor,\n        secondary,\n        tertiary,\n        quaternary,\n        strong\n      } = props;\n      if (dashed) hash += 'a';\n      if (ghost) hash += 'b';\n      if (text) hash += 'c';\n      if (round) hash += 'd';\n      if (circle) hash += 'e';\n      if (secondary) hash += 'f';\n      if (tertiary) hash += 'g';\n      if (quaternary) hash += 'h';\n      if (strong) hash += 'i';\n      if (color) hash += 'j' + color2Class(color);\n      if (textColor) hash += 'k' + color2Class(textColor);\n      const {\n        value: size\n      } = mergedSizeRef;\n      hash += 'l' + size[0];\n      hash += 'm' + type[0];\n      return hash;\n    }), cssVarsRef, props) : undefined;\n    return {\n      selfElRef,\n      waveElRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedFocusable: mergedFocusableRef,\n      mergedSize: mergedSizeRef,\n      showBorder: showBorderRef,\n      enterPressed: enterPressedRef,\n      rtlEnabled: rtlEnabledRef,\n      handleMousedown,\n      handleKeydown,\n      handleBlur,\n      handleKeyup,\n      handleClick,\n      customColorCssVars: computed(() => {\n        const {\n          color\n        } = props;\n        if (!color) return null;\n        const hoverColor = createHoverColor(color);\n        return {\n          '--n-border-color': color,\n          '--n-border-color-hover': hoverColor,\n          '--n-border-color-pressed': createPressedColor(color),\n          '--n-border-color-focus': hoverColor,\n          '--n-border-color-disabled': color\n        };\n      }),\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    };\n  },\n\n  render() {\n    const {\n      mergedClsPrefix,\n      tag: Component,\n      onRender\n    } = this;\n    onRender === null || onRender === void 0 ? void 0 : onRender();\n    const children = resolveWrappedSlot(this.$slots.default, children => children && h(\"span\", {\n      class: `${mergedClsPrefix}-button__content`\n    }, children));\n    return h(Component, {\n      ref: \"selfElRef\",\n      class: [this.themeClass, `${mergedClsPrefix}-button`, `${mergedClsPrefix}-button--${this.type}-type`, `${mergedClsPrefix}-button--${this.mergedSize}-type`, this.rtlEnabled && `${mergedClsPrefix}-button--rtl`, this.disabled && `${mergedClsPrefix}-button--disabled`, this.block && `${mergedClsPrefix}-button--block`, this.enterPressed && `${mergedClsPrefix}-button--pressed`, !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`, this.color && `${mergedClsPrefix}-button--color`, this.secondary && `${mergedClsPrefix}-button--secondary`, this.loading && `${mergedClsPrefix}-button--loading`, this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n      ],\n      tabindex: this.mergedFocusable ? 0 : -1,\n      type: this.attrType,\n      style: this.cssVars,\n      disabled: this.disabled,\n      onClick: this.handleClick,\n      onBlur: this.handleBlur,\n      onMousedown: this.handleMousedown,\n      onKeyup: this.handleKeyup,\n      onKeydown: this.handleKeydown\n    }, this.iconPlacement === 'right' && children, h(NFadeInExpandTransition, {\n      width: true\n    }, {\n      default: () => resolveWrappedSlot(this.$slots.icon, children => (this.loading || children) && h(\"span\", {\n        class: `${mergedClsPrefix}-button__icon`,\n        style: {\n          margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n        }\n      }, h(NIconSwitchTransition, null, {\n        default: () => this.loading ? h(NBaseLoading, {\n          clsPrefix: mergedClsPrefix,\n          key: \"loading\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          strokeWidth: 20\n        }) : h(\"div\", {\n          key: \"icon\",\n          class: `${mergedClsPrefix}-icon-slot`,\n          role: \"none\"\n        }, children)\n      })))\n    }), this.iconPlacement === 'left' && children, !this.text ? h(NBaseWave, {\n      ref: \"waveElRef\",\n      clsPrefix: mergedClsPrefix\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__border`,\n      style: this.customColorCssVars\n    }) : null, this.showBorder ? h(\"div\", {\n      \"aria-hidden\": true,\n      class: `${mergedClsPrefix}-button__state-border`,\n      style: this.customColorCssVars\n    }) : null);\n  }\n\n});\nexport default Button; // XButton is for tsx type checking\n// It's not compitable with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\n\nexport const XButton = Button; // Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later","map":{"version":3,"names":["h","ref","computed","inject","defineComponent","watchEffect","useMemo","changeColor","createHoverColor","createPressedColor","buttonGroupInjectionKey","useRtl","isSafari","useConfig","useFormItem","useTheme","useThemeClass","NFadeInExpandTransition","NIconSwitchTransition","NBaseLoading","NBaseWave","call","color2Class","createKey","isSlotEmpty","resolveWrappedSlot","warnOnce","buttonLight","style","buttonProps","Object","assign","props","color","String","textColor","text","Boolean","block","loading","disabled","circle","size","ghost","round","secondary","tertiary","quaternary","strong","focusable","type","default","keyboard","tag","dashed","iconPlacement","attrType","bordered","onClick","Function","Array","nativeFocusBehavior","Button","name","setup","process","env","NODE_ENV","selfElRef","waveElRef","enterPressedRef","showBorderRef","NButtonGroup","mergedSizeRef","defaultSize","mergedSize","NFormItem","buttonGroupSize","formItemSize","value","mergedFocusableRef","handleMousedown","e","_a","preventDefault","focus","preventScroll","handleClick","play","handleKeyup","key","handleKeydown","handleBlur","inlineThemeDisabled","mergedClsPrefixRef","mergedRtlRef","themeRef","rtlEnabledRef","cssVarsRef","theme","common","cubicBezierEaseInOut","cubicBezierEaseOut","self","rippleDuration","opacityDisabled","fontWeight","fontWeightStrong","fontProps","colorProps","typeIsTertiary","typeIsDefault","mergedType","propTextColor","mergedTextColor","typeTextColor","textColorTertiary","isColoredType","alpha","Number","colorOpacitySecondary","colorSecondary","colorOpacitySecondaryHover","colorSecondaryHover","colorOpacitySecondaryPressed","colorSecondaryPressed","typeColor","mergedColor","colorTertiary","colorTertiaryHover","colorTertiaryPressed","colorQuaternary","colorQuaternaryHover","colorQuaternaryPressed","textColorPrimary","textColorHoverPrimary","textColorPressedPrimary","textColorFocusPrimary","textColorDisabledPrimary","borderProps","height","fontSize","padding","paddingRound","iconSize","borderRadius","iconMargin","waveOpacity","sizeProps","themeClassHandle","hash","undefined","mergedClsPrefix","mergedFocusable","showBorder","enterPressed","rtlEnabled","customColorCssVars","hoverColor","cssVars","themeClass","onRender","render","Component","children","$slots","class","tabindex","onBlur","onMousedown","onKeyup","onKeydown","width","icon","margin","clsPrefix","strokeWidth","role","XButton"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/button/src/Button.js"],"sourcesContent":["import { h, ref, computed, inject, defineComponent, watchEffect } from 'vue';\nimport { useMemo } from 'vooks';\nimport { changeColor } from 'seemly';\nimport { createHoverColor, createPressedColor } from '../../_utils/color/index';\nimport { buttonGroupInjectionKey } from '../../button-group/src/context';\nimport { useRtl } from '../../_mixins/use-rtl';\nimport { isSafari } from '../../_utils/env/browser';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NFadeInExpandTransition, NIconSwitchTransition, NBaseLoading, NBaseWave } from '../../_internal';\nimport { call, color2Class, createKey, isSlotEmpty, resolveWrappedSlot, warnOnce } from '../../_utils';\nimport { buttonLight } from '../styles';\nimport style from './styles/index.cssr';\nexport const buttonProps = Object.assign(Object.assign({}, useTheme.props), { color: String, textColor: String, text: Boolean, block: Boolean, loading: Boolean, disabled: Boolean, circle: Boolean, size: String, ghost: Boolean, round: Boolean, secondary: Boolean, tertiary: Boolean, quaternary: Boolean, strong: Boolean, focusable: {\n        type: Boolean,\n        default: true\n    }, keyboard: {\n        type: Boolean,\n        default: true\n    }, tag: {\n        type: String,\n        default: 'button'\n    }, type: {\n        type: String,\n        default: 'default'\n    }, dashed: Boolean, iconPlacement: {\n        type: String,\n        default: 'left'\n    }, attrType: {\n        type: String,\n        default: 'button'\n    }, bordered: {\n        type: Boolean,\n        default: true\n    }, onClick: [Function, Array], nativeFocusBehavior: {\n        type: Boolean,\n        default: !isSafari\n    } });\nconst Button = defineComponent({\n    name: 'Button',\n    props: buttonProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                const { dashed, ghost, text, secondary, tertiary, quaternary } = props;\n                if ((dashed || ghost || text) &&\n                    (secondary || tertiary || quaternary)) {\n                    warnOnce('button', \"`dashed`, `ghost` and `text` props can't be used along with `secondary`, `tertiary` and `quaterary` props.\");\n                }\n            });\n        }\n        const selfElRef = ref(null);\n        const waveElRef = ref(null);\n        const enterPressedRef = ref(false);\n        const showBorderRef = useMemo(() => {\n            return (!props.quaternary &&\n                !props.tertiary &&\n                !props.secondary &&\n                !props.text &&\n                (!props.color || props.ghost || props.dashed) &&\n                props.bordered);\n        });\n        const NButtonGroup = inject(buttonGroupInjectionKey, {});\n        const { mergedSizeRef } = useFormItem({}, {\n            defaultSize: 'medium',\n            mergedSize: (NFormItem) => {\n                const { size } = props;\n                if (size)\n                    return size;\n                const { size: buttonGroupSize } = NButtonGroup;\n                if (buttonGroupSize)\n                    return buttonGroupSize;\n                const { mergedSize: formItemSize } = NFormItem || {};\n                if (formItemSize) {\n                    return formItemSize.value;\n                }\n                return 'medium';\n            }\n        });\n        const mergedFocusableRef = computed(() => {\n            return props.focusable && !props.disabled;\n        });\n        const handleMousedown = (e) => {\n            var _a;\n            if (!mergedFocusableRef.value) {\n                e.preventDefault();\n            }\n            if (props.nativeFocusBehavior) {\n                return;\n            }\n            e.preventDefault();\n            // normally this won't be called if disabled (when tag is button)\n            // if not, we try to make it behave like a button\n            if (props.disabled) {\n                return;\n            }\n            if (mergedFocusableRef.value) {\n                (_a = selfElRef.value) === null || _a === void 0 ? void 0 : _a.focus({ preventScroll: true });\n            }\n        };\n        const handleClick = (e) => {\n            var _a;\n            if (!props.disabled && !props.loading) {\n                const { onClick } = props;\n                if (onClick)\n                    call(onClick, e);\n                if (!props.text) {\n                    (_a = waveElRef.value) === null || _a === void 0 ? void 0 : _a.play();\n                }\n            }\n        };\n        const handleKeyup = (e) => {\n            switch (e.key) {\n                case 'Enter':\n                    if (!props.keyboard) {\n                        return;\n                    }\n                    enterPressedRef.value = false;\n            }\n        };\n        const handleKeydown = (e) => {\n            switch (e.key) {\n                case 'Enter':\n                    if (!props.keyboard || props.loading) {\n                        e.preventDefault();\n                        return;\n                    }\n                    enterPressedRef.value = true;\n            }\n        };\n        const handleBlur = () => {\n            enterPressedRef.value = false;\n        };\n        const { inlineThemeDisabled, mergedClsPrefixRef, mergedRtlRef } = useConfig(props);\n        const themeRef = useTheme('Button', '-button', style, buttonLight, props, mergedClsPrefixRef);\n        const rtlEnabledRef = useRtl('Button', mergedRtlRef, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const theme = themeRef.value;\n            const { common: { cubicBezierEaseInOut, cubicBezierEaseOut }, self } = theme;\n            const { rippleDuration, opacityDisabled, fontWeight, fontWeightStrong } = self;\n            const size = mergedSizeRef.value;\n            const { dashed, type, ghost, text, color, round, circle, textColor, secondary, tertiary, quaternary, strong } = props;\n            // font\n            const fontProps = {\n                'font-weight': strong ? fontWeightStrong : fontWeight\n            };\n            // color\n            let colorProps = {\n                '--n-color': 'initial',\n                '--n-color-hover': 'initial',\n                '--n-color-pressed': 'initial',\n                '--n-color-focus': 'initial',\n                '--n-color-disabled': 'initial',\n                '--n-ripple-color': 'initial',\n                '--n-text-color': 'initial',\n                '--n-text-color-hover': 'initial',\n                '--n-text-color-pressed': 'initial',\n                '--n-text-color-focus': 'initial',\n                '--n-text-color-disabled': 'initial'\n            };\n            const typeIsTertiary = type === 'tertiary';\n            const typeIsDefault = type === 'default';\n            const mergedType = typeIsTertiary ? 'default' : type;\n            if (text) {\n                const propTextColor = textColor || color;\n                const mergedTextColor = propTextColor || self[createKey('textColorText', mergedType)];\n                colorProps = {\n                    '--n-color': '#0000',\n                    '--n-color-hover': '#0000',\n                    '--n-color-pressed': '#0000',\n                    '--n-color-focus': '#0000',\n                    '--n-color-disabled': '#0000',\n                    '--n-ripple-color': '#0000',\n                    '--n-text-color': mergedTextColor,\n                    '--n-text-color-hover': propTextColor\n                        ? createHoverColor(propTextColor)\n                        : self[createKey('textColorTextHover', mergedType)],\n                    '--n-text-color-pressed': propTextColor\n                        ? createPressedColor(propTextColor)\n                        : self[createKey('textColorTextPressed', mergedType)],\n                    '--n-text-color-focus': propTextColor\n                        ? createHoverColor(propTextColor)\n                        : self[createKey('textColorTextHover', mergedType)],\n                    '--n-text-color-disabled': propTextColor ||\n                        self[createKey('textColorTextDisabled', mergedType)]\n                };\n            }\n            else if (ghost || dashed) {\n                const mergedTextColor = textColor || color;\n                colorProps = {\n                    '--n-color': '#0000',\n                    '--n-color-hover': '#0000',\n                    '--n-color-pressed': '#0000',\n                    '--n-color-focus': '#0000',\n                    '--n-color-disabled': '#0000',\n                    '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n                    '--n-text-color': mergedTextColor || self[createKey('textColorGhost', mergedType)],\n                    '--n-text-color-hover': mergedTextColor\n                        ? createHoverColor(mergedTextColor)\n                        : self[createKey('textColorGhostHover', mergedType)],\n                    '--n-text-color-pressed': mergedTextColor\n                        ? createPressedColor(mergedTextColor)\n                        : self[createKey('textColorGhostPressed', mergedType)],\n                    '--n-text-color-focus': mergedTextColor\n                        ? createHoverColor(mergedTextColor)\n                        : self[createKey('textColorGhostHover', mergedType)],\n                    '--n-text-color-disabled': mergedTextColor ||\n                        self[createKey('textColorGhostDisabled', mergedType)]\n                };\n            }\n            else if (secondary) {\n                const typeTextColor = typeIsDefault\n                    ? self.textColor\n                    : typeIsTertiary\n                        ? self.textColorTertiary\n                        : self[createKey('color', mergedType)];\n                const mergedTextColor = color || typeTextColor;\n                const isColoredType = type !== 'default' && type !== 'tertiary';\n                colorProps = {\n                    '--n-color': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondary)\n                        })\n                        : self.colorSecondary,\n                    '--n-color-hover': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryHover)\n                        })\n                        : self.colorSecondaryHover,\n                    '--n-color-pressed': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryPressed)\n                        })\n                        : self.colorSecondaryPressed,\n                    '--n-color-focus': isColoredType\n                        ? changeColor(mergedTextColor, {\n                            alpha: Number(self.colorOpacitySecondaryHover)\n                        })\n                        : self.colorSecondaryHover,\n                    '--n-color-disabled': self.colorSecondary,\n                    '--n-ripple-color': '#0000',\n                    '--n-text-color': mergedTextColor,\n                    '--n-text-color-hover': mergedTextColor,\n                    '--n-text-color-pressed': mergedTextColor,\n                    '--n-text-color-focus': mergedTextColor,\n                    '--n-text-color-disabled': mergedTextColor\n                };\n            }\n            else if (tertiary || quaternary) {\n                const typeColor = typeIsDefault\n                    ? self.textColor\n                    : typeIsTertiary\n                        ? self.textColorTertiary\n                        : self[createKey('color', mergedType)];\n                const mergedColor = color || typeColor;\n                if (tertiary) {\n                    colorProps['--n-color'] = self.colorTertiary;\n                    colorProps['--n-color-hover'] = self.colorTertiaryHover;\n                    colorProps['--n-color-pressed'] = self.colorTertiaryPressed;\n                    colorProps['--n-color-focus'] = self.colorSecondaryHover;\n                    colorProps['--n-color-disabled'] = self.colorTertiary;\n                }\n                else {\n                    colorProps['--n-color'] = self.colorQuaternary;\n                    colorProps['--n-color-hover'] = self.colorQuaternaryHover;\n                    colorProps['--n-color-pressed'] = self.colorQuaternaryPressed;\n                    colorProps['--n-color-focus'] = self.colorQuaternaryHover;\n                    colorProps['--n-color-disabled'] = self.colorQuaternary;\n                }\n                colorProps['--n-ripple-color'] = '#0000';\n                colorProps['--n-text-color'] = mergedColor;\n                colorProps['--n-text-color-hover'] = mergedColor;\n                colorProps['--n-text-color-pressed'] = mergedColor;\n                colorProps['--n-text-color-focus'] = mergedColor;\n                colorProps['--n-text-color-disabled'] = mergedColor;\n            }\n            else {\n                colorProps = {\n                    '--n-color': color || self[createKey('color', mergedType)],\n                    '--n-color-hover': color\n                        ? createHoverColor(color)\n                        : self[createKey('colorHover', mergedType)],\n                    '--n-color-pressed': color\n                        ? createPressedColor(color)\n                        : self[createKey('colorPressed', mergedType)],\n                    '--n-color-focus': color\n                        ? createHoverColor(color)\n                        : self[createKey('colorFocus', mergedType)],\n                    '--n-color-disabled': color || self[createKey('colorDisabled', mergedType)],\n                    '--n-ripple-color': color || self[createKey('rippleColor', mergedType)],\n                    '--n-text-color': textColor ||\n                        (color\n                            ? self.textColorPrimary\n                            : typeIsTertiary\n                                ? self.textColorTertiary\n                                : self[createKey('textColor', mergedType)]),\n                    '--n-text-color-hover': textColor ||\n                        (color\n                            ? self.textColorHoverPrimary\n                            : self[createKey('textColorHover', mergedType)]),\n                    '--n-text-color-pressed': textColor ||\n                        (color\n                            ? self.textColorPressedPrimary\n                            : self[createKey('textColorPressed', mergedType)]),\n                    '--n-text-color-focus': textColor ||\n                        (color\n                            ? self.textColorFocusPrimary\n                            : self[createKey('textColorFocus', mergedType)]),\n                    '--n-text-color-disabled': textColor ||\n                        (color\n                            ? self.textColorDisabledPrimary\n                            : self[createKey('textColorDisabled', mergedType)])\n                };\n            }\n            // border\n            let borderProps = {\n                '--n-border': 'initial',\n                '--n-border-hover': 'initial',\n                '--n-border-pressed': 'initial',\n                '--n-border-focus': 'initial',\n                '--n-border-disabled': 'initial'\n            };\n            if (text) {\n                borderProps = {\n                    '--n-border': 'none',\n                    '--n-border-hover': 'none',\n                    '--n-border-pressed': 'none',\n                    '--n-border-focus': 'none',\n                    '--n-border-disabled': 'none'\n                };\n            }\n            else {\n                borderProps = {\n                    '--n-border': self[createKey('border', mergedType)],\n                    '--n-border-hover': self[createKey('borderHover', mergedType)],\n                    '--n-border-pressed': self[createKey('borderPressed', mergedType)],\n                    '--n-border-focus': self[createKey('borderFocus', mergedType)],\n                    '--n-border-disabled': self[createKey('borderDisabled', mergedType)]\n                };\n            }\n            // size\n            const { [createKey('height', size)]: height, [createKey('fontSize', size)]: fontSize, [createKey('padding', size)]: padding, [createKey('paddingRound', size)]: paddingRound, [createKey('iconSize', size)]: iconSize, [createKey('borderRadius', size)]: borderRadius, [createKey('iconMargin', size)]: iconMargin, waveOpacity } = self;\n            const sizeProps = {\n                '--n-width': circle && !text ? height : 'initial',\n                '--n-height': text ? 'initial' : height,\n                '--n-font-size': fontSize,\n                '--n-padding': circle\n                    ? 'initial'\n                    : text\n                        ? 'initial'\n                        : round\n                            ? paddingRound\n                            : padding,\n                '--n-icon-size': iconSize,\n                '--n-icon-margin': iconMargin,\n                '--n-border-radius': text\n                    ? 'initial'\n                    : circle || round\n                        ? height\n                        : borderRadius\n            };\n            return Object.assign(Object.assign(Object.assign(Object.assign({ '--n-bezier': cubicBezierEaseInOut, '--n-bezier-ease-out': cubicBezierEaseOut, '--n-ripple-duration': rippleDuration, '--n-opacity-disabled': opacityDisabled, '--n-wave-opacity': waveOpacity }, fontProps), colorProps), borderProps), sizeProps);\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('button', computed(() => {\n                let hash = '';\n                const { dashed, type, ghost, text, color, round, circle, textColor, secondary, tertiary, quaternary, strong } = props;\n                if (dashed)\n                    hash += 'a';\n                if (ghost)\n                    hash += 'b';\n                if (text)\n                    hash += 'c';\n                if (round)\n                    hash += 'd';\n                if (circle)\n                    hash += 'e';\n                if (secondary)\n                    hash += 'f';\n                if (tertiary)\n                    hash += 'g';\n                if (quaternary)\n                    hash += 'h';\n                if (strong)\n                    hash += 'i';\n                if (color)\n                    hash += 'j' + color2Class(color);\n                if (textColor)\n                    hash += 'k' + color2Class(textColor);\n                const { value: size } = mergedSizeRef;\n                hash += 'l' + size[0];\n                hash += 'm' + type[0];\n                return hash;\n            }), cssVarsRef, props)\n            : undefined;\n        return {\n            selfElRef,\n            waveElRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedFocusable: mergedFocusableRef,\n            mergedSize: mergedSizeRef,\n            showBorder: showBorderRef,\n            enterPressed: enterPressedRef,\n            rtlEnabled: rtlEnabledRef,\n            handleMousedown,\n            handleKeydown,\n            handleBlur,\n            handleKeyup,\n            handleClick,\n            customColorCssVars: computed(() => {\n                const { color } = props;\n                if (!color)\n                    return null;\n                const hoverColor = createHoverColor(color);\n                return {\n                    '--n-border-color': color,\n                    '--n-border-color-hover': hoverColor,\n                    '--n-border-color-pressed': createPressedColor(color),\n                    '--n-border-color-focus': hoverColor,\n                    '--n-border-color-disabled': color\n                };\n            }),\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        const { mergedClsPrefix, tag: Component, onRender } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        const children = resolveWrappedSlot(this.$slots.default, (children) => children && (h(\"span\", { class: `${mergedClsPrefix}-button__content` }, children)));\n        return (h(Component, { ref: \"selfElRef\", class: [\n                this.themeClass,\n                `${mergedClsPrefix}-button`,\n                `${mergedClsPrefix}-button--${this.type}-type`,\n                `${mergedClsPrefix}-button--${this.mergedSize}-type`,\n                this.rtlEnabled && `${mergedClsPrefix}-button--rtl`,\n                this.disabled && `${mergedClsPrefix}-button--disabled`,\n                this.block && `${mergedClsPrefix}-button--block`,\n                this.enterPressed && `${mergedClsPrefix}-button--pressed`,\n                !this.text && this.dashed && `${mergedClsPrefix}-button--dashed`,\n                this.color && `${mergedClsPrefix}-button--color`,\n                this.secondary && `${mergedClsPrefix}-button--secondary`,\n                this.loading && `${mergedClsPrefix}-button--loading`,\n                this.ghost && `${mergedClsPrefix}-button--ghost` // required for button group border collapse\n            ], tabindex: this.mergedFocusable ? 0 : -1, type: this.attrType, style: this.cssVars, disabled: this.disabled, onClick: this.handleClick, onBlur: this.handleBlur, onMousedown: this.handleMousedown, onKeyup: this.handleKeyup, onKeydown: this.handleKeydown },\n            this.iconPlacement === 'right' && children,\n            h(NFadeInExpandTransition, { width: true }, {\n                default: () => resolveWrappedSlot(this.$slots.icon, (children) => (this.loading || children) && (h(\"span\", { class: `${mergedClsPrefix}-button__icon`, style: {\n                        margin: isSlotEmpty(this.$slots.default) ? '0' : ''\n                    } },\n                    h(NIconSwitchTransition, null, {\n                        default: () => this.loading ? (h(NBaseLoading, { clsPrefix: mergedClsPrefix, key: \"loading\", class: `${mergedClsPrefix}-icon-slot`, strokeWidth: 20 })) : (h(\"div\", { key: \"icon\", class: `${mergedClsPrefix}-icon-slot`, role: \"none\" }, children))\n                    }))))\n            }),\n            this.iconPlacement === 'left' && children,\n            !this.text ? (h(NBaseWave, { ref: \"waveElRef\", clsPrefix: mergedClsPrefix })) : null,\n            this.showBorder ? (h(\"div\", { \"aria-hidden\": true, class: `${mergedClsPrefix}-button__border`, style: this.customColorCssVars })) : null,\n            this.showBorder ? (h(\"div\", { \"aria-hidden\": true, class: `${mergedClsPrefix}-button__state-border`, style: this.customColorCssVars })) : null));\n    }\n});\nexport default Button;\n// XButton is for tsx type checking\n// It's not compitable with render function `h`\n// Currently we don't expose it as public\n// If there's any issue about this, we may expose it\n// Since most people use template, the type checking phase doesn't work as tsx\nexport const XButton = Button;\n// Also, we may make XButton a generic type which support `tag` prop\n// but currently vue doesn't export IntrinsicElementAttributes from runtime-dom\n// so we can't easily make an attr map by hand\n// just leave it for later\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}