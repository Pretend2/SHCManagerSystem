{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-174942ba\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"s-canvas\"\n};\nconst _hoisted_2 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    id: \"s-canvas\",\n    width: _ctx.contentWidth,\n    height: _ctx.contentHeight\n  }, null, 8, _hoisted_2)]);\n}","map":{"version":3,"mappings":";;;;;EACSA,KAAK,EAAC;;;;uBAAXC,oBAEM,KAFN,cAEM,CADFC,oBAA6E,QAA7E,EAA6E;IAArEC,EAAE,EAAC,UAAkE;IAAtDC,KAAK,EAAEC,iBAA+C;IAAhCC,MAAM,EAAED;EAAwB,CAA7E,sBACE,CAFN","names":["class","_createElementBlock","_createElementVNode","id","width","_ctx","height"],"sourceRoot":"","sources":["E:\\VCode\\SHC社区管理系统\\shc_community_manager_system\\src\\components\\ImageCode.vue"],"sourcesContent":["<template>\r\n    <div class=\"s-canvas\">\r\n        <canvas id=\"s-canvas\" :width=\"contentWidth\" :height=\"contentHeight\"></canvas>\r\n    </div>\r\n</template>\r\n<script>\r\nimport md5 from 'md5'\r\nimport {\r\n    toRefs,\r\n    onMounted,\r\n    watch,\r\n    defineComponent\r\n} from 'vue'\r\n\r\nexport default defineComponent({\r\n    name: 'imageCode',\r\n    props: {\r\n        change: { // 刷新验证码使用\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        contentWidth: { // 验证码图片宽\r\n            type: Number,\r\n            default: 112\r\n        },\r\n        contentHeight: { // 验证码图片高\r\n            type: Number,\r\n            default: 34\r\n        }\r\n    },\r\n    emits: [\"getCode\"], // 返回验证码加密正确值的函数\r\n    setup(props, context) {\r\n        // 默认值 \r\n        const defaultData = {\r\n            identifyCode: '', // 验证码值，未加密的\r\n            identifyCodes: '1234567890ABCDEFGHIJKMLNOPQRSTUVWSYZ', // 生成验证码的元素，可以加入字母\r\n            fontSizeMin: 30, // 图片上验证文字的最小值\r\n            fontSizeMax: 40, // 图片上验证文字的最小值\r\n            backgroundColorMin: 180, // 图片背景色值最小\r\n            backgroundColorMax: 240, // 图片背景色值最大\r\n            colorMin: 50, // 文字色值最小\r\n            colorMax: 160, // 文字色值最大\r\n            lineColorMin: 40, // 干扰线色值最小\r\n            lineColorMax: 120, // 干扰线色值最大\r\n            dotColorMin: 0, // 干扰点色值最小\r\n            dotColorMax: 255, // 干扰点色值最大\r\n            lineSum: 4, // 干扰线数量\r\n            dotSum: 10, // 干扰点数量\r\n        }\r\n        // 父级传递\r\n        const {\r\n            contentWidth,\r\n            contentHeight,\r\n            change\r\n        } = toRefs(props)\r\n\r\n        // 生成一个随机数\r\n        const randomNum = (min, max) => {\r\n            return Math.floor(Math.random() * (max - min) + min)\r\n        }\r\n\r\n        // 生成一个随机的颜色\r\n        const randomColor = (min, max) => {\r\n            let r = randomNum(min, max)\r\n            let g = randomNum(min, max)\r\n            let b = randomNum(min, max)\r\n            return 'rgb(' + r + ',' + g + ',' + b + ')'\r\n        }\r\n\r\n        // 创建图形\r\n        const drawPic = () => {\r\n            let canvas = document.getElementById('s-canvas')\r\n            let ctx = canvas.getContext('2d')\r\n            ctx.textBaseline = 'bottom'\r\n            // 绘制背景\r\n            ctx.fillStyle = randomColor(defaultData.backgroundColorMin, defaultData.backgroundColorMax)\r\n            ctx.fillRect(0, 0, contentWidth.value, contentHeight.value)\r\n            // 绘制文字\r\n            for (let i = 0; i < defaultData.identifyCode.length; i++) {\r\n                drawText(ctx, defaultData.identifyCode[i], i)\r\n            }\r\n            drawLine(ctx)\r\n            drawDot(ctx)\r\n        }\r\n\r\n        // 绘制文字\r\n        const drawText = (ctx, txt, i) => {\r\n            ctx.fillStyle = randomColor(defaultData.colorMin, defaultData.colorMax)\r\n            ctx.font = randomNum(defaultData.fontSizeMin, defaultData.fontSizeMax) + 'px SimHei'\r\n            let x = (i + 1) * (contentWidth.value / (defaultData.identifyCode.length + 1))\r\n            let y = randomNum(defaultData.fontSizeMax, contentHeight.value - 5)\r\n            var deg = randomNum(-15, 15)\r\n            // 修改坐标原点和旋转角度\r\n            ctx.translate(x, y)\r\n            ctx.rotate(deg * Math.PI / 180)\r\n            ctx.fillText(txt, 0, 0)\r\n            // 恢复坐标原点和旋转角度\r\n            ctx.rotate(-deg * Math.PI / 180)\r\n            ctx.translate(-x, -y)\r\n        }\r\n\r\n        // 绘制干扰线\r\n        const drawLine = (ctx) => {\r\n            for (let i = 0; i < 4; i++) {\r\n                ctx.strokeStyle = randomColor(defaultData.lineColorMin, defaultData.lineColorMax)\r\n                ctx.beginPath()\r\n                ctx.moveTo(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value))\r\n                ctx.lineTo(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value))\r\n                ctx.stroke()\r\n            }\r\n        }\r\n        // 绘制干扰点\r\n        const drawDot = (ctx) => {\r\n            for (let i = 0; i < 60; i++) {\r\n                ctx.fillStyle = randomColor(0, 255)\r\n                ctx.beginPath()\r\n                ctx.arc(randomNum(0, contentWidth.value), randomNum(0, contentHeight.value), 1, 0, 2 * Math\r\n                    .PI)\r\n                ctx.fill()\r\n            }\r\n        }\r\n\r\n        // 生成图片\r\n        const makeCode = () => {\r\n            defaultData.identifyCode = \"\";\r\n            for (let i = 0; i < 4; i++) {\r\n                defaultData.identifyCode += defaultData.identifyCodes[randomNum(0, defaultData.identifyCodes.length)];\r\n            }\r\n\r\n            // 绘制图片\r\n            drawPic()\r\n            // 返回加密后的图片验证码值\r\n            context.emit('getCode', md5(defaultData.identifyCode))\r\n        }\r\n\r\n        // 初识函数，生成图片 \r\n        onMounted(() => {\r\n            makeCode()\r\n        })\r\n\r\n        // 监听change变化，重新生成图片\r\n        watch(change, () => {\r\n            makeCode()\r\n        })\r\n\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.s-canvas {\r\n    height: 34px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}