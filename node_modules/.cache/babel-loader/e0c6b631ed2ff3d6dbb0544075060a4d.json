{"ast":null,"code":"import { defineComponent, h, computed } from 'vue';\nimport { hsv2rgb, hsva, toRgbaString } from 'seemly';\nimport { convertColor, getModeFromValue } from './utils';\nimport { warn } from '../../_utils'; // Try to normalize the color values to ensure that they are valid CSS colors\n\nfunction normalizeColor(color, mode) {\n  if (mode === 'hsv') {\n    const [h, s, v, a] = hsva(color);\n    return toRgbaString([...hsv2rgb(h, s, v), a]);\n  } // For the mode that is not in preset, we keep the original value.\n  // For color names, they are legal to CSS, so we don’t deal with them,\n  // and only standardize them when outputting.\n\n\n  return color;\n}\n\nfunction getHexFromName(color) {\n  const ctx = document.createElement('canvas').getContext('2d');\n  ctx.fillStyle = color;\n  return ctx.fillStyle;\n}\n\nexport default defineComponent({\n  name: 'ColorPickerSwatches',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    swatches: {\n      type: Array,\n      required: true\n    },\n    onUpdateColor: {\n      type: Function,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const parsedSwatchesRef = computed(() => props.swatches.map(value => {\n      const mode = getModeFromValue(value);\n      return {\n        value,\n        mode,\n        legalValue: normalizeColor(value, mode)\n      };\n    }));\n\n    function normalizeOutput(parsed) {\n      const {\n        mode: modeProp\n      } = props;\n      let {\n        value,\n        mode: swatchColorMode\n      } = parsed; // color name is converted to hex\n\n      if (!swatchColorMode) {\n        swatchColorMode = 'hex';\n\n        if (/^[a-zA-Z]+$/.test(value)) {\n          value = getHexFromName(value);\n        } else {\n          // for invalid color, we make it black\n          warn('color-picker', `color ${value} in swatches is invalid.`);\n          value = '#000000';\n        }\n      }\n\n      if (swatchColorMode === modeProp) return value; // swatch value to current mode value\n\n      return convertColor(value, modeProp, swatchColorMode);\n    }\n\n    function handleSwatchSelect(parsed) {\n      props.onUpdateColor(normalizeOutput(parsed));\n    }\n\n    function handleSwatchKeyDown(e, parsed) {\n      if (e.key === 'Enter') handleSwatchSelect(parsed);\n    }\n\n    return {\n      parsedSwatchesRef,\n      handleSwatchSelect,\n      handleSwatchKeyDown\n    };\n  },\n\n  render() {\n    const {\n      clsPrefix\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatches`\n    }, this.parsedSwatchesRef.map(swatch => h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatch`,\n      tabindex: 0,\n      onClick: () => this.handleSwatchSelect(swatch),\n      onKeydown: e => this.handleSwatchKeyDown(e, swatch)\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-swatch__fill`,\n      style: {\n        background: swatch.legalValue\n      }\n    }))));\n  }\n\n});","map":{"version":3,"names":["defineComponent","h","computed","hsv2rgb","hsva","toRgbaString","convertColor","getModeFromValue","warn","normalizeColor","color","mode","s","v","a","getHexFromName","ctx","document","createElement","getContext","fillStyle","name","props","clsPrefix","type","String","required","swatches","Array","onUpdateColor","Function","setup","parsedSwatchesRef","map","value","legalValue","normalizeOutput","parsed","modeProp","swatchColorMode","test","handleSwatchSelect","handleSwatchKeyDown","e","key","render","class","swatch","tabindex","onClick","onKeydown","style","background"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/color-picker/src/ColorPickerSwatches.js"],"sourcesContent":["import { defineComponent, h, computed } from 'vue';\nimport { hsv2rgb, hsva, toRgbaString } from 'seemly';\nimport { convertColor, getModeFromValue } from './utils';\nimport { warn } from '../../_utils';\n// Try to normalize the color values to ensure that they are valid CSS colors\nfunction normalizeColor(color, mode) {\n    if (mode === 'hsv') {\n        const [h, s, v, a] = hsva(color);\n        return toRgbaString([...hsv2rgb(h, s, v), a]);\n    }\n    // For the mode that is not in preset, we keep the original value.\n    // For color names, they are legal to CSS, so we don’t deal with them,\n    // and only standardize them when outputting.\n    return color;\n}\nfunction getHexFromName(color) {\n    const ctx = document\n        .createElement('canvas')\n        .getContext('2d');\n    ctx.fillStyle = color;\n    return ctx.fillStyle;\n}\nexport default defineComponent({\n    name: 'ColorPickerSwatches',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        mode: {\n            type: String,\n            required: true\n        },\n        swatches: {\n            type: Array,\n            required: true\n        },\n        onUpdateColor: {\n            type: Function,\n            required: true\n        }\n    },\n    setup(props) {\n        const parsedSwatchesRef = computed(() => props.swatches.map((value) => {\n            const mode = getModeFromValue(value);\n            return {\n                value,\n                mode,\n                legalValue: normalizeColor(value, mode)\n            };\n        }));\n        function normalizeOutput(parsed) {\n            const { mode: modeProp } = props;\n            let { value, mode: swatchColorMode } = parsed;\n            // color name is converted to hex\n            if (!swatchColorMode) {\n                swatchColorMode = 'hex';\n                if (/^[a-zA-Z]+$/.test(value)) {\n                    value = getHexFromName(value);\n                }\n                else {\n                    // for invalid color, we make it black\n                    warn('color-picker', `color ${value} in swatches is invalid.`);\n                    value = '#000000';\n                }\n            }\n            if (swatchColorMode === modeProp)\n                return value;\n            // swatch value to current mode value\n            return convertColor(value, modeProp, swatchColorMode);\n        }\n        function handleSwatchSelect(parsed) {\n            props.onUpdateColor(normalizeOutput(parsed));\n        }\n        function handleSwatchKeyDown(e, parsed) {\n            if (e.key === 'Enter')\n                handleSwatchSelect(parsed);\n        }\n        return {\n            parsedSwatchesRef,\n            handleSwatchSelect,\n            handleSwatchKeyDown\n        };\n    },\n    render() {\n        const { clsPrefix } = this;\n        return (h(\"div\", { class: `${clsPrefix}-color-picker-swatches` }, this.parsedSwatchesRef.map((swatch) => (h(\"div\", { class: `${clsPrefix}-color-picker-swatch`, tabindex: 0, onClick: () => this.handleSwatchSelect(swatch), onKeydown: (e) => this.handleSwatchKeyDown(e, swatch) },\n            h(\"div\", { class: `${clsPrefix}-color-picker-swatch__fill`, style: { background: swatch.legalValue } }))))));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}