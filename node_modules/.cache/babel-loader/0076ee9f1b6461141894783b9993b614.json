{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\n/**\n * The original package is https://www.npmjs.com/package/textarea-caret-ts\n * The original file is https://github.com/TheRealSyler/textarea-caret-position/blob/master/index.ts\n *\n * Here I modified it to make it works when input is scrolled.\n */\nimport { isBrowser } from '../../_utils';\n/**\n * Returns the Absolute (relative to the inner window size) position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\n\nexport function getAbsolutePosition(element) {\n  const caretRelPost = getRelativePosition(element);\n  return {\n    left: window.scrollX + element.getBoundingClientRect().left + caretRelPost.left,\n    top: window.scrollY + element.getBoundingClientRect().top + caretRelPost.top,\n    absolute: true,\n    height: caretRelPost.height\n  };\n}\n/**\n * Returns the relative position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\n\nexport function getRelativePosition(element, options = {\n  debug: false,\n  useSelectionEnd: false,\n  checkWidthOverflow: true\n}) {\n  const selectionStart = element.selectionStart !== null ? element.selectionStart : 0;\n  const selectionEnd = element.selectionEnd !== null ? element.selectionEnd : 0;\n  const position = options.useSelectionEnd ? selectionEnd : selectionStart; // We'll copy the properties below into the mirror div.\n  // Note that some browsers, such as Firefox, do not concatenate properties\n  // into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n  // so we have to list every single property explicitly.\n\n  const properties = ['direction', 'boxSizing', 'width', 'height', 'overflowX', 'overflowY', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'borderStyle', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing', 'tabSize', 'MozTabSize']; // Firefox 1.0+\n\n  const isFirefox = navigator.userAgent.toLowerCase().includes('firefox');\n\n  if (!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretPosition should only be called in a browser');\n  }\n\n  const debug = options === null || options === void 0 ? void 0 : options.debug;\n\n  if (debug) {\n    const el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if (el === null || el === void 0 ? void 0 : el.parentNode) el.parentNode.removeChild(el);\n  } // The mirror div will replicate the textareas style\n\n\n  const div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n  const style = div.style;\n  const computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle; // currentStyle for IE < 9\n\n  const isInput = element.nodeName === 'INPUT'; // Default textarea styles\n\n  style.whiteSpace = isInput ? 'nowrap' : 'pre-wrap';\n  if (!isInput) style.wordWrap = 'break-word'; // only for textarea-s\n  // Position off-screen\n\n  style.position = 'absolute'; // required to return coordinates properly\n\n  if (!debug) style.visibility = 'hidden'; // not 'display: none' because we want rendering\n  // Transfer the element's properties to the div\n\n  properties.forEach(prop => {\n    if (isInput && prop === 'lineHeight') {\n      // Special case for <input>s because text is rendered centered and line height may be != height\n      if (computed.boxSizing === 'border-box') {\n        const height = parseInt(computed.height);\n        const outerHeight = parseInt(computed.paddingTop) + parseInt(computed.paddingBottom) + parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth);\n        const targetHeight = outerHeight + parseInt(computed.lineHeight);\n\n        if (height > targetHeight) {\n          style.lineHeight = `${height - outerHeight}px`;\n        } else if (height === targetHeight) {\n          style.lineHeight = computed.lineHeight;\n        } else {\n          style.lineHeight = '0';\n        }\n      } else {\n        style.lineHeight = computed.height;\n      }\n    } else {\n      style[prop] = computed[prop];\n    }\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height)) {\n      style.overflowY = 'scroll';\n    }\n  } else {\n    style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position); // The second special handling for input type=\"text\" vs textarea:\n  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n\n  if (isInput && div.textContent) {\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n  }\n\n  const span = document.createElement('span'); // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textareas content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n\n  span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n\n  span.style.position = 'relative';\n  span.style.left = `${-element.scrollLeft}px`;\n  span.style.top = `${-element.scrollTop}px`;\n  div.appendChild(span);\n  const relativePosition = {\n    top: span.offsetTop + parseInt(computed.borderTopWidth),\n    left: span.offsetLeft + parseInt(computed.borderLeftWidth),\n    absolute: false,\n    // We don't use line-height since it may be too large for position. Eg. 34px\n    // for input\n    height: parseInt(computed.fontSize) * 1.5\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n\n  if (relativePosition.left >= element.clientWidth && options.checkWidthOverflow) {\n    relativePosition.left = element.clientWidth;\n  }\n\n  return relativePosition;\n}\n/**\n * sets the top and left css style of the element based on the absolute position of the caretElements caret,\n * @param offset offsets the position.\n * @param detectBoundary offsets the position if the position would be outside the window.\n * @param returnOnly if true the element position wont be set.\n */\n\nexport function setElementPositionBasedOnCaret(element, caretElement, offset = {\n  top: 0,\n  left: 0\n}, margin = 2, detectBoundary = true, returnOnly = false) {\n  const pos = getAbsolutePosition(caretElement);\n\n  if (detectBoundary) {\n    pos.left = pos.left + (element.clientWidth + margin) + offset.left > window.scrollX + window.innerWidth ? pos.left = window.scrollX + window.innerWidth - (element.clientWidth + margin) : pos.left += offset.left;\n    pos.top = pos.top + (element.clientWidth + margin) + offset.top > window.scrollY + window.innerHeight ? pos.top -= element.clientWidth + margin : pos.top += offset.top;\n  } else {\n    pos.top += offset.top;\n    pos.left += offset.left;\n  }\n\n  if (!returnOnly) {\n    element.style.top = `${pos.top}px`;\n    element.style.left = `${pos.left}px`;\n  }\n\n  return pos;\n}","map":{"version":3,"names":["isBrowser","getAbsolutePosition","element","caretRelPost","getRelativePosition","left","window","scrollX","getBoundingClientRect","top","scrollY","absolute","height","options","debug","useSelectionEnd","checkWidthOverflow","selectionStart","selectionEnd","position","properties","isFirefox","navigator","userAgent","toLowerCase","includes","Error","el","document","querySelector","parentNode","removeChild","div","createElement","id","body","appendChild","style","computed","getComputedStyle","currentStyle","isInput","nodeName","whiteSpace","wordWrap","visibility","forEach","prop","boxSizing","parseInt","outerHeight","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","targetHeight","lineHeight","scrollHeight","overflowY","overflow","textContent","value","substring","replace","span","scrollLeft","scrollTop","relativePosition","offsetTop","offsetLeft","borderLeftWidth","fontSize","backgroundColor","clientWidth","setElementPositionBasedOnCaret","caretElement","offset","margin","detectBoundary","returnOnly","pos","innerWidth","innerHeight"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/mention/src/utils.js"],"sourcesContent":["/**\n * The original package is https://www.npmjs.com/package/textarea-caret-ts\n * The original file is https://github.com/TheRealSyler/textarea-caret-position/blob/master/index.ts\n *\n * Here I modified it to make it works when input is scrolled.\n */\nimport { isBrowser } from '../../_utils';\n/**\n * Returns the Absolute (relative to the inner window size) position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\nexport function getAbsolutePosition(element) {\n    const caretRelPost = getRelativePosition(element);\n    return {\n        left: window.scrollX + element.getBoundingClientRect().left + caretRelPost.left,\n        top: window.scrollY + element.getBoundingClientRect().top + caretRelPost.top,\n        absolute: true,\n        height: caretRelPost.height\n    };\n}\n/**\n * Returns the relative position of the caret in the given element.\n * @param element Input (has to be type='text') or Text Area.\n */\nexport function getRelativePosition(element, options = {\n    debug: false,\n    useSelectionEnd: false,\n    checkWidthOverflow: true\n}) {\n    const selectionStart = element.selectionStart !== null ? element.selectionStart : 0;\n    const selectionEnd = element.selectionEnd !== null ? element.selectionEnd : 0;\n    const position = options.useSelectionEnd ? selectionEnd : selectionStart;\n    // We'll copy the properties below into the mirror div.\n    // Note that some browsers, such as Firefox, do not concatenate properties\n    // into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n    // so we have to list every single property explicitly.\n    const properties = [\n        'direction',\n        'boxSizing',\n        'width',\n        'height',\n        'overflowX',\n        'overflowY',\n        'borderTopWidth',\n        'borderRightWidth',\n        'borderBottomWidth',\n        'borderLeftWidth',\n        'borderStyle',\n        'paddingTop',\n        'paddingRight',\n        'paddingBottom',\n        'paddingLeft',\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n        'fontStyle',\n        'fontVariant',\n        'fontWeight',\n        'fontStretch',\n        'fontSize',\n        'fontSizeAdjust',\n        'lineHeight',\n        'fontFamily',\n        'textAlign',\n        'textTransform',\n        'textIndent',\n        'textDecoration',\n        'letterSpacing',\n        'wordSpacing',\n        'tabSize',\n        'MozTabSize'\n    ];\n    // Firefox 1.0+\n    const isFirefox = navigator.userAgent.toLowerCase().includes('firefox');\n    if (!isBrowser) {\n        throw new Error('textarea-caret-position#getCaretPosition should only be called in a browser');\n    }\n    const debug = options === null || options === void 0 ? void 0 : options.debug;\n    if (debug) {\n        const el = document.querySelector('#input-textarea-caret-position-mirror-div');\n        if (el === null || el === void 0 ? void 0 : el.parentNode)\n            el.parentNode.removeChild(el);\n    }\n    // The mirror div will replicate the textareas style\n    const div = document.createElement('div');\n    div.id = 'input-textarea-caret-position-mirror-div';\n    document.body.appendChild(div);\n    const style = div.style;\n    const computed = window.getComputedStyle\n        ? window.getComputedStyle(element)\n        : element.currentStyle; // currentStyle for IE < 9\n    const isInput = element.nodeName === 'INPUT';\n    // Default textarea styles\n    style.whiteSpace = isInput ? 'nowrap' : 'pre-wrap';\n    if (!isInput)\n        style.wordWrap = 'break-word'; // only for textarea-s\n    // Position off-screen\n    style.position = 'absolute'; // required to return coordinates properly\n    if (!debug)\n        style.visibility = 'hidden'; // not 'display: none' because we want rendering\n    // Transfer the element's properties to the div\n    properties.forEach((prop) => {\n        if (isInput && prop === 'lineHeight') {\n            // Special case for <input>s because text is rendered centered and line height may be != height\n            if (computed.boxSizing === 'border-box') {\n                const height = parseInt(computed.height);\n                const outerHeight = parseInt(computed.paddingTop) +\n                    parseInt(computed.paddingBottom) +\n                    parseInt(computed.borderTopWidth) +\n                    parseInt(computed.borderBottomWidth);\n                const targetHeight = outerHeight + parseInt(computed.lineHeight);\n                if (height > targetHeight) {\n                    style.lineHeight = `${height - outerHeight}px`;\n                }\n                else if (height === targetHeight) {\n                    style.lineHeight = computed.lineHeight;\n                }\n                else {\n                    style.lineHeight = '0';\n                }\n            }\n            else {\n                style.lineHeight = computed.height;\n            }\n        }\n        else {\n            style[prop] = computed[prop];\n        }\n    });\n    if (isFirefox) {\n        // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n        if (element.scrollHeight > parseInt(computed.height)) {\n            style.overflowY = 'scroll';\n        }\n    }\n    else {\n        style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n    }\n    div.textContent = element.value.substring(0, position);\n    // The second special handling for input type=\"text\" vs textarea:\n    // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n    if (isInput && div.textContent) {\n        div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n    }\n    const span = document.createElement('span');\n    // Wrapping must be replicated *exactly*, including when a long word gets\n    // onto the next line, with whitespace at the end of the line before (#7).\n    // The  *only* reliable way to do that is to copy the *entire* rest of the\n    // textareas content into the <span> created at the caret position.\n    // For inputs, just '.' would be enough, but no need to bother.\n    span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n    span.style.position = 'relative';\n    span.style.left = `${-element.scrollLeft}px`;\n    span.style.top = `${-element.scrollTop}px`;\n    div.appendChild(span);\n    const relativePosition = {\n        top: span.offsetTop + parseInt(computed.borderTopWidth),\n        left: span.offsetLeft + parseInt(computed.borderLeftWidth),\n        absolute: false,\n        // We don't use line-height since it may be too large for position. Eg. 34px\n        // for input\n        height: parseInt(computed.fontSize) * 1.5\n    };\n    if (debug) {\n        span.style.backgroundColor = '#aaa';\n    }\n    else {\n        document.body.removeChild(div);\n    }\n    if (relativePosition.left >= element.clientWidth &&\n        options.checkWidthOverflow) {\n        relativePosition.left = element.clientWidth;\n    }\n    return relativePosition;\n}\n/**\n * sets the top and left css style of the element based on the absolute position of the caretElements caret,\n * @param offset offsets the position.\n * @param detectBoundary offsets the position if the position would be outside the window.\n * @param returnOnly if true the element position wont be set.\n */\nexport function setElementPositionBasedOnCaret(element, caretElement, offset = { top: 0, left: 0 }, margin = 2, detectBoundary = true, returnOnly = false) {\n    const pos = getAbsolutePosition(caretElement);\n    if (detectBoundary) {\n        pos.left =\n            pos.left + (element.clientWidth + margin) + offset.left >\n                window.scrollX + window.innerWidth\n                ? (pos.left =\n                    window.scrollX + window.innerWidth - (element.clientWidth + margin))\n                : (pos.left += offset.left);\n        pos.top =\n            pos.top + (element.clientWidth + margin) + offset.top >\n                window.scrollY + window.innerHeight\n                ? (pos.top -= element.clientWidth + margin)\n                : (pos.top += offset.top);\n    }\n    else {\n        pos.top += offset.top;\n        pos.left += offset.left;\n    }\n    if (!returnOnly) {\n        element.style.top = `${pos.top}px`;\n        element.style.left = `${pos.left}px`;\n    }\n    return pos;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}