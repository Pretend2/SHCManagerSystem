{"ast":null,"code":"import tzParseTimezone from '../_lib/tzParseTimezone/index.js';\nimport toDate from '../toDate/index.js';\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\n\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options);\n  var offsetMilliseconds = tzParseTimezone(timeZone, date, true);\n  var d = new Date(date.getTime() - offsetMilliseconds);\n  var resultDate = new Date(0);\n  resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n  resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n  return resultDate;\n}","map":{"version":3,"names":["tzParseTimezone","toDate","utcToZonedTime","dirtyDate","timeZone","options","date","offsetMilliseconds","d","Date","getTime","resultDate","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/date-fns-tz/esm/utcToZonedTime/index.js"],"sourcesContent":["import tzParseTimezone from '../_lib/tzParseTimezone/index.js'\nimport toDate from '../toDate/index.js'\n\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options)\n\n  var offsetMilliseconds = tzParseTimezone(timeZone, date, true)\n\n  var d = new Date(date.getTime() - offsetMilliseconds)\n\n  var resultDate = new Date(0)\n\n  resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate())\n\n  resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds())\n\n  return resultDate\n}\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,kCAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,OAA7C,EAAsD;EACnE,IAAIC,IAAI,GAAGL,MAAM,CAACE,SAAD,EAAYE,OAAZ,CAAjB;EAEA,IAAIE,kBAAkB,GAAGP,eAAe,CAACI,QAAD,EAAWE,IAAX,EAAiB,IAAjB,CAAxC;EAEA,IAAIE,CAAC,GAAG,IAAIC,IAAJ,CAASH,IAAI,CAACI,OAAL,KAAiBH,kBAA1B,CAAR;EAEA,IAAII,UAAU,GAAG,IAAIF,IAAJ,CAAS,CAAT,CAAjB;EAEAE,UAAU,CAACC,WAAX,CAAuBJ,CAAC,CAACK,cAAF,EAAvB,EAA2CL,CAAC,CAACM,WAAF,EAA3C,EAA4DN,CAAC,CAACO,UAAF,EAA5D;EAEAJ,UAAU,CAACK,QAAX,CAAoBR,CAAC,CAACS,WAAF,EAApB,EAAqCT,CAAC,CAACU,aAAF,EAArC,EAAwDV,CAAC,CAACW,aAAF,EAAxD,EAA2EX,CAAC,CAACY,kBAAF,EAA3E;EAEA,OAAOT,UAAP;AACD"},"metadata":{},"sourceType":"module"}