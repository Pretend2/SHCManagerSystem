{"ast":null,"code":"import { h, defineComponent } from 'vue';\nimport { NBaseIcon } from '../../_internal';\nimport { SuccessIcon, ErrorIcon, WarningIcon, InfoIcon } from '../../_internal/icons';\nconst iconMap = {\n  success: h(SuccessIcon, null),\n  error: h(ErrorIcon, null),\n  warning: h(WarningIcon, null),\n  info: h(InfoIcon, null)\n};\nexport default defineComponent({\n  name: 'ProgressCircle',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    status: {\n      type: String,\n      required: true\n    },\n    strokeWidth: {\n      type: Number,\n      required: true\n    },\n    fillColor: String,\n    railColor: String,\n    railStyle: [String, Object],\n    percentage: {\n      type: Number,\n      default: 0\n    },\n    offsetDegree: {\n      type: Number,\n      default: 0\n    },\n    showIndicator: {\n      type: Boolean,\n      required: true\n    },\n    indicatorTextColor: String,\n    unit: String,\n    viewBoxWidth: {\n      type: Number,\n      required: true\n    },\n    gapDegree: {\n      type: Number,\n      required: true\n    },\n    gapOffsetDegree: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  setup(props, {\n    slots\n  }) {\n    function getPathStyles(percent, offsetDegree, strokeColor) {\n      const {\n        gapDegree,\n        viewBoxWidth,\n        strokeWidth\n      } = props;\n      const radius = 50;\n      const beginPositionX = 0;\n      const beginPositionY = radius;\n      const endPositionX = 0;\n      const endPositionY = 2 * radius;\n      const centerX = 50 + strokeWidth / 2;\n      const pathString = `M ${centerX},${centerX} m ${beginPositionX},${beginPositionY}\n      a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n      a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n      const len = Math.PI * 2 * radius;\n      const pathStyle = {\n        stroke: strokeColor,\n        strokeDasharray: `${percent / 100 * (len - gapDegree)}px ${viewBoxWidth * 8}px`,\n        strokeDashoffset: `-${gapDegree / 2}px`,\n        transformOrigin: offsetDegree ? 'center' : undefined,\n        transform: offsetDegree ? `rotate(${offsetDegree}deg)` : undefined\n      };\n      return {\n        pathString,\n        pathStyle\n      };\n    }\n\n    return () => {\n      const {\n        fillColor,\n        railColor,\n        strokeWidth,\n        offsetDegree,\n        status,\n        percentage,\n        showIndicator,\n        indicatorTextColor,\n        unit,\n        gapOffsetDegree,\n        clsPrefix\n      } = props;\n      const {\n        pathString: railPathString,\n        pathStyle: railPathStyle\n      } = getPathStyles(100, 0, railColor);\n      const {\n        pathString: fillPathString,\n        pathStyle: fillPathStyle\n      } = getPathStyles(percentage, offsetDegree, fillColor);\n      const viewBoxSize = 100 + strokeWidth;\n      return h(\"div\", {\n        class: `${clsPrefix}-progress-content`,\n        role: \"none\"\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph`,\n        \"aria-hidden\": true\n      }, h(\"div\", {\n        class: `${clsPrefix}-progress-graph-circle`,\n        style: {\n          transform: gapOffsetDegree ? `rotate(${gapOffsetDegree}deg)` : undefined\n        }\n      }, h(\"svg\", {\n        viewBox: `0 0 ${viewBoxSize} ${viewBoxSize}`\n      }, h(\"g\", null, h(\"path\", {\n        class: `${clsPrefix}-progress-graph-circle-rail`,\n        d: railPathString,\n        \"stroke-width\": strokeWidth,\n        \"stroke-linecap\": \"round\",\n        fill: \"none\",\n        style: railPathStyle\n      })), h(\"g\", null, h(\"path\", {\n        class: [`${clsPrefix}-progress-graph-circle-fill`, percentage === 0 && `${clsPrefix}-progress-graph-circle-fill--empty`],\n        d: fillPathString,\n        \"stroke-width\": strokeWidth,\n        \"stroke-linecap\": \"round\",\n        fill: \"none\",\n        style: fillPathStyle\n      }))))), showIndicator ? h(\"div\", null, slots.default ? h(\"div\", {\n        class: `${clsPrefix}-progress-custom-content`,\n        role: \"none\"\n      }, slots.default()) : status !== 'default' ? h(\"div\", {\n        class: `${clsPrefix}-progress-icon`,\n        \"aria-hidden\": true\n      }, h(NBaseIcon, {\n        clsPrefix: clsPrefix\n      }, {\n        default: () => iconMap[status]\n      })) : h(\"div\", {\n        class: `${clsPrefix}-progress-text`,\n        style: {\n          color: indicatorTextColor\n        },\n        role: \"none\"\n      }, h(\"span\", {\n        class: `${clsPrefix}-progress-text__percentage`\n      }, percentage), h(\"span\", {\n        class: `${clsPrefix}-progress-text__unit`\n      }, unit))) : null);\n    };\n  }\n\n});","map":{"version":3,"names":["h","defineComponent","NBaseIcon","SuccessIcon","ErrorIcon","WarningIcon","InfoIcon","iconMap","success","error","warning","info","name","props","clsPrefix","type","String","required","status","strokeWidth","Number","fillColor","railColor","railStyle","Object","percentage","default","offsetDegree","showIndicator","Boolean","indicatorTextColor","unit","viewBoxWidth","gapDegree","gapOffsetDegree","setup","slots","getPathStyles","percent","strokeColor","radius","beginPositionX","beginPositionY","endPositionX","endPositionY","centerX","pathString","len","Math","PI","pathStyle","stroke","strokeDasharray","strokeDashoffset","transformOrigin","undefined","transform","railPathString","railPathStyle","fillPathString","fillPathStyle","viewBoxSize","class","role","style","viewBox","d","fill","color"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/progress/src/Circle.js"],"sourcesContent":["import { h, defineComponent } from 'vue';\nimport { NBaseIcon } from '../../_internal';\nimport { SuccessIcon, ErrorIcon, WarningIcon, InfoIcon } from '../../_internal/icons';\nconst iconMap = {\n    success: h(SuccessIcon, null),\n    error: h(ErrorIcon, null),\n    warning: h(WarningIcon, null),\n    info: h(InfoIcon, null)\n};\nexport default defineComponent({\n    name: 'ProgressCircle',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        status: {\n            type: String,\n            required: true\n        },\n        strokeWidth: {\n            type: Number,\n            required: true\n        },\n        fillColor: String,\n        railColor: String,\n        railStyle: [String, Object],\n        percentage: {\n            type: Number,\n            default: 0\n        },\n        offsetDegree: {\n            type: Number,\n            default: 0\n        },\n        showIndicator: {\n            type: Boolean,\n            required: true\n        },\n        indicatorTextColor: String,\n        unit: String,\n        viewBoxWidth: {\n            type: Number,\n            required: true\n        },\n        gapDegree: {\n            type: Number,\n            required: true\n        },\n        gapOffsetDegree: {\n            type: Number,\n            default: 0\n        }\n    },\n    setup(props, { slots }) {\n        function getPathStyles(percent, offsetDegree, strokeColor) {\n            const { gapDegree, viewBoxWidth, strokeWidth } = props;\n            const radius = 50;\n            const beginPositionX = 0;\n            const beginPositionY = radius;\n            const endPositionX = 0;\n            const endPositionY = 2 * radius;\n            const centerX = 50 + strokeWidth / 2;\n            const pathString = `M ${centerX},${centerX} m ${beginPositionX},${beginPositionY}\n      a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n      a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n            const len = Math.PI * 2 * radius;\n            const pathStyle = {\n                stroke: strokeColor,\n                strokeDasharray: `${(percent / 100) * (len - gapDegree)}px ${viewBoxWidth * 8}px`,\n                strokeDashoffset: `-${gapDegree / 2}px`,\n                transformOrigin: offsetDegree ? 'center' : undefined,\n                transform: offsetDegree ? `rotate(${offsetDegree}deg)` : undefined\n            };\n            return {\n                pathString,\n                pathStyle\n            };\n        }\n        return () => {\n            const { fillColor, railColor, strokeWidth, offsetDegree, status, percentage, showIndicator, indicatorTextColor, unit, gapOffsetDegree, clsPrefix } = props;\n            const { pathString: railPathString, pathStyle: railPathStyle } = getPathStyles(100, 0, railColor);\n            const { pathString: fillPathString, pathStyle: fillPathStyle } = getPathStyles(percentage, offsetDegree, fillColor);\n            const viewBoxSize = 100 + strokeWidth;\n            return (h(\"div\", { class: `${clsPrefix}-progress-content`, role: \"none\" },\n                h(\"div\", { class: `${clsPrefix}-progress-graph`, \"aria-hidden\": true },\n                    h(\"div\", { class: `${clsPrefix}-progress-graph-circle`, style: {\n                            transform: gapOffsetDegree\n                                ? `rotate(${gapOffsetDegree}deg)`\n                                : undefined\n                        } },\n                        h(\"svg\", { viewBox: `0 0 ${viewBoxSize} ${viewBoxSize}` },\n                            h(\"g\", null,\n                                h(\"path\", { class: `${clsPrefix}-progress-graph-circle-rail`, d: railPathString, \"stroke-width\": strokeWidth, \"stroke-linecap\": \"round\", fill: \"none\", style: railPathStyle })),\n                            h(\"g\", null,\n                                h(\"path\", { class: [\n                                        `${clsPrefix}-progress-graph-circle-fill`,\n                                        percentage === 0 &&\n                                            `${clsPrefix}-progress-graph-circle-fill--empty`\n                                    ], d: fillPathString, \"stroke-width\": strokeWidth, \"stroke-linecap\": \"round\", fill: \"none\", style: fillPathStyle }))))),\n                showIndicator ? (h(\"div\", null, slots.default ? (h(\"div\", { class: `${clsPrefix}-progress-custom-content`, role: \"none\" }, slots.default())) : status !== 'default' ? (h(\"div\", { class: `${clsPrefix}-progress-icon`, \"aria-hidden\": true },\n                    h(NBaseIcon, { clsPrefix: clsPrefix }, {\n                        default: () => iconMap[status]\n                    }))) : (h(\"div\", { class: `${clsPrefix}-progress-text`, style: {\n                        color: indicatorTextColor\n                    }, role: \"none\" },\n                    h(\"span\", { class: `${clsPrefix}-progress-text__percentage` }, percentage),\n                    h(\"span\", { class: `${clsPrefix}-progress-text__unit` }, unit))))) : null));\n        };\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}