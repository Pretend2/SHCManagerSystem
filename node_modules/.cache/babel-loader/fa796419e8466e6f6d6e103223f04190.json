{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { toRef, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { call, warn } from '../../_utils'; // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nexport function useExpand(props, treeMateRef) {\n  const renderExpandRef = useMemo(() => {\n    for (const col of props.columns) {\n      if (col.type === 'expand') {\n        if (process.env.NODE_ENV !== 'production' && !col.renderExpand) {\n          warn('data-table', 'column with type `expand` has no `renderExpand` prop.');\n        }\n\n        return col.renderExpand;\n      }\n    }\n  });\n  const expandableRef = useMemo(() => {\n    // It's not reactive\n    let expandable;\n\n    for (const col of props.columns) {\n      if (col.type === 'expand') {\n        expandable = col.expandable;\n        break;\n      }\n    }\n\n    return expandable;\n  });\n  const uncontrolledExpandedRowKeysRef = ref(props.defaultExpandAll ? (renderExpandRef === null || renderExpandRef === void 0 ? void 0 : renderExpandRef.value) ? (() => {\n    const expandedKeys = [];\n    treeMateRef.value.treeNodes.forEach(tmNode => {\n      var _a;\n\n      if ((_a = expandableRef.value) === null || _a === void 0 ? void 0 : _a.call(expandableRef, tmNode.rawNode)) {\n        expandedKeys.push(tmNode.key);\n      }\n    });\n    return expandedKeys;\n  })() : treeMateRef.value.getNonLeafKeys() : props.defaultExpandedRowKeys);\n  const controlledExpandedRowKeysRef = toRef(props, 'expandedRowKeys');\n  const stickyExpandedRowsRef = toRef(props, 'stickyExpandedRows');\n  const mergedExpandedRowKeysRef = useMergedState(controlledExpandedRowKeysRef, uncontrolledExpandedRowKeysRef);\n\n  function doUpdateExpandedRowKeys(expandedKeys) {\n    const {\n      onUpdateExpandedRowKeys,\n      'onUpdate:expandedRowKeys': _onUpdateExpandedRowKeys\n    } = props;\n\n    if (onUpdateExpandedRowKeys) {\n      call(onUpdateExpandedRowKeys, expandedKeys);\n    }\n\n    if (_onUpdateExpandedRowKeys) {\n      call(_onUpdateExpandedRowKeys, expandedKeys);\n    }\n\n    uncontrolledExpandedRowKeysRef.value = expandedKeys;\n  }\n\n  return {\n    stickyExpandedRowsRef,\n    mergedExpandedRowKeysRef,\n    renderExpandRef,\n    expandableRef,\n    doUpdateExpandedRowKeys\n  };\n}","map":{"version":3,"names":["toRef","ref","useMemo","useMergedState","call","warn","useExpand","props","treeMateRef","renderExpandRef","col","columns","type","process","env","NODE_ENV","renderExpand","expandableRef","expandable","uncontrolledExpandedRowKeysRef","defaultExpandAll","value","expandedKeys","treeNodes","forEach","tmNode","_a","rawNode","push","key","getNonLeafKeys","defaultExpandedRowKeys","controlledExpandedRowKeysRef","stickyExpandedRowsRef","mergedExpandedRowKeysRef","doUpdateExpandedRowKeys","onUpdateExpandedRowKeys","_onUpdateExpandedRowKeys"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/data-table/src/use-expand.js"],"sourcesContent":["import { toRef, ref } from 'vue';\nimport { useMemo, useMergedState } from 'vooks';\nimport { call, warn } from '../../_utils';\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function useExpand(props, treeMateRef) {\n    const renderExpandRef = useMemo(() => {\n        for (const col of props.columns) {\n            if (col.type === 'expand') {\n                if (process.env.NODE_ENV !== 'production' && !col.renderExpand) {\n                    warn('data-table', 'column with type `expand` has no `renderExpand` prop.');\n                }\n                return col.renderExpand;\n            }\n        }\n    });\n    const expandableRef = useMemo(() => {\n        // It's not reactive\n        let expandable;\n        for (const col of props.columns) {\n            if (col.type === 'expand') {\n                expandable = col.expandable;\n                break;\n            }\n        }\n        return expandable;\n    });\n    const uncontrolledExpandedRowKeysRef = ref(props.defaultExpandAll\n        ? (renderExpandRef === null || renderExpandRef === void 0 ? void 0 : renderExpandRef.value)\n            ? (() => {\n                const expandedKeys = [];\n                treeMateRef.value.treeNodes.forEach((tmNode) => {\n                    var _a;\n                    if ((_a = expandableRef.value) === null || _a === void 0 ? void 0 : _a.call(expandableRef, tmNode.rawNode)) {\n                        expandedKeys.push(tmNode.key);\n                    }\n                });\n                return expandedKeys;\n            })()\n            : treeMateRef.value.getNonLeafKeys()\n        : props.defaultExpandedRowKeys);\n    const controlledExpandedRowKeysRef = toRef(props, 'expandedRowKeys');\n    const stickyExpandedRowsRef = toRef(props, 'stickyExpandedRows');\n    const mergedExpandedRowKeysRef = useMergedState(controlledExpandedRowKeysRef, uncontrolledExpandedRowKeysRef);\n    function doUpdateExpandedRowKeys(expandedKeys) {\n        const { onUpdateExpandedRowKeys, 'onUpdate:expandedRowKeys': _onUpdateExpandedRowKeys } = props;\n        if (onUpdateExpandedRowKeys) {\n            call(onUpdateExpandedRowKeys, expandedKeys);\n        }\n        if (_onUpdateExpandedRowKeys) {\n            call(_onUpdateExpandedRowKeys, expandedKeys);\n        }\n        uncontrolledExpandedRowKeysRef.value = expandedKeys;\n    }\n    return {\n        stickyExpandedRowsRef,\n        mergedExpandedRowKeysRef,\n        renderExpandRef,\n        expandableRef,\n        doUpdateExpandedRowKeys\n    };\n}\n"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,GAAhB,QAA2B,KAA3B;AACA,SAASC,OAAT,EAAkBC,cAAlB,QAAwC,OAAxC;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,cAA3B,C,CACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,WAA1B,EAAuC;EAC1C,MAAMC,eAAe,GAAGP,OAAO,CAAC,MAAM;IAClC,KAAK,MAAMQ,GAAX,IAAkBH,KAAK,CAACI,OAAxB,EAAiC;MAC7B,IAAID,GAAG,CAACE,IAAJ,KAAa,QAAjB,EAA2B;QACvB,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACL,GAAG,CAACM,YAAlD,EAAgE;UAC5DX,IAAI,CAAC,YAAD,EAAe,uDAAf,CAAJ;QACH;;QACD,OAAOK,GAAG,CAACM,YAAX;MACH;IACJ;EACJ,CAT8B,CAA/B;EAUA,MAAMC,aAAa,GAAGf,OAAO,CAAC,MAAM;IAChC;IACA,IAAIgB,UAAJ;;IACA,KAAK,MAAMR,GAAX,IAAkBH,KAAK,CAACI,OAAxB,EAAiC;MAC7B,IAAID,GAAG,CAACE,IAAJ,KAAa,QAAjB,EAA2B;QACvBM,UAAU,GAAGR,GAAG,CAACQ,UAAjB;QACA;MACH;IACJ;;IACD,OAAOA,UAAP;EACH,CAV4B,CAA7B;EAWA,MAAMC,8BAA8B,GAAGlB,GAAG,CAACM,KAAK,CAACa,gBAAN,GACrC,CAACX,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACY,KAAnF,IACI,CAAC,MAAM;IACL,MAAMC,YAAY,GAAG,EAArB;IACAd,WAAW,CAACa,KAAZ,CAAkBE,SAAlB,CAA4BC,OAA5B,CAAqCC,MAAD,IAAY;MAC5C,IAAIC,EAAJ;;MACA,IAAI,CAACA,EAAE,GAAGT,aAAa,CAACI,KAApB,MAA+B,IAA/B,IAAuCK,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACtB,IAAH,CAAQa,aAAR,EAAuBQ,MAAM,CAACE,OAA9B,CAApE,EAA4G;QACxGL,YAAY,CAACM,IAAb,CAAkBH,MAAM,CAACI,GAAzB;MACH;IACJ,CALD;IAMA,OAAOP,YAAP;EACH,CATC,GADJ,GAWId,WAAW,CAACa,KAAZ,CAAkBS,cAAlB,EAZiC,GAarCvB,KAAK,CAACwB,sBAb8B,CAA1C;EAcA,MAAMC,4BAA4B,GAAGhC,KAAK,CAACO,KAAD,EAAQ,iBAAR,CAA1C;EACA,MAAM0B,qBAAqB,GAAGjC,KAAK,CAACO,KAAD,EAAQ,oBAAR,CAAnC;EACA,MAAM2B,wBAAwB,GAAG/B,cAAc,CAAC6B,4BAAD,EAA+Bb,8BAA/B,CAA/C;;EACA,SAASgB,uBAAT,CAAiCb,YAAjC,EAA+C;IAC3C,MAAM;MAAEc,uBAAF;MAA2B,4BAA4BC;IAAvD,IAAoF9B,KAA1F;;IACA,IAAI6B,uBAAJ,EAA6B;MACzBhC,IAAI,CAACgC,uBAAD,EAA0Bd,YAA1B,CAAJ;IACH;;IACD,IAAIe,wBAAJ,EAA8B;MAC1BjC,IAAI,CAACiC,wBAAD,EAA2Bf,YAA3B,CAAJ;IACH;;IACDH,8BAA8B,CAACE,KAA/B,GAAuCC,YAAvC;EACH;;EACD,OAAO;IACHW,qBADG;IAEHC,wBAFG;IAGHzB,eAHG;IAIHQ,aAJG;IAKHkB;EALG,CAAP;AAOH"},"metadata":{},"sourceType":"module"}