{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCheckedKeys } from './check';\nimport { toArray, isDisabled, isLeaf, isGroup, isNodeInvalid, unwrapCheckedKeys, isShallowLoaded, unwrapIndeterminateKeys, getNonLeafKeys, isIgnored, defaultGetChildren, defaultGetKey } from './utils';\nimport { getPath } from './path';\nimport { moveMethods, getFirstAvailableNode } from './move';\nimport { flatten } from './flatten';\nimport { contains } from './contains';\n\nfunction createTreeNodes(rawNodes, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren, parent = null, level = 0) {\n  const treeNodes = [];\n  rawNodes.forEach((rawNode, index) => {\n    var _a;\n\n    if (process.env.NODE_ENV !== 'production' && isNodeInvalid(rawNode, getChildren)) {\n      console.error('[treemate]: node', rawNode, 'is invalid');\n    }\n\n    const treeNode = Object.create(nodeProto);\n    treeNode.rawNode = rawNode;\n    treeNode.siblings = treeNodes;\n    treeNode.level = level;\n    treeNode.index = index;\n    treeNode.isFirstChild = index === 0;\n    treeNode.isLastChild = index + 1 === rawNodes.length;\n    treeNode.parent = parent;\n\n    if (!treeNode.ignored) {\n      const rawChildren = getChildren(rawNode);\n\n      if (Array.isArray(rawChildren)) {\n        treeNode.children = createTreeNodes(rawChildren, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren, treeNode, level + 1);\n      }\n    }\n\n    treeNodes.push(treeNode);\n    treeNodeMap.set(treeNode.key, treeNode);\n    if (!levelTreeNodeMap.has(level)) levelTreeNodeMap.set(level, []);\n    (_a = levelTreeNodeMap.get(level)) === null || _a === void 0 ? void 0 : _a.push(treeNode);\n  });\n  return treeNodes;\n}\n\nexport function createTreeMate(rawNodes, options = {}) {\n  var _a;\n\n  const treeNodeMap = new Map();\n  const levelTreeNodeMap = new Map();\n  const {\n    getDisabled = isDisabled,\n    getIgnored = isIgnored,\n    getIsGroup = isGroup,\n    getKey = defaultGetKey\n  } = options;\n\n  const _getChildren = (_a = options.getChildren) !== null && _a !== void 0 ? _a : defaultGetChildren;\n\n  const getChildren = options.ignoreEmptyChildren ? node => {\n    const children = _getChildren(node);\n\n    if (Array.isArray(children)) {\n      if (!children.length) return null;\n      return children;\n    }\n\n    return children;\n  } : _getChildren;\n  const nodeProto = Object.assign({\n    get key() {\n      // do not pass parent or related things to it\n      // the key need to be specified explicitly\n      return getKey(this.rawNode);\n    },\n\n    get disabled() {\n      return getDisabled(this.rawNode);\n    },\n\n    get isGroup() {\n      return getIsGroup(this.rawNode);\n    },\n\n    get isLeaf() {\n      return isLeaf(this.rawNode, getChildren);\n    },\n\n    get shallowLoaded() {\n      return isShallowLoaded(this.rawNode, getChildren);\n    },\n\n    get ignored() {\n      return getIgnored(this.rawNode);\n    },\n\n    contains(node) {\n      return contains(this, node);\n    }\n\n  }, moveMethods);\n  const treeNodes = createTreeNodes(rawNodes, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren);\n\n  function getNode(key) {\n    if (key === null || key === undefined) return null;\n    const tmNode = treeNodeMap.get(key);\n\n    if (tmNode && !tmNode.isGroup && !tmNode.ignored) {\n      return tmNode;\n    }\n\n    return null;\n  }\n\n  function _getNode(key) {\n    if (key === null || key === undefined) return null;\n    const tmNode = treeNodeMap.get(key);\n\n    if (tmNode && !tmNode.ignored) {\n      return tmNode;\n    }\n\n    return null;\n  }\n\n  function getPrev(key, options) {\n    const node = _getNode(key);\n\n    if (!node) return null;\n    return node.getPrev(options);\n  }\n\n  function getNext(key, options) {\n    const node = _getNode(key);\n\n    if (!node) return null;\n    return node.getNext(options);\n  }\n\n  function getParent(key) {\n    const node = _getNode(key);\n\n    if (!node) return null;\n    return node.getParent();\n  }\n\n  function getChild(key) {\n    const node = _getNode(key);\n\n    if (!node) return null;\n    return node.getChild();\n  }\n\n  const treemate = {\n    treeNodes,\n    treeNodeMap,\n    levelTreeNodeMap,\n    maxLevel: Math.max(...levelTreeNodeMap.keys()),\n    getChildren,\n\n    getFlattenedNodes(expandedKeys) {\n      return flatten(treeNodes, expandedKeys);\n    },\n\n    getNode,\n    getPrev,\n    getNext,\n    getParent,\n    getChild,\n\n    getFirstAvailableNode() {\n      return getFirstAvailableNode(treeNodes);\n    },\n\n    getPath(key, options = {}) {\n      return getPath(key, options, treemate);\n    },\n\n    getCheckedKeys(checkedKeys, options = {}) {\n      const {\n        cascade = true,\n        leafOnly = false,\n        checkStrategy = 'all',\n        allowNotLoaded = false\n      } = options;\n      return getCheckedKeys({\n        checkedKeys: unwrapCheckedKeys(checkedKeys),\n        indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n        cascade,\n        leafOnly,\n        checkStrategy,\n        allowNotLoaded\n      }, treemate);\n    },\n\n    check(keysToCheck, checkedKeys, options = {}) {\n      const {\n        cascade = true,\n        leafOnly = false,\n        checkStrategy = 'all',\n        allowNotLoaded = false\n      } = options;\n      return getCheckedKeys({\n        checkedKeys: unwrapCheckedKeys(checkedKeys),\n        indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n        keysToCheck: keysToCheck === undefined || keysToCheck === null ? [] : toArray(keysToCheck),\n        cascade,\n        leafOnly,\n        checkStrategy,\n        allowNotLoaded\n      }, treemate);\n    },\n\n    uncheck(keysToUncheck, checkedKeys, options = {}) {\n      const {\n        cascade = true,\n        leafOnly = false,\n        checkStrategy = 'all',\n        allowNotLoaded = false\n      } = options;\n      return getCheckedKeys({\n        checkedKeys: unwrapCheckedKeys(checkedKeys),\n        indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n        keysToUncheck: keysToUncheck === null || keysToUncheck === undefined ? [] : toArray(keysToUncheck),\n        cascade,\n        leafOnly,\n        checkStrategy,\n        allowNotLoaded\n      }, treemate);\n    },\n\n    getNonLeafKeys(options = {}) {\n      return getNonLeafKeys(treeNodes, options);\n    }\n\n  };\n  return treemate;\n}","map":{"version":3,"names":["getCheckedKeys","toArray","isDisabled","isLeaf","isGroup","isNodeInvalid","unwrapCheckedKeys","isShallowLoaded","unwrapIndeterminateKeys","getNonLeafKeys","isIgnored","defaultGetChildren","defaultGetKey","getPath","moveMethods","getFirstAvailableNode","flatten","contains","createTreeNodes","rawNodes","treeNodeMap","levelTreeNodeMap","nodeProto","getChildren","parent","level","treeNodes","forEach","rawNode","index","_a","process","env","NODE_ENV","console","error","treeNode","Object","create","siblings","isFirstChild","isLastChild","length","ignored","rawChildren","Array","isArray","children","push","set","key","has","get","createTreeMate","options","Map","getDisabled","getIgnored","getIsGroup","getKey","_getChildren","ignoreEmptyChildren","node","assign","disabled","shallowLoaded","getNode","undefined","tmNode","_getNode","getPrev","getNext","getParent","getChild","treemate","maxLevel","Math","max","keys","getFlattenedNodes","expandedKeys","checkedKeys","cascade","leafOnly","checkStrategy","allowNotLoaded","indeterminateKeys","check","keysToCheck","uncheck","keysToUncheck"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/treemate/es/create.js"],"sourcesContent":["import { getCheckedKeys } from './check';\nimport { toArray, isDisabled, isLeaf, isGroup, isNodeInvalid, unwrapCheckedKeys, isShallowLoaded, unwrapIndeterminateKeys, getNonLeafKeys, isIgnored, defaultGetChildren, defaultGetKey } from './utils';\nimport { getPath } from './path';\nimport { moveMethods, getFirstAvailableNode } from './move';\nimport { flatten } from './flatten';\nimport { contains } from './contains';\nfunction createTreeNodes(rawNodes, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren, parent = null, level = 0) {\n    const treeNodes = [];\n    rawNodes.forEach((rawNode, index) => {\n        var _a;\n        if (process.env.NODE_ENV !== 'production' &&\n            isNodeInvalid(rawNode, getChildren)) {\n            console.error('[treemate]: node', rawNode, 'is invalid');\n        }\n        const treeNode = Object.create(nodeProto);\n        treeNode.rawNode = rawNode;\n        treeNode.siblings = treeNodes;\n        treeNode.level = level;\n        treeNode.index = index;\n        treeNode.isFirstChild = index === 0;\n        treeNode.isLastChild = index + 1 === rawNodes.length;\n        treeNode.parent = parent;\n        if (!treeNode.ignored) {\n            const rawChildren = getChildren(rawNode);\n            if (Array.isArray(rawChildren)) {\n                treeNode.children = createTreeNodes(rawChildren, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren, treeNode, level + 1);\n            }\n        }\n        treeNodes.push(treeNode);\n        treeNodeMap.set(treeNode.key, treeNode);\n        if (!levelTreeNodeMap.has(level))\n            levelTreeNodeMap.set(level, []);\n        (_a = levelTreeNodeMap.get(level)) === null || _a === void 0 ? void 0 : _a.push(treeNode);\n    });\n    return treeNodes;\n}\nexport function createTreeMate(rawNodes, options = {}) {\n    var _a;\n    const treeNodeMap = new Map();\n    const levelTreeNodeMap = new Map();\n    const { getDisabled = isDisabled, getIgnored = isIgnored, getIsGroup = isGroup, getKey = defaultGetKey } = options;\n    const _getChildren = (_a = options.getChildren) !== null && _a !== void 0 ? _a : defaultGetChildren;\n    const getChildren = options.ignoreEmptyChildren\n        ? (node) => {\n            const children = _getChildren(node);\n            if (Array.isArray(children)) {\n                if (!children.length)\n                    return null;\n                return children;\n            }\n            return children;\n        }\n        : _getChildren;\n    const nodeProto = Object.assign({\n        get key() {\n            // do not pass parent or related things to it\n            // the key need to be specified explicitly\n            return getKey(this.rawNode);\n        },\n        get disabled() {\n            return getDisabled(this.rawNode);\n        },\n        get isGroup() {\n            return getIsGroup(this.rawNode);\n        },\n        get isLeaf() {\n            return isLeaf(this.rawNode, getChildren);\n        },\n        get shallowLoaded() {\n            return isShallowLoaded(this.rawNode, getChildren);\n        },\n        get ignored() {\n            return getIgnored(this.rawNode);\n        },\n        contains(node) {\n            return contains(this, node);\n        }\n    }, moveMethods);\n    const treeNodes = createTreeNodes(rawNodes, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren);\n    function getNode(key) {\n        if (key === null || key === undefined)\n            return null;\n        const tmNode = treeNodeMap.get(key);\n        if (tmNode && !tmNode.isGroup && !tmNode.ignored) {\n            return tmNode;\n        }\n        return null;\n    }\n    function _getNode(key) {\n        if (key === null || key === undefined)\n            return null;\n        const tmNode = treeNodeMap.get(key);\n        if (tmNode && !tmNode.ignored) {\n            return tmNode;\n        }\n        return null;\n    }\n    function getPrev(key, options) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getPrev(options);\n    }\n    function getNext(key, options) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getNext(options);\n    }\n    function getParent(key) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getParent();\n    }\n    function getChild(key) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getChild();\n    }\n    const treemate = {\n        treeNodes,\n        treeNodeMap,\n        levelTreeNodeMap,\n        maxLevel: Math.max(...levelTreeNodeMap.keys()),\n        getChildren,\n        getFlattenedNodes(expandedKeys) {\n            return flatten(treeNodes, expandedKeys);\n        },\n        getNode,\n        getPrev,\n        getNext,\n        getParent,\n        getChild,\n        getFirstAvailableNode() {\n            return getFirstAvailableNode(treeNodes);\n        },\n        getPath(key, options = {}) {\n            return getPath(key, options, treemate);\n        },\n        getCheckedKeys(checkedKeys, options = {}) {\n            const { cascade = true, leafOnly = false, checkStrategy = 'all', allowNotLoaded = false } = options;\n            return getCheckedKeys({\n                checkedKeys: unwrapCheckedKeys(checkedKeys),\n                indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n                cascade,\n                leafOnly,\n                checkStrategy,\n                allowNotLoaded\n            }, treemate);\n        },\n        check(keysToCheck, checkedKeys, options = {}) {\n            const { cascade = true, leafOnly = false, checkStrategy = 'all', allowNotLoaded = false } = options;\n            return getCheckedKeys({\n                checkedKeys: unwrapCheckedKeys(checkedKeys),\n                indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n                keysToCheck: keysToCheck === undefined || keysToCheck === null\n                    ? []\n                    : toArray(keysToCheck),\n                cascade,\n                leafOnly,\n                checkStrategy,\n                allowNotLoaded\n            }, treemate);\n        },\n        uncheck(keysToUncheck, checkedKeys, options = {}) {\n            const { cascade = true, leafOnly = false, checkStrategy = 'all', allowNotLoaded = false } = options;\n            return getCheckedKeys({\n                checkedKeys: unwrapCheckedKeys(checkedKeys),\n                indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n                keysToUncheck: keysToUncheck === null || keysToUncheck === undefined\n                    ? []\n                    : toArray(keysToUncheck),\n                cascade,\n                leafOnly,\n                checkStrategy,\n                allowNotLoaded\n            }, treemate);\n        },\n        getNonLeafKeys(options = {}) {\n            return getNonLeafKeys(treeNodes, options);\n        }\n    };\n    return treemate;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}