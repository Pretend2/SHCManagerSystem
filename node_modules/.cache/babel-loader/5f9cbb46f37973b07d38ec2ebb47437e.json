{"ast":null,"code":"import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from '../../input';\nimport ColorInputUnit from './ColorInputUnit';\nexport default defineComponent({\n  name: 'ColorInput',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    mode: {\n      type: String,\n      required: true\n    },\n    modes: {\n      type: Array,\n      required: true\n    },\n    showAlpha: {\n      type: Boolean,\n      required: true\n    },\n    value: {\n      // for hex to get percise value\n      type: String,\n      default: null\n    },\n    valueArr: {\n      type: Array,\n      default: null\n    },\n    onUpdateValue: {\n      type: Function,\n      required: true\n    },\n    onUpdateMode: {\n      type: Function,\n      required: true\n    }\n  },\n\n  setup(props) {\n    return {\n      handleUnitUpdateValue(index, value) {\n        const {\n          showAlpha\n        } = props;\n\n        if (props.mode === 'hex') {\n          props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n          return;\n        }\n\n        let nextValueArr;\n\n        if (props.valueArr === null) {\n          nextValueArr = [0, 0, 0, 0];\n        } else {\n          nextValueArr = Array.from(props.valueArr);\n        }\n\n        switch (props.mode) {\n          case 'hsv':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n            break;\n\n          case 'rgb':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n            break;\n\n          case 'hsl':\n            nextValueArr[index] = value;\n            props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n            break;\n        }\n      }\n\n    };\n  },\n\n  render() {\n    const {\n      clsPrefix,\n      modes\n    } = this;\n    return h(\"div\", {\n      class: `${clsPrefix}-color-picker-input`\n    }, h(\"div\", {\n      class: `${clsPrefix}-color-picker-input__mode`,\n      onClick: this.onUpdateMode,\n      style: {\n        cursor: modes.length === 1 ? '' : 'pointer'\n      }\n    }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')), h(NInputGroup, null, {\n      default: () => {\n        const {\n          mode,\n          valueArr,\n          showAlpha\n        } = this;\n\n        if (mode === 'hex') {\n          // hex and rgba shares the same value arr\n          let hexValue = null;\n\n          try {\n            hexValue = valueArr === null ? null : (showAlpha ? toHexaString : toHexString)(valueArr);\n          } catch (_a) {}\n\n          return h(ColorInputUnit, {\n            label: 'HEX',\n            showAlpha: showAlpha,\n            value: hexValue,\n            onUpdateValue: unitValue => {\n              this.handleUnitUpdateValue(0, unitValue);\n            }\n          });\n        }\n\n        return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => h(ColorInputUnit, {\n          label: v.toUpperCase(),\n          value: valueArr === null ? null : valueArr[i],\n          onUpdateValue: unitValue => {\n            this.handleUnitUpdateValue(i, unitValue);\n          }\n        }));\n      }\n    }));\n  }\n\n});","map":{"version":3,"names":["toHsvaString","toRgbaString","toHslaString","toHexaString","toHexString","toHsvString","toRgbString","toHslString","h","defineComponent","NInputGroup","ColorInputUnit","name","props","clsPrefix","type","String","required","mode","modes","Array","showAlpha","Boolean","value","default","valueArr","onUpdateValue","Function","onUpdateMode","setup","handleUnitUpdateValue","index","nextValueArr","from","render","class","onClick","style","cursor","length","toUpperCase","hexValue","_a","label","unitValue","split","map","v","i"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/color-picker/src/ColorInput.js"],"sourcesContent":["import { toHsvaString, toRgbaString, toHslaString, toHexaString, toHexString, toHsvString, toRgbString, toHslString } from 'seemly';\nimport { h, defineComponent } from 'vue';\nimport { NInputGroup } from '../../input';\nimport ColorInputUnit from './ColorInputUnit';\nexport default defineComponent({\n    name: 'ColorInput',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        mode: {\n            type: String,\n            required: true\n        },\n        modes: {\n            type: Array,\n            required: true\n        },\n        showAlpha: {\n            type: Boolean,\n            required: true\n        },\n        value: {\n            // for hex to get percise value\n            type: String,\n            default: null\n        },\n        valueArr: {\n            type: Array,\n            default: null\n        },\n        onUpdateValue: {\n            type: Function,\n            required: true\n        },\n        onUpdateMode: {\n            type: Function,\n            required: true\n        }\n    },\n    setup(props) {\n        return {\n            handleUnitUpdateValue(index, value) {\n                const { showAlpha } = props;\n                if (props.mode === 'hex') {\n                    props.onUpdateValue((showAlpha ? toHexaString : toHexString)(value));\n                    return;\n                }\n                let nextValueArr;\n                if (props.valueArr === null) {\n                    nextValueArr = [0, 0, 0, 0];\n                }\n                else {\n                    nextValueArr = Array.from(props.valueArr);\n                }\n                switch (props.mode) {\n                    case 'hsv':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toHsvaString : toHsvString)(nextValueArr));\n                        break;\n                    case 'rgb':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toRgbaString : toRgbString)(nextValueArr));\n                        break;\n                    case 'hsl':\n                        nextValueArr[index] = value;\n                        props.onUpdateValue((showAlpha ? toHslaString : toHslString)(nextValueArr));\n                        break;\n                }\n            }\n        };\n    },\n    render() {\n        const { clsPrefix, modes } = this;\n        return (h(\"div\", { class: `${clsPrefix}-color-picker-input` },\n            h(\"div\", { class: `${clsPrefix}-color-picker-input__mode`, onClick: this.onUpdateMode, style: {\n                    cursor: modes.length === 1 ? '' : 'pointer'\n                } }, this.mode.toUpperCase() + (this.showAlpha ? 'A' : '')),\n            h(NInputGroup, null, {\n                default: () => {\n                    const { mode, valueArr, showAlpha } = this;\n                    if (mode === 'hex') {\n                        // hex and rgba shares the same value arr\n                        let hexValue = null;\n                        try {\n                            hexValue =\n                                valueArr === null\n                                    ? null\n                                    : (showAlpha ? toHexaString : toHexString)(valueArr);\n                        }\n                        catch (_a) { }\n                        return (h(ColorInputUnit, { label: 'HEX', showAlpha: showAlpha, value: hexValue, onUpdateValue: (unitValue) => {\n                                this.handleUnitUpdateValue(0, unitValue);\n                            } }));\n                    }\n                    return (mode + (showAlpha ? 'a' : '')).split('').map((v, i) => (h(ColorInputUnit, { label: v.toUpperCase(), value: valueArr === null ? null : valueArr[i], onUpdateValue: (unitValue) => {\n                            this.handleUnitUpdateValue(i, unitValue);\n                        } })));\n                }\n            })));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}