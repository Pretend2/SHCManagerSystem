{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, defineComponent, provide, computed, toRef, ref, watchEffect } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nexport const checkboxGroupProps = {\n  min: Number,\n  max: Number,\n  size: String,\n  value: Array,\n  defaultValue: {\n    type: Array,\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  'onUpdate:value': [Function, Array],\n  onUpdateValue: [Function, Array],\n  // deprecated\n  onChange: [Function, Array]\n};\nexport default defineComponent({\n  name: 'CheckboxGroup',\n  props: checkboxGroupProps,\n\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.onChange !== undefined) {\n          warnOnce('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n        }\n      });\n    }\n\n    const {\n      mergedClsPrefixRef\n    } = useConfig(props);\n    const formItem = useFormItem(props);\n    const {\n      mergedSizeRef,\n      mergedDisabledRef\n    } = formItem;\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = computed(() => props.value);\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const checkedCount = computed(() => {\n      var _a;\n\n      return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    });\n    const valueSetRef = computed(() => {\n      if (Array.isArray(mergedValueRef.value)) {\n        return new Set(mergedValueRef.value);\n      }\n\n      return new Set();\n    });\n\n    function toggleCheckbox(checked, checkboxValue) {\n      const {\n        nTriggerFormInput,\n        nTriggerFormChange\n      } = formItem;\n      const {\n        onChange,\n        'onUpdate:value': _onUpdateValue,\n        onUpdateValue\n      } = props;\n\n      if (Array.isArray(mergedValueRef.value)) {\n        const groupValue = Array.from(mergedValueRef.value);\n        const index = groupValue.findIndex(value => value === checkboxValue);\n\n        if (checked) {\n          if (!~index) {\n            groupValue.push(checkboxValue);\n\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'check',\n                value: checkboxValue\n              });\n            }\n\n            nTriggerFormInput();\n            nTriggerFormChange();\n            uncontrolledValueRef.value = groupValue; // deprecated\n\n            if (onChange) call(onChange, groupValue);\n          }\n        } else {\n          if (~index) {\n            groupValue.splice(index, 1);\n\n            if (onUpdateValue) {\n              call(onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n\n            if (_onUpdateValue) {\n              call(_onUpdateValue, groupValue, {\n                actionType: 'uncheck',\n                value: checkboxValue\n              });\n            }\n\n            if (onChange) call(onChange, groupValue); // deprecated\n\n            uncontrolledValueRef.value = groupValue;\n            nTriggerFormInput();\n            nTriggerFormChange();\n          }\n        }\n      } else {\n        if (checked) {\n          if (onUpdateValue) {\n            call(onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [checkboxValue], {\n              actionType: 'check',\n              value: checkboxValue\n            });\n          }\n\n          if (onChange) call(onChange, [checkboxValue]); // deprecated\n\n          uncontrolledValueRef.value = [checkboxValue];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        } else {\n          if (onUpdateValue) {\n            call(onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n\n          if (_onUpdateValue) {\n            call(_onUpdateValue, [], {\n              actionType: 'uncheck',\n              value: checkboxValue\n            });\n          }\n\n          if (onChange) call(onChange, []); // deprecated\n\n          uncontrolledValueRef.value = [];\n          nTriggerFormInput();\n          nTriggerFormChange();\n        }\n      }\n    }\n\n    provide(checkboxGroupInjectionKey, {\n      checkedCountRef: checkedCount,\n      maxRef: toRef(props, 'max'),\n      minRef: toRef(props, 'min'),\n      valueSetRef,\n      disabledRef: mergedDisabledRef,\n      mergedSizeRef,\n      toggleCheckbox\n    });\n    return {\n      mergedClsPrefix: mergedClsPrefixRef\n    };\n  },\n\n  render() {\n    return h(\"div\", {\n      class: `${this.mergedClsPrefix}-checkbox-group`,\n      role: \"group\"\n    }, this.$slots);\n  }\n\n});","map":{"version":3,"names":["h","defineComponent","provide","computed","toRef","ref","watchEffect","useMergedState","useConfig","useFormItem","call","createInjectionKey","warnOnce","checkboxGroupInjectionKey","checkboxGroupProps","min","Number","max","size","String","value","Array","defaultValue","type","default","disabled","Boolean","undefined","Function","onUpdateValue","onChange","name","props","setup","process","env","NODE_ENV","mergedClsPrefixRef","formItem","mergedSizeRef","mergedDisabledRef","uncontrolledValueRef","controlledValueRef","mergedValueRef","checkedCount","_a","length","valueSetRef","isArray","Set","toggleCheckbox","checked","checkboxValue","nTriggerFormInput","nTriggerFormChange","_onUpdateValue","groupValue","from","index","findIndex","push","actionType","splice","checkedCountRef","maxRef","minRef","disabledRef","mergedClsPrefix","render","class","role","$slots"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/checkbox/src/CheckboxGroup.js"],"sourcesContent":["import { h, defineComponent, provide, computed, toRef, ref, watchEffect } from 'vue';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem } from '../../_mixins';\nimport { call, createInjectionKey, warnOnce } from '../../_utils';\nexport const checkboxGroupInjectionKey = createInjectionKey('n-checkbox-group');\nexport const checkboxGroupProps = {\n    min: Number,\n    max: Number,\n    size: String,\n    value: Array,\n    defaultValue: {\n        type: Array,\n        default: null\n    },\n    disabled: {\n        type: Boolean,\n        default: undefined\n    },\n    'onUpdate:value': [Function, Array],\n    onUpdateValue: [Function, Array],\n    // deprecated\n    onChange: [Function, Array]\n};\nexport default defineComponent({\n    name: 'CheckboxGroup',\n    props: checkboxGroupProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.onChange !== undefined) {\n                    warnOnce('checkbox-group', '`on-change` is deprecated, please use `on-update:value` instead.');\n                }\n            });\n        }\n        const { mergedClsPrefixRef } = useConfig(props);\n        const formItem = useFormItem(props);\n        const { mergedSizeRef, mergedDisabledRef } = formItem;\n        const uncontrolledValueRef = ref(props.defaultValue);\n        const controlledValueRef = computed(() => props.value);\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const checkedCount = computed(() => {\n            var _a;\n            return ((_a = mergedValueRef.value) === null || _a === void 0 ? void 0 : _a.length) || 0;\n        });\n        const valueSetRef = computed(() => {\n            if (Array.isArray(mergedValueRef.value)) {\n                return new Set(mergedValueRef.value);\n            }\n            return new Set();\n        });\n        function toggleCheckbox(checked, checkboxValue) {\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            const { onChange, 'onUpdate:value': _onUpdateValue, onUpdateValue } = props;\n            if (Array.isArray(mergedValueRef.value)) {\n                const groupValue = Array.from(mergedValueRef.value);\n                const index = groupValue.findIndex((value) => value === checkboxValue);\n                if (checked) {\n                    if (!~index) {\n                        groupValue.push(checkboxValue);\n                        if (onUpdateValue) {\n                            call(onUpdateValue, groupValue, {\n                                actionType: 'check',\n                                value: checkboxValue\n                            });\n                        }\n                        if (_onUpdateValue) {\n                            call(_onUpdateValue, groupValue, {\n                                actionType: 'check',\n                                value: checkboxValue\n                            });\n                        }\n                        nTriggerFormInput();\n                        nTriggerFormChange();\n                        uncontrolledValueRef.value = groupValue;\n                        // deprecated\n                        if (onChange)\n                            call(onChange, groupValue);\n                    }\n                }\n                else {\n                    if (~index) {\n                        groupValue.splice(index, 1);\n                        if (onUpdateValue) {\n                            call(onUpdateValue, groupValue, {\n                                actionType: 'uncheck',\n                                value: checkboxValue\n                            });\n                        }\n                        if (_onUpdateValue) {\n                            call(_onUpdateValue, groupValue, {\n                                actionType: 'uncheck',\n                                value: checkboxValue\n                            });\n                        }\n                        if (onChange)\n                            call(onChange, groupValue); // deprecated\n                        uncontrolledValueRef.value = groupValue;\n                        nTriggerFormInput();\n                        nTriggerFormChange();\n                    }\n                }\n            }\n            else {\n                if (checked) {\n                    if (onUpdateValue) {\n                        call(onUpdateValue, [checkboxValue], {\n                            actionType: 'check',\n                            value: checkboxValue\n                        });\n                    }\n                    if (_onUpdateValue) {\n                        call(_onUpdateValue, [checkboxValue], {\n                            actionType: 'check',\n                            value: checkboxValue\n                        });\n                    }\n                    if (onChange)\n                        call(onChange, [checkboxValue]); // deprecated\n                    uncontrolledValueRef.value = [checkboxValue];\n                    nTriggerFormInput();\n                    nTriggerFormChange();\n                }\n                else {\n                    if (onUpdateValue) {\n                        call(onUpdateValue, [], {\n                            actionType: 'uncheck',\n                            value: checkboxValue\n                        });\n                    }\n                    if (_onUpdateValue) {\n                        call(_onUpdateValue, [], {\n                            actionType: 'uncheck',\n                            value: checkboxValue\n                        });\n                    }\n                    if (onChange)\n                        call(onChange, []); // deprecated\n                    uncontrolledValueRef.value = [];\n                    nTriggerFormInput();\n                    nTriggerFormChange();\n                }\n            }\n        }\n        provide(checkboxGroupInjectionKey, {\n            checkedCountRef: checkedCount,\n            maxRef: toRef(props, 'max'),\n            minRef: toRef(props, 'min'),\n            valueSetRef,\n            disabledRef: mergedDisabledRef,\n            mergedSizeRef,\n            toggleCheckbox\n        });\n        return {\n            mergedClsPrefix: mergedClsPrefixRef\n        };\n    },\n    render() {\n        return (h(\"div\", { class: `${this.mergedClsPrefix}-checkbox-group`, role: \"group\" }, this.$slots));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}