{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from '../../../_mixins/common';\nimport { c } from '../../../_utils/cssr';\nimport { NScrollbar } from '../../../_internal';\nimport { formatLength, resolveSlot } from '../../../_utils';\nimport { NEmpty } from '../../../empty';\nimport { dataTableInjectionKey } from '../interface';\nimport { createRowClassName, getColKey, isColumnSorting } from '../utils';\nimport Cell from './Cell';\nimport ExpandTrigger from './ExpandTrigger';\nimport RenderSafeCheckbox from './BodyCheckbox';\nimport RenderSafeRadio from './BodyRadio';\nimport TableHeader from './Header';\n\nfunction flatten(rowInfos, expandedRowKeys) {\n  const fRows = [];\n\n  function traverse(rs, rootIndex) {\n    rs.forEach(r => {\n      if (r.children && expandedRowKeys.has(r.key)) {\n        fRows.push({\n          tmNode: r,\n          striped: false,\n          key: r.key,\n          index: rootIndex\n        });\n        traverse(r.children, rootIndex);\n      } else {\n        fRows.push({\n          key: r.key,\n          tmNode: r,\n          striped: false,\n          index: rootIndex\n        });\n      }\n    });\n  }\n\n  rowInfos.forEach(rowInfo => {\n    fRows.push(rowInfo);\n    const {\n      children\n    } = rowInfo.tmNode;\n\n    if (children && expandedRowKeys.has(rowInfo.key)) {\n      traverse(children, rowInfo.index);\n    }\n  });\n  return fRows;\n}\n\nconst VirtualListItemWrapper = defineComponent({\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    cols: {\n      type: Array,\n      required: true\n    },\n    onMouseenter: Function,\n    onMouseleave: Function\n  },\n\n  render() {\n    const {\n      clsPrefix,\n      id,\n      cols,\n      onMouseenter,\n      onMouseleave\n    } = this;\n    return h(\"table\", {\n      style: {\n        tableLayout: 'fixed'\n      },\n      class: `${clsPrefix}-data-table-table`,\n      onMouseenter: onMouseenter,\n      onMouseleave: onMouseleave\n    }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n      key: col.key,\n      style: col.style\n    }))), h(\"tbody\", {\n      \"data-n-id\": id,\n      class: `${clsPrefix}-data-table-tbody`\n    }, this.$slots));\n  }\n\n});\nexport default defineComponent({\n  name: 'DataTableBody',\n  props: {\n    onResize: Function,\n    showHeader: Boolean,\n    flexHeight: Boolean,\n    bodyStyle: Object\n  },\n\n  setup(props) {\n    const {\n      slots: dataTableSlots,\n      bodyWidthRef,\n      mergedExpandedRowKeysRef,\n      mergedClsPrefixRef,\n      mergedThemeRef,\n      scrollXRef,\n      colsRef,\n      paginatedDataRef,\n      rawPaginatedDataRef,\n      fixedColumnLeftMapRef,\n      fixedColumnRightMapRef,\n      mergedCurrentPageRef,\n      rowClassNameRef,\n      leftActiveFixedColKeyRef,\n      leftActiveFixedChildrenColKeysRef,\n      rightActiveFixedColKeyRef,\n      rightActiveFixedChildrenColKeysRef,\n      renderExpandRef,\n      hoverKeyRef,\n      summaryRef,\n      mergedSortStateRef,\n      virtualScrollRef,\n      componentId,\n      scrollPartRef,\n      mergedTableLayoutRef,\n      childTriggerColIndexRef,\n      indentRef,\n      rowPropsRef,\n      maxHeightRef,\n      stripedRef,\n      loadingRef,\n      onLoadRef,\n      loadingKeySetRef,\n      expandableRef,\n      stickyExpandedRowsRef,\n      renderExpandIconRef,\n      summaryPlacementRef,\n      setHeaderScrollLeft,\n      doUpdateExpandedRowKeys,\n      handleTableBodyScroll,\n      doCheck,\n      doUncheck,\n      renderCell // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    } = inject(dataTableInjectionKey);\n    const scrollbarInstRef = ref(null);\n    const virtualListRef = ref(null);\n    const emptyElRef = ref(null);\n    const emptyRef = useMemo(() => paginatedDataRef.value.length === 0); // If header is not inside & empty is displayed, no table part would be\n    // shown. So to collect a body width, we need to put a ref on empty element\n\n    const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value); // If no body is shown, we shouldn't show scrollbar\n\n    const bodyShowHeaderOnlyRef = useMemo(() => {\n      return props.showHeader || emptyRef.value;\n    });\n    let lastSelectedKey = '';\n    const mergedExpandedRowKeySetRef = computed(() => {\n      return new Set(mergedExpandedRowKeysRef.value);\n    });\n\n    function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n      if (shiftKey) {\n        const lastIndex = paginatedDataRef.value.findIndex(item => item.key === lastSelectedKey);\n\n        if (lastIndex !== -1) {\n          const currentIndex = paginatedDataRef.value.findIndex(item => item.key === tmNode.key);\n          const start = Math.min(lastIndex, currentIndex);\n          const end = Math.max(lastIndex, currentIndex);\n          const rowKeysToCheck = [];\n          paginatedDataRef.value.slice(start, end + 1).forEach(r => {\n            if (!r.disabled) {\n              rowKeysToCheck.push(r.key);\n            }\n          });\n\n          if (checked) {\n            doCheck(rowKeysToCheck, false);\n          } else {\n            doUncheck(rowKeysToCheck);\n          }\n\n          lastSelectedKey = tmNode.key;\n          return;\n        }\n      }\n\n      if (checked) {\n        doCheck(tmNode.key, false);\n      } else {\n        doUncheck(tmNode.key);\n      }\n\n      lastSelectedKey = tmNode.key;\n    }\n\n    function handleRadioUpdateChecked(tmNode) {\n      doCheck(tmNode.key, true);\n    }\n\n    function getScrollContainer() {\n      if (!shouldDisplaySomeTablePartRef.value) {\n        const {\n          value: emptyEl\n        } = emptyElRef;\n\n        if (emptyEl) {\n          return emptyEl;\n        } else {\n          return null;\n        }\n      }\n\n      if (virtualScrollRef.value) {\n        return virtualListContainer();\n      }\n\n      const {\n        value\n      } = scrollbarInstRef;\n      if (value) return value.containerRef;\n      return null;\n    } // For table row with children, tmNode is non-nullable\n    // For table row is expandable but is not tree data, tmNode is null\n\n\n    function handleUpdateExpanded(key, tmNode) {\n      var _a;\n\n      if (loadingKeySetRef.value.has(key)) return;\n      const {\n        value: mergedExpandedRowKeys\n      } = mergedExpandedRowKeysRef;\n      const index = mergedExpandedRowKeys.indexOf(key);\n      const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n\n      if (~index) {\n        nextExpandedKeys.splice(index, 1);\n        doUpdateExpandedRowKeys(nextExpandedKeys);\n      } else {\n        if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n          loadingKeySetRef.value.add(key);\n          void ((_a = onLoadRef.value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n            const {\n              value: futureMergedExpandedRowKeys\n            } = mergedExpandedRowKeysRef;\n            const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n            const index = futureNextExpandedKeys.indexOf(key);\n\n            if (!~index) {\n              futureNextExpandedKeys.push(key);\n            }\n\n            doUpdateExpandedRowKeys(futureNextExpandedKeys);\n          }).finally(() => {\n            loadingKeySetRef.value.delete(key);\n          }));\n        } else {\n          nextExpandedKeys.push(key);\n          doUpdateExpandedRowKeys(nextExpandedKeys);\n        }\n      }\n    }\n\n    function handleMouseleaveTable() {\n      hoverKeyRef.value = null;\n    }\n\n    function handleMouseenterTable() {\n      scrollPartRef.value = 'body';\n    }\n\n    function virtualListContainer() {\n      const {\n        value\n      } = virtualListRef;\n      return value === null || value === void 0 ? void 0 : value.listElRef;\n    }\n\n    function virtualListContent() {\n      const {\n        value\n      } = virtualListRef;\n      return value === null || value === void 0 ? void 0 : value.itemsElRef;\n    }\n\n    function handleVirtualListScroll(e) {\n      var _a;\n\n      handleTableBodyScroll(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n\n    function handleVirtualListResize(e) {\n      var _a;\n\n      const {\n        onResize\n      } = props;\n      if (onResize) onResize(e);\n      (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n    }\n\n    const exposedMethods = {\n      getScrollContainer,\n\n      scrollTo(arg0, arg1) {\n        var _a, _b;\n\n        if (virtualScrollRef.value) {\n          (_a = virtualListRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg0, arg1);\n        } else {\n          (_b = scrollbarInstRef.value) === null || _b === void 0 ? void 0 : _b.scrollTo(arg0, arg1);\n        }\n      }\n\n    }; // manually control shadow style to avoid rerender\n\n    const style = c([({\n      props: cProps\n    }) => {\n      const createActiveLeftFixedStyle = leftActiveFixedColKey => {\n        if (leftActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, {\n          boxShadow: 'var(--n-box-shadow-after)'\n        });\n      };\n\n      const createActiveRightFixedStyle = rightActiveFixedColKey => {\n        if (rightActiveFixedColKey === null) return null;\n        return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, {\n          boxShadow: 'var(--n-box-shadow-before)'\n        });\n      };\n\n      return c([createActiveLeftFixedStyle(cProps.leftActiveFixedColKey), createActiveRightFixedStyle(cProps.rightActiveFixedColKey), cProps.leftActiveFixedChildrenColKeys.map(leftActiveFixedColKey => createActiveLeftFixedStyle(leftActiveFixedColKey)), cProps.rightActiveFixedChildrenColKeys.map(rightActiveFixedColKey => createActiveRightFixedStyle(rightActiveFixedColKey))]);\n    }]);\n    let fixedStyleMounted = false;\n    watchEffect(() => {\n      const {\n        value: leftActiveFixedColKey\n      } = leftActiveFixedColKeyRef;\n      const {\n        value: leftActiveFixedChildrenColKeys\n      } = leftActiveFixedChildrenColKeysRef;\n      const {\n        value: rightActiveFixedColKey\n      } = rightActiveFixedColKeyRef;\n      const {\n        value: rightActiveFixedChildrenColKeys\n      } = rightActiveFixedChildrenColKeysRef;\n\n      if (!fixedStyleMounted && leftActiveFixedColKey === null && rightActiveFixedColKey === null) {\n        return;\n      }\n\n      const cProps = {\n        leftActiveFixedColKey,\n        leftActiveFixedChildrenColKeys,\n        rightActiveFixedColKey,\n        rightActiveFixedChildrenColKeys,\n        componentId\n      };\n      style.mount({\n        id: `n-${componentId}`,\n        force: true,\n        props: cProps,\n        anchorMetaName: cssrAnchorMetaName\n      });\n      fixedStyleMounted = true;\n    });\n    onUnmounted(() => {\n      style.unmount({\n        id: `n-${componentId}`\n      });\n    });\n    return Object.assign({\n      bodyWidth: bodyWidthRef,\n      summaryPlacement: summaryPlacementRef,\n      dataTableSlots,\n      componentId,\n      scrollbarInstRef,\n      virtualListRef,\n      emptyElRef,\n      summary: summaryRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedTheme: mergedThemeRef,\n      scrollX: scrollXRef,\n      cols: colsRef,\n      loading: loadingRef,\n      bodyShowHeaderOnly: bodyShowHeaderOnlyRef,\n      shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef,\n      empty: emptyRef,\n      paginatedDataAndInfo: computed(() => {\n        const {\n          value: striped\n        } = stripedRef;\n        let hasChildren = false;\n        const data = paginatedDataRef.value.map(striped ? (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: index % 2 === 1,\n            index\n          };\n        } : (tmNode, index) => {\n          if (!tmNode.isLeaf) hasChildren = true;\n          return {\n            tmNode,\n            key: tmNode.key,\n            striped: false,\n            index\n          };\n        });\n        return {\n          data,\n          hasChildren\n        };\n      }),\n      rawPaginatedData: rawPaginatedDataRef,\n      fixedColumnLeftMap: fixedColumnLeftMapRef,\n      fixedColumnRightMap: fixedColumnRightMapRef,\n      currentPage: mergedCurrentPageRef,\n      rowClassName: rowClassNameRef,\n      renderExpand: renderExpandRef,\n      mergedExpandedRowKeySet: mergedExpandedRowKeySetRef,\n      hoverKey: hoverKeyRef,\n      mergedSortState: mergedSortStateRef,\n      virtualScroll: virtualScrollRef,\n      mergedTableLayout: mergedTableLayoutRef,\n      childTriggerColIndex: childTriggerColIndexRef,\n      indent: indentRef,\n      rowProps: rowPropsRef,\n      maxHeight: maxHeightRef,\n      loadingKeySet: loadingKeySetRef,\n      expandable: expandableRef,\n      stickyExpandedRows: stickyExpandedRowsRef,\n      renderExpandIcon: renderExpandIconRef,\n      setHeaderScrollLeft,\n      handleMouseenterTable,\n      handleVirtualListScroll,\n      handleVirtualListResize,\n      handleMouseleaveTable,\n      virtualListContainer,\n      virtualListContent,\n      handleTableBodyScroll,\n      handleCheckboxUpdateChecked,\n      handleRadioUpdateChecked,\n      handleUpdateExpanded,\n      renderCell\n    }, exposedMethods);\n  },\n\n  render() {\n    const {\n      mergedTheme,\n      scrollX,\n      mergedClsPrefix,\n      virtualScroll,\n      maxHeight,\n      mergedTableLayout,\n      flexHeight,\n      loadingKeySet,\n      onResize,\n      setHeaderScrollLeft\n    } = this;\n    const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight; // For a basic table with auto layout whose content may overflow we will\n    // make it scrollable, which differs from browser's native behavior.\n    // For native behavior, see\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n\n    const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n    const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n    const contentStyle = {\n      minWidth: formatLength(scrollX) || '100%'\n    };\n    if (scrollX) contentStyle.width = '100%';\n    const tableNode = h(NScrollbar, {\n      ref: \"scrollbarInstRef\",\n      scrollable: scrollable || isBasicAutoLayout,\n      class: `${mergedClsPrefix}-data-table-base-table-body`,\n      style: this.bodyStyle,\n      theme: mergedTheme.peers.Scrollbar,\n      themeOverrides: mergedTheme.peerOverrides.Scrollbar,\n      contentStyle: contentStyle,\n      container: virtualScroll ? this.virtualListContainer : undefined,\n      content: virtualScroll ? this.virtualListContent : undefined,\n      horizontalRailStyle: {\n        zIndex: 3\n      },\n      verticalRailStyle: {\n        zIndex: 3\n      },\n      xScrollable: xScrollable,\n      onScroll: virtualScroll ? undefined : this.handleTableBodyScroll,\n      internalOnUpdateScrollLeft: setHeaderScrollLeft,\n      onResize: onResize\n    }, {\n      default: () => {\n        // coordinate to pass if there are cells that cross row & col\n        const cordToPass = {}; // coordinate to related hover keys\n\n        const cordKey = {};\n        const {\n          cols,\n          paginatedDataAndInfo,\n          mergedTheme,\n          fixedColumnLeftMap,\n          fixedColumnRightMap,\n          currentPage,\n          rowClassName,\n          mergedSortState,\n          mergedExpandedRowKeySet,\n          stickyExpandedRows,\n          componentId,\n          childTriggerColIndex,\n          expandable,\n          rowProps,\n          handleMouseenterTable,\n          handleMouseleaveTable,\n          renderExpand,\n          summary,\n          handleCheckboxUpdateChecked,\n          handleRadioUpdateChecked,\n          handleUpdateExpanded\n        } = this;\n        const {\n          length: colCount\n        } = cols;\n        let mergedData; // if there is children in data, we should expand mergedData first\n\n        const {\n          data: paginatedData,\n          hasChildren\n        } = paginatedDataAndInfo;\n        const mergedPaginationData = hasChildren ? flatten(paginatedData, mergedExpandedRowKeySet) : paginatedData;\n\n        if (summary) {\n          const summaryRows = summary(this.rawPaginatedData);\n\n          if (Array.isArray(summaryRows)) {\n            const summaryRowData = summaryRows.map((row, i) => ({\n              isSummaryRow: true,\n              key: `__n_summary__${i}`,\n              tmNode: {\n                rawNode: row,\n                disabled: true\n              },\n              index: -1\n            }));\n            mergedData = this.summaryPlacement === 'top' ? [...summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, ...summaryRowData];\n          } else {\n            const summaryRowData = {\n              isSummaryRow: true,\n              key: '__n_summary__',\n              tmNode: {\n                rawNode: summaryRows,\n                disabled: true\n              },\n              index: -1\n            };\n            mergedData = this.summaryPlacement === 'top' ? [summaryRowData, ...mergedPaginationData] : [...mergedPaginationData, summaryRowData];\n          }\n        } else {\n          mergedData = mergedPaginationData;\n        }\n\n        const indentStyle = hasChildren ? {\n          width: pxfy(this.indent)\n        } : undefined; // Tile the data of the expanded row\n\n        const displayedData = [];\n        mergedData.forEach(rowInfo => {\n          if (renderExpand && mergedExpandedRowKeySet.has(rowInfo.key) && (!expandable || expandable(rowInfo.tmNode.rawNode))) {\n            displayedData.push(rowInfo, {\n              isExpandedRow: true,\n              key: `${rowInfo.key}-expand`,\n              tmNode: rowInfo.tmNode,\n              index: rowInfo.index\n            });\n          } else {\n            displayedData.push(rowInfo);\n          }\n        });\n        const {\n          length: rowCount\n        } = displayedData;\n        const rowIndexToKey = {};\n        paginatedData.forEach(({\n          tmNode\n        }, rowIndex) => {\n          rowIndexToKey[rowIndex] = tmNode.key;\n        });\n        const bodyWidth = stickyExpandedRows ? this.bodyWidth : null;\n        const bodyWidthPx = bodyWidth === null ? undefined : `${bodyWidth}px`;\n\n        const renderRow = (rowInfo, displayedRowIndex, isVirtual) => {\n          const {\n            index: actualRowIndex\n          } = rowInfo;\n\n          if ('isExpandedRow' in rowInfo) {\n            const {\n              tmNode: {\n                key,\n                rawNode\n              }\n            } = rowInfo;\n            return h(\"tr\", {\n              class: `${mergedClsPrefix}-data-table-tr`,\n              key: `${key}__expand`\n            }, h(\"td\", {\n              class: [`${mergedClsPrefix}-data-table-td`, `${mergedClsPrefix}-data-table-td--last-col`, displayedRowIndex + 1 === rowCount && `${mergedClsPrefix}-data-table-td--last-row`],\n              colspan: colCount\n            }, stickyExpandedRows ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand`,\n              style: {\n                width: bodyWidthPx\n              }\n            }, renderExpand(rawNode, actualRowIndex)) : renderExpand(rawNode, actualRowIndex)));\n          }\n\n          const isSummary = ('isSummaryRow' in rowInfo);\n          const striped = !isSummary && rowInfo.striped;\n          const {\n            tmNode,\n            key: rowKey\n          } = rowInfo;\n          const {\n            rawNode: rowData\n          } = tmNode;\n          const expanded = mergedExpandedRowKeySet.has(rowKey);\n          const props = rowProps ? rowProps(rowData, actualRowIndex) : undefined;\n          const mergedRowClassName = typeof rowClassName === 'string' ? rowClassName : createRowClassName(rowData, actualRowIndex, rowClassName);\n          const row = h(\"tr\", Object.assign({\n            onMouseenter: () => {\n              this.hoverKey = rowKey;\n            },\n            key: rowKey,\n            class: [`${mergedClsPrefix}-data-table-tr`, isSummary && `${mergedClsPrefix}-data-table-tr--summary`, striped && `${mergedClsPrefix}-data-table-tr--striped`, mergedRowClassName]\n          }, props), cols.map((col, colIndex) => {\n            var _a, _b, _c, _d, _e;\n\n            if (displayedRowIndex in cordToPass) {\n              const cordOfRowToPass = cordToPass[displayedRowIndex];\n              const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n\n              if (~indexInCordOfRowToPass) {\n                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                return null;\n              }\n            } // TODO: Simplify row calculation\n\n\n            const {\n              column\n            } = col;\n            const colKey = getColKey(col);\n            const {\n              rowSpan,\n              colSpan\n            } = column;\n            const mergedColSpan = isSummary ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n            : colSpan ? colSpan(rowData, actualRowIndex) : 1;\n            const mergedRowSpan = isSummary ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n            : rowSpan ? rowSpan(rowData, actualRowIndex) : 1;\n            const isLastCol = colIndex + mergedColSpan === colCount;\n            const isLastRow = displayedRowIndex + mergedRowSpan === rowCount;\n            const isCrossRowTd = mergedRowSpan > 1;\n\n            if (isCrossRowTd) {\n              cordKey[displayedRowIndex] = {\n                [colIndex]: []\n              };\n            }\n\n            if (mergedColSpan > 1 || isCrossRowTd) {\n              for (let i = displayedRowIndex; i < displayedRowIndex + mergedRowSpan; ++i) {\n                if (isCrossRowTd) {\n                  cordKey[displayedRowIndex][colIndex].push(rowIndexToKey[i]);\n                }\n\n                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                  if (i === displayedRowIndex && j === colIndex) {\n                    continue;\n                  }\n\n                  if (!(i in cordToPass)) {\n                    cordToPass[i] = [j];\n                  } else {\n                    cordToPass[i].push(j);\n                  }\n                }\n              }\n            }\n\n            const hoverKey = isCrossRowTd ? this.hoverKey : null;\n            const {\n              cellProps\n            } = column;\n            const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, actualRowIndex);\n            return h(\"td\", Object.assign({}, resolvedCellProps, {\n              key: colKey,\n              style: [{\n                textAlign: column.align || undefined,\n                left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n              }, (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''],\n              colspan: mergedColSpan,\n              rowspan: isVirtual ? undefined : mergedRowSpan,\n              \"data-col-key\": colKey,\n              class: [`${mergedClsPrefix}-data-table-td`, column.className, resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class, isSummary && `${mergedClsPrefix}-data-table-td--summary`, (hoverKey !== null && cordKey[displayedRowIndex][colIndex].includes(hoverKey) || isColumnSorting(column, mergedSortState)) && `${mergedClsPrefix}-data-table-td--hover`, column.fixed && `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`, column.align && `${mergedClsPrefix}-data-table-td--${column.align}-align`, column.type === 'selection' && `${mergedClsPrefix}-data-table-td--selection`, column.type === 'expand' && `${mergedClsPrefix}-data-table-td--expand`, isLastCol && `${mergedClsPrefix}-data-table-td--last-col`, isLastRow && `${mergedClsPrefix}-data-table-td--last-row`]\n            }), hasChildren && colIndex === childTriggerColIndex ? [repeat(isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-indent`,\n              style: indentStyle\n            })), isSummary || rowInfo.tmNode.isLeaf ? h(\"div\", {\n              class: `${mergedClsPrefix}-data-table-expand-placeholder`\n            }) : h(ExpandTrigger, {\n              class: `${mergedClsPrefix}-data-table-expand-trigger`,\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              loading: loadingKeySet.has(rowInfo.key),\n              onClick: () => {\n                handleUpdateExpanded(rowKey, rowInfo.tmNode);\n              }\n            })] : null, column.type === 'selection' ? !isSummary ? column.multiple === false ? h(RenderSafeRadio, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: () => handleRadioUpdateChecked(rowInfo.tmNode)\n            }) : h(RenderSafeCheckbox, {\n              key: currentPage,\n              rowKey: rowKey,\n              disabled: rowInfo.tmNode.disabled,\n              onUpdateChecked: (checked, e) => handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey)\n            }) : null : column.type === 'expand' ? !isSummary ? !column.expandable || ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData)) ? h(ExpandTrigger, {\n              clsPrefix: mergedClsPrefix,\n              expanded: expanded,\n              renderExpandIcon: this.renderExpandIcon,\n              onClick: () => handleUpdateExpanded(rowKey, null)\n            }) : null : null : h(Cell, {\n              clsPrefix: mergedClsPrefix,\n              index: actualRowIndex,\n              row: rowData,\n              column: column,\n              isSummary: isSummary,\n              mergedTheme: mergedTheme,\n              renderCell: this.renderCell\n            }));\n          }));\n          return row;\n        };\n\n        if (!virtualScroll) {\n          return h(\"table\", {\n            class: `${mergedClsPrefix}-data-table-table`,\n            onMouseleave: handleMouseleaveTable,\n            onMouseenter: handleMouseenterTable,\n            style: {\n              tableLayout: this.mergedTableLayout\n            }\n          }, h(\"colgroup\", null, cols.map(col => h(\"col\", {\n            key: col.key,\n            style: col.style\n          }))), this.showHeader ? h(TableHeader, {\n            discrete: false\n          }) : null, !this.empty ? h(\"tbody\", {\n            \"data-n-id\": componentId,\n            class: `${mergedClsPrefix}-data-table-tbody`\n          }, displayedData.map((rowInfo, displayedRowIndex) => {\n            return renderRow(rowInfo, displayedRowIndex, false);\n          })) : null);\n        } else {\n          return h(VirtualList, {\n            ref: \"virtualListRef\",\n            items: displayedData,\n            itemSize: 28,\n            visibleItemsTag: VirtualListItemWrapper,\n            visibleItemsProps: {\n              clsPrefix: mergedClsPrefix,\n              id: componentId,\n              cols,\n              onMouseenter: handleMouseenterTable,\n              onMouseleave: handleMouseleaveTable\n            },\n            showScrollbar: false,\n            onResize: this.handleVirtualListResize,\n            onScroll: this.handleVirtualListScroll,\n            itemsStyle: contentStyle,\n            itemResizable: true\n          }, {\n            default: ({\n              item,\n              index\n            }) => renderRow(item, index, true)\n          });\n        }\n      }\n    });\n\n    if (this.empty) {\n      const createEmptyNode = () => h(\"div\", {\n        class: [`${mergedClsPrefix}-data-table-empty`, this.loading && `${mergedClsPrefix}-data-table-empty--hide`],\n        style: this.bodyStyle,\n        ref: \"emptyElRef\"\n      }, resolveSlot(this.dataTableSlots.empty, () => [h(NEmpty, {\n        theme: this.mergedTheme.peers.Empty,\n        themeOverrides: this.mergedTheme.peerOverrides.Empty\n      })]));\n\n      if (this.shouldDisplaySomeTablePart) {\n        return h(Fragment, null, tableNode, createEmptyNode());\n      } else {\n        return h(VResizeObserver, {\n          onResize: this.onResize\n        }, {\n          default: createEmptyNode\n        });\n      }\n    }\n\n    return tableNode;\n  }\n\n});","map":{"version":3,"names":["h","ref","defineComponent","inject","watchEffect","onUnmounted","computed","Fragment","pxfy","repeat","VirtualList","VResizeObserver","useMemo","cssrAnchorMetaName","c","NScrollbar","formatLength","resolveSlot","NEmpty","dataTableInjectionKey","createRowClassName","getColKey","isColumnSorting","Cell","ExpandTrigger","RenderSafeCheckbox","RenderSafeRadio","TableHeader","flatten","rowInfos","expandedRowKeys","fRows","traverse","rs","rootIndex","forEach","r","children","has","key","push","tmNode","striped","index","rowInfo","VirtualListItemWrapper","props","clsPrefix","type","String","required","id","cols","Array","onMouseenter","Function","onMouseleave","render","style","tableLayout","class","map","col","$slots","name","onResize","showHeader","Boolean","flexHeight","bodyStyle","Object","setup","slots","dataTableSlots","bodyWidthRef","mergedExpandedRowKeysRef","mergedClsPrefixRef","mergedThemeRef","scrollXRef","colsRef","paginatedDataRef","rawPaginatedDataRef","fixedColumnLeftMapRef","fixedColumnRightMapRef","mergedCurrentPageRef","rowClassNameRef","leftActiveFixedColKeyRef","leftActiveFixedChildrenColKeysRef","rightActiveFixedColKeyRef","rightActiveFixedChildrenColKeysRef","renderExpandRef","hoverKeyRef","summaryRef","mergedSortStateRef","virtualScrollRef","componentId","scrollPartRef","mergedTableLayoutRef","childTriggerColIndexRef","indentRef","rowPropsRef","maxHeightRef","stripedRef","loadingRef","onLoadRef","loadingKeySetRef","expandableRef","stickyExpandedRowsRef","renderExpandIconRef","summaryPlacementRef","setHeaderScrollLeft","doUpdateExpandedRowKeys","handleTableBodyScroll","doCheck","doUncheck","renderCell","scrollbarInstRef","virtualListRef","emptyElRef","emptyRef","value","length","shouldDisplaySomeTablePartRef","bodyShowHeaderOnlyRef","lastSelectedKey","mergedExpandedRowKeySetRef","Set","handleCheckboxUpdateChecked","checked","shiftKey","lastIndex","findIndex","item","currentIndex","start","Math","min","end","max","rowKeysToCheck","slice","disabled","handleRadioUpdateChecked","getScrollContainer","emptyEl","virtualListContainer","containerRef","handleUpdateExpanded","_a","mergedExpandedRowKeys","indexOf","nextExpandedKeys","from","splice","isLeaf","shallowLoaded","add","call","rawNode","then","futureMergedExpandedRowKeys","futureNextExpandedKeys","finally","delete","handleMouseleaveTable","handleMouseenterTable","listElRef","virtualListContent","itemsElRef","handleVirtualListScroll","e","sync","handleVirtualListResize","exposedMethods","scrollTo","arg0","arg1","_b","cProps","createActiveLeftFixedStyle","leftActiveFixedColKey","boxShadow","createActiveRightFixedStyle","rightActiveFixedColKey","leftActiveFixedChildrenColKeys","rightActiveFixedChildrenColKeys","fixedStyleMounted","mount","force","anchorMetaName","unmount","assign","bodyWidth","summaryPlacement","summary","mergedClsPrefix","mergedTheme","scrollX","loading","bodyShowHeaderOnly","shouldDisplaySomeTablePart","empty","paginatedDataAndInfo","hasChildren","data","rawPaginatedData","fixedColumnLeftMap","fixedColumnRightMap","currentPage","rowClassName","renderExpand","mergedExpandedRowKeySet","hoverKey","mergedSortState","virtualScroll","mergedTableLayout","childTriggerColIndex","indent","rowProps","maxHeight","loadingKeySet","expandable","stickyExpandedRows","renderExpandIcon","scrollable","undefined","isBasicAutoLayout","xScrollable","contentStyle","minWidth","width","tableNode","theme","peers","Scrollbar","themeOverrides","peerOverrides","container","content","horizontalRailStyle","zIndex","verticalRailStyle","onScroll","internalOnUpdateScrollLeft","default","cordToPass","cordKey","colCount","mergedData","paginatedData","mergedPaginationData","summaryRows","isArray","summaryRowData","row","i","isSummaryRow","indentStyle","displayedData","isExpandedRow","rowCount","rowIndexToKey","rowIndex","bodyWidthPx","renderRow","displayedRowIndex","isVirtual","actualRowIndex","colspan","isSummary","rowKey","rowData","expanded","mergedRowClassName","colIndex","_c","_d","_e","cordOfRowToPass","indexInCordOfRowToPass","column","colKey","rowSpan","colSpan","mergedColSpan","mergedRowSpan","isLastCol","isLastRow","isCrossRowTd","j","cellProps","resolvedCellProps","textAlign","align","left","right","rowspan","className","includes","fixed","level","onClick","multiple","onUpdateChecked","discrete","items","itemSize","visibleItemsTag","visibleItemsProps","showScrollbar","itemsStyle","itemResizable","createEmptyNode","Empty"],"sources":["D:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/naive-ui/es/data-table/src/TableParts/Body.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, ref, defineComponent, inject, watchEffect, onUnmounted, computed, Fragment } from 'vue';\nimport { pxfy, repeat } from 'seemly';\nimport { VirtualList, VResizeObserver } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { cssrAnchorMetaName } from '../../../_mixins/common';\nimport { c } from '../../../_utils/cssr';\nimport { NScrollbar } from '../../../_internal';\nimport { formatLength, resolveSlot } from '../../../_utils';\nimport { NEmpty } from '../../../empty';\nimport { dataTableInjectionKey } from '../interface';\nimport { createRowClassName, getColKey, isColumnSorting } from '../utils';\nimport Cell from './Cell';\nimport ExpandTrigger from './ExpandTrigger';\nimport RenderSafeCheckbox from './BodyCheckbox';\nimport RenderSafeRadio from './BodyRadio';\nimport TableHeader from './Header';\nfunction flatten(rowInfos, expandedRowKeys) {\n    const fRows = [];\n    function traverse(rs, rootIndex) {\n        rs.forEach((r) => {\n            if (r.children && expandedRowKeys.has(r.key)) {\n                fRows.push({\n                    tmNode: r,\n                    striped: false,\n                    key: r.key,\n                    index: rootIndex\n                });\n                traverse(r.children, rootIndex);\n            }\n            else {\n                fRows.push({\n                    key: r.key,\n                    tmNode: r,\n                    striped: false,\n                    index: rootIndex\n                });\n            }\n        });\n    }\n    rowInfos.forEach((rowInfo) => {\n        fRows.push(rowInfo);\n        const { children } = rowInfo.tmNode;\n        if (children && expandedRowKeys.has(rowInfo.key)) {\n            traverse(children, rowInfo.index);\n        }\n    });\n    return fRows;\n}\nconst VirtualListItemWrapper = defineComponent({\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        id: {\n            type: String,\n            required: true\n        },\n        cols: {\n            type: Array,\n            required: true\n        },\n        onMouseenter: Function,\n        onMouseleave: Function\n    },\n    render() {\n        const { clsPrefix, id, cols, onMouseenter, onMouseleave } = this;\n        return (h(\"table\", { style: { tableLayout: 'fixed' }, class: `${clsPrefix}-data-table-table`, onMouseenter: onMouseenter, onMouseleave: onMouseleave },\n            h(\"colgroup\", null, cols.map((col) => (h(\"col\", { key: col.key, style: col.style })))),\n            h(\"tbody\", { \"data-n-id\": id, class: `${clsPrefix}-data-table-tbody` }, this.$slots)));\n    }\n});\nexport default defineComponent({\n    name: 'DataTableBody',\n    props: {\n        onResize: Function,\n        showHeader: Boolean,\n        flexHeight: Boolean,\n        bodyStyle: Object\n    },\n    setup(props) {\n        const { slots: dataTableSlots, bodyWidthRef, mergedExpandedRowKeysRef, mergedClsPrefixRef, mergedThemeRef, scrollXRef, colsRef, paginatedDataRef, rawPaginatedDataRef, fixedColumnLeftMapRef, fixedColumnRightMapRef, mergedCurrentPageRef, rowClassNameRef, leftActiveFixedColKeyRef, leftActiveFixedChildrenColKeysRef, rightActiveFixedColKeyRef, rightActiveFixedChildrenColKeysRef, renderExpandRef, hoverKeyRef, summaryRef, mergedSortStateRef, virtualScrollRef, componentId, scrollPartRef, mergedTableLayoutRef, childTriggerColIndexRef, indentRef, rowPropsRef, maxHeightRef, stripedRef, loadingRef, onLoadRef, loadingKeySetRef, expandableRef, stickyExpandedRowsRef, renderExpandIconRef, summaryPlacementRef, setHeaderScrollLeft, doUpdateExpandedRowKeys, handleTableBodyScroll, doCheck, doUncheck, renderCell\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dataTableInjectionKey);\n        const scrollbarInstRef = ref(null);\n        const virtualListRef = ref(null);\n        const emptyElRef = ref(null);\n        const emptyRef = useMemo(() => paginatedDataRef.value.length === 0);\n        // If header is not inside & empty is displayed, no table part would be\n        // shown. So to collect a body width, we need to put a ref on empty element\n        const shouldDisplaySomeTablePartRef = useMemo(() => props.showHeader || !emptyRef.value);\n        // If no body is shown, we shouldn't show scrollbar\n        const bodyShowHeaderOnlyRef = useMemo(() => {\n            return props.showHeader || emptyRef.value;\n        });\n        let lastSelectedKey = '';\n        const mergedExpandedRowKeySetRef = computed(() => {\n            return new Set(mergedExpandedRowKeysRef.value);\n        });\n        function handleCheckboxUpdateChecked(tmNode, checked, shiftKey) {\n            if (shiftKey) {\n                const lastIndex = paginatedDataRef.value.findIndex((item) => item.key === lastSelectedKey);\n                if (lastIndex !== -1) {\n                    const currentIndex = paginatedDataRef.value.findIndex((item) => item.key === tmNode.key);\n                    const start = Math.min(lastIndex, currentIndex);\n                    const end = Math.max(lastIndex, currentIndex);\n                    const rowKeysToCheck = [];\n                    paginatedDataRef.value.slice(start, end + 1).forEach((r) => {\n                        if (!r.disabled) {\n                            rowKeysToCheck.push(r.key);\n                        }\n                    });\n                    if (checked) {\n                        doCheck(rowKeysToCheck, false);\n                    }\n                    else {\n                        doUncheck(rowKeysToCheck);\n                    }\n                    lastSelectedKey = tmNode.key;\n                    return;\n                }\n            }\n            if (checked) {\n                doCheck(tmNode.key, false);\n            }\n            else {\n                doUncheck(tmNode.key);\n            }\n            lastSelectedKey = tmNode.key;\n        }\n        function handleRadioUpdateChecked(tmNode) {\n            doCheck(tmNode.key, true);\n        }\n        function getScrollContainer() {\n            if (!shouldDisplaySomeTablePartRef.value) {\n                const { value: emptyEl } = emptyElRef;\n                if (emptyEl) {\n                    return emptyEl;\n                }\n                else {\n                    return null;\n                }\n            }\n            if (virtualScrollRef.value) {\n                return virtualListContainer();\n            }\n            const { value } = scrollbarInstRef;\n            if (value)\n                return value.containerRef;\n            return null;\n        }\n        // For table row with children, tmNode is non-nullable\n        // For table row is expandable but is not tree data, tmNode is null\n        function handleUpdateExpanded(key, tmNode) {\n            var _a;\n            if (loadingKeySetRef.value.has(key))\n                return;\n            const { value: mergedExpandedRowKeys } = mergedExpandedRowKeysRef;\n            const index = mergedExpandedRowKeys.indexOf(key);\n            const nextExpandedKeys = Array.from(mergedExpandedRowKeys);\n            if (~index) {\n                nextExpandedKeys.splice(index, 1);\n                doUpdateExpandedRowKeys(nextExpandedKeys);\n            }\n            else {\n                if (tmNode && !tmNode.isLeaf && !tmNode.shallowLoaded) {\n                    loadingKeySetRef.value.add(key);\n                    void ((_a = onLoadRef\n                        .value) === null || _a === void 0 ? void 0 : _a.call(onLoadRef, tmNode.rawNode).then(() => {\n                        const { value: futureMergedExpandedRowKeys } = mergedExpandedRowKeysRef;\n                        const futureNextExpandedKeys = Array.from(futureMergedExpandedRowKeys);\n                        const index = futureNextExpandedKeys.indexOf(key);\n                        if (!~index) {\n                            futureNextExpandedKeys.push(key);\n                        }\n                        doUpdateExpandedRowKeys(futureNextExpandedKeys);\n                    }).finally(() => {\n                        loadingKeySetRef.value.delete(key);\n                    }));\n                }\n                else {\n                    nextExpandedKeys.push(key);\n                    doUpdateExpandedRowKeys(nextExpandedKeys);\n                }\n            }\n        }\n        function handleMouseleaveTable() {\n            hoverKeyRef.value = null;\n        }\n        function handleMouseenterTable() {\n            scrollPartRef.value = 'body';\n        }\n        function virtualListContainer() {\n            const { value } = virtualListRef;\n            return value === null || value === void 0 ? void 0 : value.listElRef;\n        }\n        function virtualListContent() {\n            const { value } = virtualListRef;\n            return value === null || value === void 0 ? void 0 : value.itemsElRef;\n        }\n        function handleVirtualListScroll(e) {\n            var _a;\n            handleTableBodyScroll(e);\n            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n        }\n        function handleVirtualListResize(e) {\n            var _a;\n            const { onResize } = props;\n            if (onResize)\n                onResize(e);\n            (_a = scrollbarInstRef.value) === null || _a === void 0 ? void 0 : _a.sync();\n        }\n        const exposedMethods = {\n            getScrollContainer,\n            scrollTo(arg0, arg1) {\n                var _a, _b;\n                if (virtualScrollRef.value) {\n                    (_a = virtualListRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg0, arg1);\n                }\n                else {\n                    (_b = scrollbarInstRef.value) === null || _b === void 0 ? void 0 : _b.scrollTo(arg0, arg1);\n                }\n            }\n        };\n        // manually control shadow style to avoid rerender\n        const style = c([\n            ({ props: cProps }) => {\n                const createActiveLeftFixedStyle = (leftActiveFixedColKey) => {\n                    if (leftActiveFixedColKey === null)\n                        return null;\n                    return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${leftActiveFixedColKey}\"]::after`, { boxShadow: 'var(--n-box-shadow-after)' });\n                };\n                const createActiveRightFixedStyle = (rightActiveFixedColKey) => {\n                    if (rightActiveFixedColKey === null)\n                        return null;\n                    return c(`[data-n-id=\"${cProps.componentId}\"] [data-col-key=\"${rightActiveFixedColKey}\"]::before`, { boxShadow: 'var(--n-box-shadow-before)' });\n                };\n                return c([\n                    createActiveLeftFixedStyle(cProps.leftActiveFixedColKey),\n                    createActiveRightFixedStyle(cProps.rightActiveFixedColKey),\n                    cProps.leftActiveFixedChildrenColKeys.map((leftActiveFixedColKey) => createActiveLeftFixedStyle(leftActiveFixedColKey)),\n                    cProps.rightActiveFixedChildrenColKeys.map((rightActiveFixedColKey) => createActiveRightFixedStyle(rightActiveFixedColKey))\n                ]);\n            }\n        ]);\n        let fixedStyleMounted = false;\n        watchEffect(() => {\n            const { value: leftActiveFixedColKey } = leftActiveFixedColKeyRef;\n            const { value: leftActiveFixedChildrenColKeys } = leftActiveFixedChildrenColKeysRef;\n            const { value: rightActiveFixedColKey } = rightActiveFixedColKeyRef;\n            const { value: rightActiveFixedChildrenColKeys } = rightActiveFixedChildrenColKeysRef;\n            if (!fixedStyleMounted &&\n                leftActiveFixedColKey === null &&\n                rightActiveFixedColKey === null) {\n                return;\n            }\n            const cProps = {\n                leftActiveFixedColKey,\n                leftActiveFixedChildrenColKeys,\n                rightActiveFixedColKey,\n                rightActiveFixedChildrenColKeys,\n                componentId\n            };\n            style.mount({\n                id: `n-${componentId}`,\n                force: true,\n                props: cProps,\n                anchorMetaName: cssrAnchorMetaName\n            });\n            fixedStyleMounted = true;\n        });\n        onUnmounted(() => {\n            style.unmount({\n                id: `n-${componentId}`\n            });\n        });\n        return Object.assign({ bodyWidth: bodyWidthRef, summaryPlacement: summaryPlacementRef, dataTableSlots,\n            componentId,\n            scrollbarInstRef,\n            virtualListRef,\n            emptyElRef, summary: summaryRef, mergedClsPrefix: mergedClsPrefixRef, mergedTheme: mergedThemeRef, scrollX: scrollXRef, cols: colsRef, loading: loadingRef, bodyShowHeaderOnly: bodyShowHeaderOnlyRef, shouldDisplaySomeTablePart: shouldDisplaySomeTablePartRef, empty: emptyRef, paginatedDataAndInfo: computed(() => {\n                const { value: striped } = stripedRef;\n                let hasChildren = false;\n                const data = paginatedDataRef.value.map(striped\n                    ? (tmNode, index) => {\n                        if (!tmNode.isLeaf)\n                            hasChildren = true;\n                        return {\n                            tmNode,\n                            key: tmNode.key,\n                            striped: index % 2 === 1,\n                            index\n                        };\n                    }\n                    : (tmNode, index) => {\n                        if (!tmNode.isLeaf)\n                            hasChildren = true;\n                        return {\n                            tmNode,\n                            key: tmNode.key,\n                            striped: false,\n                            index\n                        };\n                    });\n                return {\n                    data,\n                    hasChildren\n                };\n            }), rawPaginatedData: rawPaginatedDataRef, fixedColumnLeftMap: fixedColumnLeftMapRef, fixedColumnRightMap: fixedColumnRightMapRef, currentPage: mergedCurrentPageRef, rowClassName: rowClassNameRef, renderExpand: renderExpandRef, mergedExpandedRowKeySet: mergedExpandedRowKeySetRef, hoverKey: hoverKeyRef, mergedSortState: mergedSortStateRef, virtualScroll: virtualScrollRef, mergedTableLayout: mergedTableLayoutRef, childTriggerColIndex: childTriggerColIndexRef, indent: indentRef, rowProps: rowPropsRef, maxHeight: maxHeightRef, loadingKeySet: loadingKeySetRef, expandable: expandableRef, stickyExpandedRows: stickyExpandedRowsRef, renderExpandIcon: renderExpandIconRef, setHeaderScrollLeft,\n            handleMouseenterTable,\n            handleVirtualListScroll,\n            handleVirtualListResize,\n            handleMouseleaveTable,\n            virtualListContainer,\n            virtualListContent,\n            handleTableBodyScroll,\n            handleCheckboxUpdateChecked,\n            handleRadioUpdateChecked,\n            handleUpdateExpanded,\n            renderCell }, exposedMethods);\n    },\n    render() {\n        const { mergedTheme, scrollX, mergedClsPrefix, virtualScroll, maxHeight, mergedTableLayout, flexHeight, loadingKeySet, onResize, setHeaderScrollLeft } = this;\n        const scrollable = scrollX !== undefined || maxHeight !== undefined || flexHeight;\n        // For a basic table with auto layout whose content may overflow we will\n        // make it scrollable, which differs from browser's native behavior.\n        // For native behavior, see\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout\n        const isBasicAutoLayout = !scrollable && mergedTableLayout === 'auto';\n        const xScrollable = scrollX !== undefined || isBasicAutoLayout;\n        const contentStyle = {\n            minWidth: formatLength(scrollX) || '100%'\n        };\n        if (scrollX)\n            contentStyle.width = '100%';\n        const tableNode = (h(NScrollbar, { ref: \"scrollbarInstRef\", scrollable: scrollable || isBasicAutoLayout, class: `${mergedClsPrefix}-data-table-base-table-body`, style: this.bodyStyle, theme: mergedTheme.peers.Scrollbar, themeOverrides: mergedTheme.peerOverrides.Scrollbar, contentStyle: contentStyle, container: virtualScroll ? this.virtualListContainer : undefined, content: virtualScroll ? this.virtualListContent : undefined, horizontalRailStyle: { zIndex: 3 }, verticalRailStyle: { zIndex: 3 }, xScrollable: xScrollable, onScroll: virtualScroll ? undefined : this.handleTableBodyScroll, internalOnUpdateScrollLeft: setHeaderScrollLeft, onResize: onResize }, {\n            default: () => {\n                // coordinate to pass if there are cells that cross row & col\n                const cordToPass = {};\n                // coordinate to related hover keys\n                const cordKey = {};\n                const { cols, paginatedDataAndInfo, mergedTheme, fixedColumnLeftMap, fixedColumnRightMap, currentPage, rowClassName, mergedSortState, mergedExpandedRowKeySet, stickyExpandedRows, componentId, childTriggerColIndex, expandable, rowProps, handleMouseenterTable, handleMouseleaveTable, renderExpand, summary, handleCheckboxUpdateChecked, handleRadioUpdateChecked, handleUpdateExpanded } = this;\n                const { length: colCount } = cols;\n                let mergedData;\n                // if there is children in data, we should expand mergedData first\n                const { data: paginatedData, hasChildren } = paginatedDataAndInfo;\n                const mergedPaginationData = hasChildren\n                    ? flatten(paginatedData, mergedExpandedRowKeySet)\n                    : paginatedData;\n                if (summary) {\n                    const summaryRows = summary(this.rawPaginatedData);\n                    if (Array.isArray(summaryRows)) {\n                        const summaryRowData = summaryRows.map((row, i) => ({\n                            isSummaryRow: true,\n                            key: `__n_summary__${i}`,\n                            tmNode: {\n                                rawNode: row,\n                                disabled: true\n                            },\n                            index: -1\n                        }));\n                        mergedData =\n                            this.summaryPlacement === 'top'\n                                ? [...summaryRowData, ...mergedPaginationData]\n                                : [...mergedPaginationData, ...summaryRowData];\n                    }\n                    else {\n                        const summaryRowData = {\n                            isSummaryRow: true,\n                            key: '__n_summary__',\n                            tmNode: {\n                                rawNode: summaryRows,\n                                disabled: true\n                            },\n                            index: -1\n                        };\n                        mergedData =\n                            this.summaryPlacement === 'top'\n                                ? [summaryRowData, ...mergedPaginationData]\n                                : [...mergedPaginationData, summaryRowData];\n                    }\n                }\n                else {\n                    mergedData = mergedPaginationData;\n                }\n                const indentStyle = hasChildren\n                    ? { width: pxfy(this.indent) }\n                    : undefined;\n                // Tile the data of the expanded row\n                const displayedData = [];\n                mergedData.forEach((rowInfo) => {\n                    if (renderExpand &&\n                        mergedExpandedRowKeySet.has(rowInfo.key) &&\n                        (!expandable || expandable(rowInfo.tmNode.rawNode))) {\n                        displayedData.push(rowInfo, {\n                            isExpandedRow: true,\n                            key: `${rowInfo.key}-expand`,\n                            tmNode: rowInfo.tmNode,\n                            index: rowInfo.index\n                        });\n                    }\n                    else {\n                        displayedData.push(rowInfo);\n                    }\n                });\n                const { length: rowCount } = displayedData;\n                const rowIndexToKey = {};\n                paginatedData.forEach(({ tmNode }, rowIndex) => {\n                    rowIndexToKey[rowIndex] = tmNode.key;\n                });\n                const bodyWidth = stickyExpandedRows ? this.bodyWidth : null;\n                const bodyWidthPx = bodyWidth === null ? undefined : `${bodyWidth}px`;\n                const renderRow = (rowInfo, displayedRowIndex, isVirtual) => {\n                    const { index: actualRowIndex } = rowInfo;\n                    if ('isExpandedRow' in rowInfo) {\n                        const { tmNode: { key, rawNode } } = rowInfo;\n                        return (h(\"tr\", { class: `${mergedClsPrefix}-data-table-tr`, key: `${key}__expand` },\n                            h(\"td\", { class: [\n                                    `${mergedClsPrefix}-data-table-td`,\n                                    `${mergedClsPrefix}-data-table-td--last-col`,\n                                    displayedRowIndex + 1 === rowCount &&\n                                        `${mergedClsPrefix}-data-table-td--last-row`\n                                ], colspan: colCount }, stickyExpandedRows ? (h(\"div\", { class: `${mergedClsPrefix}-data-table-expand`, style: {\n                                    width: bodyWidthPx\n                                } }, renderExpand(rawNode, actualRowIndex))) : (renderExpand(rawNode, actualRowIndex)))));\n                    }\n                    const isSummary = 'isSummaryRow' in rowInfo;\n                    const striped = !isSummary && rowInfo.striped;\n                    const { tmNode, key: rowKey } = rowInfo;\n                    const { rawNode: rowData } = tmNode;\n                    const expanded = mergedExpandedRowKeySet.has(rowKey);\n                    const props = rowProps\n                        ? rowProps(rowData, actualRowIndex)\n                        : undefined;\n                    const mergedRowClassName = typeof rowClassName === 'string'\n                        ? rowClassName\n                        : createRowClassName(rowData, actualRowIndex, rowClassName);\n                    const row = (h(\"tr\", Object.assign({ onMouseenter: () => {\n                            this.hoverKey = rowKey;\n                        }, key: rowKey, class: [\n                            `${mergedClsPrefix}-data-table-tr`,\n                            isSummary && `${mergedClsPrefix}-data-table-tr--summary`,\n                            striped && `${mergedClsPrefix}-data-table-tr--striped`,\n                            mergedRowClassName\n                        ] }, props), cols.map((col, colIndex) => {\n                        var _a, _b, _c, _d, _e;\n                        if (displayedRowIndex in cordToPass) {\n                            const cordOfRowToPass = cordToPass[displayedRowIndex];\n                            const indexInCordOfRowToPass = cordOfRowToPass.indexOf(colIndex);\n                            if (~indexInCordOfRowToPass) {\n                                cordOfRowToPass.splice(indexInCordOfRowToPass, 1);\n                                return null;\n                            }\n                        }\n                        // TODO: Simplify row calculation\n                        const { column } = col;\n                        const colKey = getColKey(col);\n                        const { rowSpan, colSpan } = column;\n                        const mergedColSpan = isSummary\n                            ? ((_a = rowInfo.tmNode.rawNode[colKey]) === null || _a === void 0 ? void 0 : _a.colSpan) || 1 // optional for #1276\n                            : colSpan\n                                ? colSpan(rowData, actualRowIndex)\n                                : 1;\n                        const mergedRowSpan = isSummary\n                            ? ((_b = rowInfo.tmNode.rawNode[colKey]) === null || _b === void 0 ? void 0 : _b.rowSpan) || 1 // optional for #1276\n                            : rowSpan\n                                ? rowSpan(rowData, actualRowIndex)\n                                : 1;\n                        const isLastCol = colIndex + mergedColSpan === colCount;\n                        const isLastRow = displayedRowIndex + mergedRowSpan === rowCount;\n                        const isCrossRowTd = mergedRowSpan > 1;\n                        if (isCrossRowTd) {\n                            cordKey[displayedRowIndex] = {\n                                [colIndex]: []\n                            };\n                        }\n                        if (mergedColSpan > 1 || isCrossRowTd) {\n                            for (let i = displayedRowIndex; i < displayedRowIndex + mergedRowSpan; ++i) {\n                                if (isCrossRowTd) {\n                                    cordKey[displayedRowIndex][colIndex].push(rowIndexToKey[i]);\n                                }\n                                for (let j = colIndex; j < colIndex + mergedColSpan; ++j) {\n                                    if (i === displayedRowIndex && j === colIndex) {\n                                        continue;\n                                    }\n                                    if (!(i in cordToPass)) {\n                                        cordToPass[i] = [j];\n                                    }\n                                    else {\n                                        cordToPass[i].push(j);\n                                    }\n                                }\n                            }\n                        }\n                        const hoverKey = isCrossRowTd ? this.hoverKey : null;\n                        const { cellProps } = column;\n                        const resolvedCellProps = cellProps === null || cellProps === void 0 ? void 0 : cellProps(rowData, actualRowIndex);\n                        return (h(\"td\", Object.assign({}, resolvedCellProps, { key: colKey, style: [\n                                {\n                                    textAlign: column.align || undefined,\n                                    left: pxfy((_c = fixedColumnLeftMap[colKey]) === null || _c === void 0 ? void 0 : _c.start),\n                                    right: pxfy((_d = fixedColumnRightMap[colKey]) === null || _d === void 0 ? void 0 : _d.start)\n                                },\n                                (resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.style) || ''\n                            ], colspan: mergedColSpan, rowspan: isVirtual ? undefined : mergedRowSpan, \"data-col-key\": colKey, class: [\n                                `${mergedClsPrefix}-data-table-td`,\n                                column.className,\n                                resolvedCellProps === null || resolvedCellProps === void 0 ? void 0 : resolvedCellProps.class,\n                                isSummary &&\n                                    `${mergedClsPrefix}-data-table-td--summary`,\n                                ((hoverKey !== null &&\n                                    cordKey[displayedRowIndex][colIndex].includes(hoverKey)) ||\n                                    isColumnSorting(column, mergedSortState)) &&\n                                    `${mergedClsPrefix}-data-table-td--hover`,\n                                column.fixed &&\n                                    `${mergedClsPrefix}-data-table-td--fixed-${column.fixed}`,\n                                column.align &&\n                                    `${mergedClsPrefix}-data-table-td--${column.align}-align`,\n                                column.type === 'selection' &&\n                                    `${mergedClsPrefix}-data-table-td--selection`,\n                                column.type === 'expand' &&\n                                    `${mergedClsPrefix}-data-table-td--expand`,\n                                isLastCol &&\n                                    `${mergedClsPrefix}-data-table-td--last-col`,\n                                isLastRow &&\n                                    `${mergedClsPrefix}-data-table-td--last-row`\n                            ] }),\n                            hasChildren && colIndex === childTriggerColIndex\n                                ? [\n                                    repeat(isSummary ? 0 : rowInfo.tmNode.level, h(\"div\", { class: `${mergedClsPrefix}-data-table-indent`, style: indentStyle })),\n                                    isSummary || rowInfo.tmNode.isLeaf ? (h(\"div\", { class: `${mergedClsPrefix}-data-table-expand-placeholder` })) : (h(ExpandTrigger, { class: `${mergedClsPrefix}-data-table-expand-trigger`, clsPrefix: mergedClsPrefix, expanded: expanded, renderExpandIcon: this.renderExpandIcon, loading: loadingKeySet.has(rowInfo.key), onClick: () => {\n                                            handleUpdateExpanded(rowKey, rowInfo.tmNode);\n                                        } }))\n                                ]\n                                : null,\n                            column.type === 'selection' ? (!isSummary ? (column.multiple === false ? (h(RenderSafeRadio, { key: currentPage, rowKey: rowKey, disabled: rowInfo.tmNode.disabled, onUpdateChecked: () => handleRadioUpdateChecked(rowInfo.tmNode) })) : (h(RenderSafeCheckbox, { key: currentPage, rowKey: rowKey, disabled: rowInfo.tmNode.disabled, onUpdateChecked: (checked, e) => handleCheckboxUpdateChecked(rowInfo.tmNode, checked, e.shiftKey) }))) : null) : column.type === 'expand' ? (!isSummary ? (!column.expandable ||\n                                ((_e = column.expandable) === null || _e === void 0 ? void 0 : _e.call(column, rowData)) ? (h(ExpandTrigger, { clsPrefix: mergedClsPrefix, expanded: expanded, renderExpandIcon: this.renderExpandIcon, onClick: () => handleUpdateExpanded(rowKey, null) })) : null) : null) : (h(Cell, { clsPrefix: mergedClsPrefix, index: actualRowIndex, row: rowData, column: column, isSummary: isSummary, mergedTheme: mergedTheme, renderCell: this.renderCell }))));\n                    })));\n                    return row;\n                };\n                if (!virtualScroll) {\n                    return (h(\"table\", { class: `${mergedClsPrefix}-data-table-table`, onMouseleave: handleMouseleaveTable, onMouseenter: handleMouseenterTable, style: {\n                            tableLayout: this.mergedTableLayout\n                        } },\n                        h(\"colgroup\", null, cols.map((col) => (h(\"col\", { key: col.key, style: col.style })))),\n                        this.showHeader ? h(TableHeader, { discrete: false }) : null,\n                        !this.empty ? (h(\"tbody\", { \"data-n-id\": componentId, class: `${mergedClsPrefix}-data-table-tbody` }, displayedData.map((rowInfo, displayedRowIndex) => {\n                            return renderRow(rowInfo, displayedRowIndex, false);\n                        }))) : null));\n                }\n                else {\n                    return (h(VirtualList, { ref: \"virtualListRef\", items: displayedData, itemSize: 28, visibleItemsTag: VirtualListItemWrapper, visibleItemsProps: {\n                            clsPrefix: mergedClsPrefix,\n                            id: componentId,\n                            cols,\n                            onMouseenter: handleMouseenterTable,\n                            onMouseleave: handleMouseleaveTable\n                        }, showScrollbar: false, onResize: this.handleVirtualListResize, onScroll: this.handleVirtualListScroll, itemsStyle: contentStyle, itemResizable: true }, {\n                        default: ({ item, index }) => renderRow(item, index, true)\n                    }));\n                }\n            }\n        }));\n        if (this.empty) {\n            const createEmptyNode = () => (h(\"div\", { class: [\n                    `${mergedClsPrefix}-data-table-empty`,\n                    this.loading && `${mergedClsPrefix}-data-table-empty--hide`\n                ], style: this.bodyStyle, ref: \"emptyElRef\" }, resolveSlot(this.dataTableSlots.empty, () => [\n                h(NEmpty, { theme: this.mergedTheme.peers.Empty, themeOverrides: this.mergedTheme.peerOverrides.Empty })\n            ])));\n            if (this.shouldDisplaySomeTablePart) {\n                return (h(Fragment, null,\n                    tableNode,\n                    createEmptyNode()));\n            }\n            else {\n                return (h(VResizeObserver, { onResize: this.onResize }, { default: createEmptyNode }));\n            }\n        }\n        return tableNode;\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}