{"ast":null,"code":"/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { ref, computed, onBeforeUnmount } from 'vue';\nimport { isBrowser } from './utils';\nexport const defaultBreakpointOptions = {\n  // mobile\n  // 0 ~ 640 doesn't mean it should display well in all the range,\n  // but means you should treat it like a mobile phone.)\n  xs: 0,\n  s: 640,\n  m: 1024,\n  l: 1280,\n  xl: 1536,\n  '2xl': 1920 // normal desktop display\n\n};\n\nfunction createMediaQuery(screenWidth) {\n  return `(min-width: ${screenWidth}px)`;\n}\n\nconst mqlMap = {};\n\nfunction useBreakpoints(screens = defaultBreakpointOptions) {\n  if (!isBrowser) return computed(() => []); // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n\n  if (typeof window.matchMedia !== 'function') return computed(() => []);\n  const breakpointStatusRef = ref({});\n  const breakpoints = Object.keys(screens);\n\n  const updateBreakpoints = (e, breakpointName) => {\n    if (e.matches) breakpointStatusRef.value[breakpointName] = true;else breakpointStatusRef.value[breakpointName] = false;\n  };\n\n  breakpoints.forEach(key => {\n    const breakpointValue = screens[key];\n    let mql;\n    let cbs;\n\n    if (mqlMap[breakpointValue] === undefined) {\n      mql = window.matchMedia(createMediaQuery(breakpointValue)); // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n\n      if (mql.addEventListener) {\n        mql.addEventListener('change', e => {\n          cbs.forEach(cb => {\n            cb(e, key);\n          });\n        }); // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      } else if (mql.addListener) {\n        mql.addListener(e => {\n          cbs.forEach(cb => {\n            cb(e, key);\n          });\n        });\n      }\n\n      cbs = new Set();\n      mqlMap[breakpointValue] = {\n        mql,\n        cbs\n      };\n    } else {\n      mql = mqlMap[breakpointValue].mql;\n      cbs = mqlMap[breakpointValue].cbs;\n    }\n\n    cbs.add(updateBreakpoints);\n\n    if (mql.matches) {\n      cbs.forEach(cb => {\n        cb(mql, key);\n      });\n    }\n  });\n  onBeforeUnmount(() => {\n    breakpoints.forEach(breakpoint => {\n      const {\n        cbs\n      } = mqlMap[screens[breakpoint]];\n\n      if (cbs.has(updateBreakpoints)) {\n        cbs.delete(updateBreakpoints);\n      }\n    });\n  });\n  return computed(() => {\n    const {\n      value\n    } = breakpointStatusRef;\n    return breakpoints.filter(key => value[key]);\n  });\n}\n\nexport default useBreakpoints;","map":{"version":3,"names":["ref","computed","onBeforeUnmount","isBrowser","defaultBreakpointOptions","xs","s","m","l","xl","createMediaQuery","screenWidth","mqlMap","useBreakpoints","screens","window","matchMedia","breakpointStatusRef","breakpoints","Object","keys","updateBreakpoints","e","breakpointName","matches","value","forEach","key","breakpointValue","mql","cbs","undefined","addEventListener","cb","addListener","Set","add","breakpoint","has","delete","filter"],"sources":["E:/VCode/SHC社区管理系统/shc_community_manager_system/node_modules/vooks/es/use-breakpoints.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { ref, computed, onBeforeUnmount } from 'vue';\nimport { isBrowser } from './utils';\nexport const defaultBreakpointOptions = {\n    // mobile\n    // 0 ~ 640 doesn't mean it should display well in all the range,\n    // but means you should treat it like a mobile phone.)\n    xs: 0,\n    s: 640,\n    m: 1024,\n    l: 1280,\n    xl: 1536,\n    '2xl': 1920 // normal desktop display\n};\nfunction createMediaQuery(screenWidth) {\n    return `(min-width: ${screenWidth}px)`;\n}\nconst mqlMap = {};\nfunction useBreakpoints(screens = defaultBreakpointOptions) {\n    if (!isBrowser)\n        return computed(() => []);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (typeof window.matchMedia !== 'function')\n        return computed(() => []);\n    const breakpointStatusRef = ref({});\n    const breakpoints = Object.keys(screens);\n    const updateBreakpoints = (e, breakpointName) => {\n        if (e.matches)\n            breakpointStatusRef.value[breakpointName] = true;\n        else\n            breakpointStatusRef.value[breakpointName] = false;\n    };\n    breakpoints.forEach((key) => {\n        const breakpointValue = screens[key];\n        let mql;\n        let cbs;\n        if (mqlMap[breakpointValue] === undefined) {\n            mql = window.matchMedia(createMediaQuery(breakpointValue));\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            if (mql.addEventListener) {\n                mql.addEventListener('change', (e) => {\n                    cbs.forEach((cb) => {\n                        cb(e, key);\n                    });\n                });\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            }\n            else if (mql.addListener) {\n                mql.addListener((e) => {\n                    cbs.forEach((cb) => {\n                        cb(e, key);\n                    });\n                });\n            }\n            cbs = new Set();\n            mqlMap[breakpointValue] = {\n                mql,\n                cbs\n            };\n        }\n        else {\n            mql = mqlMap[breakpointValue].mql;\n            cbs = mqlMap[breakpointValue].cbs;\n        }\n        cbs.add(updateBreakpoints);\n        if (mql.matches) {\n            cbs.forEach((cb) => {\n                cb(mql, key);\n            });\n        }\n    });\n    onBeforeUnmount(() => {\n        breakpoints.forEach((breakpoint) => {\n            const { cbs } = mqlMap[screens[breakpoint]];\n            if (cbs.has(updateBreakpoints)) {\n                cbs.delete(updateBreakpoints);\n            }\n        });\n    });\n    return computed(() => {\n        const { value } = breakpointStatusRef;\n        return breakpoints.filter((key) => value[key]);\n    });\n}\nexport default useBreakpoints;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}